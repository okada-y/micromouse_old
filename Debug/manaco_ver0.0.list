
manaco_ver0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013100  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  080132e0  080132e0  000232e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139c4  080139c4  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080139c4  080139c4  000239c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139cc  080139cc  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080139cc  080139cc  000239cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139d0  080139d0  000239d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080139d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bd5c  20000200  08013bd0  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001bf5c  08013bd0  0003bf5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a5b2  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bb0  00000000  00000000  0005a7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  0005f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00060820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b4a  00000000  00000000  00061a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b43  00000000  00000000  0008958a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7176  00000000  00000000  000a10cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064bc  00000000  00000000  001782c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	080132c8 	.word	0x080132c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	080132c8 	.word	0x080132c8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	; 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d94:	f1a2 0201 	sub.w	r2, r2, #1
 8000d98:	d1ed      	bne.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b972 	b.w	80011f0 <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f806 	bl	8000f24 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__udivmoddi4>:
 8000f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f28:	9e08      	ldr	r6, [sp, #32]
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4688      	mov	r8, r1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d14b      	bne.n	8000fca <__udivmoddi4+0xa6>
 8000f32:	428a      	cmp	r2, r1
 8000f34:	4615      	mov	r5, r2
 8000f36:	d967      	bls.n	8001008 <__udivmoddi4+0xe4>
 8000f38:	fab2 f282 	clz	r2, r2
 8000f3c:	b14a      	cbz	r2, 8000f52 <__udivmoddi4+0x2e>
 8000f3e:	f1c2 0720 	rsb	r7, r2, #32
 8000f42:	fa01 f302 	lsl.w	r3, r1, r2
 8000f46:	fa20 f707 	lsr.w	r7, r0, r7
 8000f4a:	4095      	lsls	r5, r2
 8000f4c:	ea47 0803 	orr.w	r8, r7, r3
 8000f50:	4094      	lsls	r4, r2
 8000f52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f56:	0c23      	lsrs	r3, r4, #16
 8000f58:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f5c:	fa1f fc85 	uxth.w	ip, r5
 8000f60:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f68:	fb07 f10c 	mul.w	r1, r7, ip
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d909      	bls.n	8000f84 <__udivmoddi4+0x60>
 8000f70:	18eb      	adds	r3, r5, r3
 8000f72:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f76:	f080 811b 	bcs.w	80011b0 <__udivmoddi4+0x28c>
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	f240 8118 	bls.w	80011b0 <__udivmoddi4+0x28c>
 8000f80:	3f02      	subs	r7, #2
 8000f82:	442b      	add	r3, r5
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f98:	45a4      	cmp	ip, r4
 8000f9a:	d909      	bls.n	8000fb0 <__udivmoddi4+0x8c>
 8000f9c:	192c      	adds	r4, r5, r4
 8000f9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fa2:	f080 8107 	bcs.w	80011b4 <__udivmoddi4+0x290>
 8000fa6:	45a4      	cmp	ip, r4
 8000fa8:	f240 8104 	bls.w	80011b4 <__udivmoddi4+0x290>
 8000fac:	3802      	subs	r0, #2
 8000fae:	442c      	add	r4, r5
 8000fb0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fb4:	eba4 040c 	sub.w	r4, r4, ip
 8000fb8:	2700      	movs	r7, #0
 8000fba:	b11e      	cbz	r6, 8000fc4 <__udivmoddi4+0xa0>
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d909      	bls.n	8000fe2 <__udivmoddi4+0xbe>
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	f000 80eb 	beq.w	80011aa <__udivmoddi4+0x286>
 8000fd4:	2700      	movs	r7, #0
 8000fd6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fda:	4638      	mov	r0, r7
 8000fdc:	4639      	mov	r1, r7
 8000fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe2:	fab3 f783 	clz	r7, r3
 8000fe6:	2f00      	cmp	r7, #0
 8000fe8:	d147      	bne.n	800107a <__udivmoddi4+0x156>
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d302      	bcc.n	8000ff4 <__udivmoddi4+0xd0>
 8000fee:	4282      	cmp	r2, r0
 8000ff0:	f200 80fa 	bhi.w	80011e8 <__udivmoddi4+0x2c4>
 8000ff4:	1a84      	subs	r4, r0, r2
 8000ff6:	eb61 0303 	sbc.w	r3, r1, r3
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	d0e0      	beq.n	8000fc4 <__udivmoddi4+0xa0>
 8001002:	e9c6 4800 	strd	r4, r8, [r6]
 8001006:	e7dd      	b.n	8000fc4 <__udivmoddi4+0xa0>
 8001008:	b902      	cbnz	r2, 800100c <__udivmoddi4+0xe8>
 800100a:	deff      	udf	#255	; 0xff
 800100c:	fab2 f282 	clz	r2, r2
 8001010:	2a00      	cmp	r2, #0
 8001012:	f040 808f 	bne.w	8001134 <__udivmoddi4+0x210>
 8001016:	1b49      	subs	r1, r1, r5
 8001018:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800101c:	fa1f f885 	uxth.w	r8, r5
 8001020:	2701      	movs	r7, #1
 8001022:	fbb1 fcfe 	udiv	ip, r1, lr
 8001026:	0c23      	lsrs	r3, r4, #16
 8001028:	fb0e 111c 	mls	r1, lr, ip, r1
 800102c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001030:	fb08 f10c 	mul.w	r1, r8, ip
 8001034:	4299      	cmp	r1, r3
 8001036:	d907      	bls.n	8001048 <__udivmoddi4+0x124>
 8001038:	18eb      	adds	r3, r5, r3
 800103a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800103e:	d202      	bcs.n	8001046 <__udivmoddi4+0x122>
 8001040:	4299      	cmp	r1, r3
 8001042:	f200 80cd 	bhi.w	80011e0 <__udivmoddi4+0x2bc>
 8001046:	4684      	mov	ip, r0
 8001048:	1a59      	subs	r1, r3, r1
 800104a:	b2a3      	uxth	r3, r4
 800104c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001050:	fb0e 1410 	mls	r4, lr, r0, r1
 8001054:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001058:	fb08 f800 	mul.w	r8, r8, r0
 800105c:	45a0      	cmp	r8, r4
 800105e:	d907      	bls.n	8001070 <__udivmoddi4+0x14c>
 8001060:	192c      	adds	r4, r5, r4
 8001062:	f100 33ff 	add.w	r3, r0, #4294967295
 8001066:	d202      	bcs.n	800106e <__udivmoddi4+0x14a>
 8001068:	45a0      	cmp	r8, r4
 800106a:	f200 80b6 	bhi.w	80011da <__udivmoddi4+0x2b6>
 800106e:	4618      	mov	r0, r3
 8001070:	eba4 0408 	sub.w	r4, r4, r8
 8001074:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001078:	e79f      	b.n	8000fba <__udivmoddi4+0x96>
 800107a:	f1c7 0c20 	rsb	ip, r7, #32
 800107e:	40bb      	lsls	r3, r7
 8001080:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001084:	ea4e 0e03 	orr.w	lr, lr, r3
 8001088:	fa01 f407 	lsl.w	r4, r1, r7
 800108c:	fa20 f50c 	lsr.w	r5, r0, ip
 8001090:	fa21 f30c 	lsr.w	r3, r1, ip
 8001094:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001098:	4325      	orrs	r5, r4
 800109a:	fbb3 f9f8 	udiv	r9, r3, r8
 800109e:	0c2c      	lsrs	r4, r5, #16
 80010a0:	fb08 3319 	mls	r3, r8, r9, r3
 80010a4:	fa1f fa8e 	uxth.w	sl, lr
 80010a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010ac:	fb09 f40a 	mul.w	r4, r9, sl
 80010b0:	429c      	cmp	r4, r3
 80010b2:	fa02 f207 	lsl.w	r2, r2, r7
 80010b6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ba:	d90b      	bls.n	80010d4 <__udivmoddi4+0x1b0>
 80010bc:	eb1e 0303 	adds.w	r3, lr, r3
 80010c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010c4:	f080 8087 	bcs.w	80011d6 <__udivmoddi4+0x2b2>
 80010c8:	429c      	cmp	r4, r3
 80010ca:	f240 8084 	bls.w	80011d6 <__udivmoddi4+0x2b2>
 80010ce:	f1a9 0902 	sub.w	r9, r9, #2
 80010d2:	4473      	add	r3, lr
 80010d4:	1b1b      	subs	r3, r3, r4
 80010d6:	b2ad      	uxth	r5, r5
 80010d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010dc:	fb08 3310 	mls	r3, r8, r0, r3
 80010e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010e8:	45a2      	cmp	sl, r4
 80010ea:	d908      	bls.n	80010fe <__udivmoddi4+0x1da>
 80010ec:	eb1e 0404 	adds.w	r4, lr, r4
 80010f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010f4:	d26b      	bcs.n	80011ce <__udivmoddi4+0x2aa>
 80010f6:	45a2      	cmp	sl, r4
 80010f8:	d969      	bls.n	80011ce <__udivmoddi4+0x2aa>
 80010fa:	3802      	subs	r0, #2
 80010fc:	4474      	add	r4, lr
 80010fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001102:	fba0 8902 	umull	r8, r9, r0, r2
 8001106:	eba4 040a 	sub.w	r4, r4, sl
 800110a:	454c      	cmp	r4, r9
 800110c:	46c2      	mov	sl, r8
 800110e:	464b      	mov	r3, r9
 8001110:	d354      	bcc.n	80011bc <__udivmoddi4+0x298>
 8001112:	d051      	beq.n	80011b8 <__udivmoddi4+0x294>
 8001114:	2e00      	cmp	r6, #0
 8001116:	d069      	beq.n	80011ec <__udivmoddi4+0x2c8>
 8001118:	ebb1 050a 	subs.w	r5, r1, sl
 800111c:	eb64 0403 	sbc.w	r4, r4, r3
 8001120:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001124:	40fd      	lsrs	r5, r7
 8001126:	40fc      	lsrs	r4, r7
 8001128:	ea4c 0505 	orr.w	r5, ip, r5
 800112c:	e9c6 5400 	strd	r5, r4, [r6]
 8001130:	2700      	movs	r7, #0
 8001132:	e747      	b.n	8000fc4 <__udivmoddi4+0xa0>
 8001134:	f1c2 0320 	rsb	r3, r2, #32
 8001138:	fa20 f703 	lsr.w	r7, r0, r3
 800113c:	4095      	lsls	r5, r2
 800113e:	fa01 f002 	lsl.w	r0, r1, r2
 8001142:	fa21 f303 	lsr.w	r3, r1, r3
 8001146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800114a:	4338      	orrs	r0, r7
 800114c:	0c01      	lsrs	r1, r0, #16
 800114e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001152:	fa1f f885 	uxth.w	r8, r5
 8001156:	fb0e 3317 	mls	r3, lr, r7, r3
 800115a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800115e:	fb07 f308 	mul.w	r3, r7, r8
 8001162:	428b      	cmp	r3, r1
 8001164:	fa04 f402 	lsl.w	r4, r4, r2
 8001168:	d907      	bls.n	800117a <__udivmoddi4+0x256>
 800116a:	1869      	adds	r1, r5, r1
 800116c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001170:	d22f      	bcs.n	80011d2 <__udivmoddi4+0x2ae>
 8001172:	428b      	cmp	r3, r1
 8001174:	d92d      	bls.n	80011d2 <__udivmoddi4+0x2ae>
 8001176:	3f02      	subs	r7, #2
 8001178:	4429      	add	r1, r5
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	b281      	uxth	r1, r0
 800117e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001182:	fb0e 3310 	mls	r3, lr, r0, r3
 8001186:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800118a:	fb00 f308 	mul.w	r3, r0, r8
 800118e:	428b      	cmp	r3, r1
 8001190:	d907      	bls.n	80011a2 <__udivmoddi4+0x27e>
 8001192:	1869      	adds	r1, r5, r1
 8001194:	f100 3cff 	add.w	ip, r0, #4294967295
 8001198:	d217      	bcs.n	80011ca <__udivmoddi4+0x2a6>
 800119a:	428b      	cmp	r3, r1
 800119c:	d915      	bls.n	80011ca <__udivmoddi4+0x2a6>
 800119e:	3802      	subs	r0, #2
 80011a0:	4429      	add	r1, r5
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011a8:	e73b      	b.n	8001022 <__udivmoddi4+0xfe>
 80011aa:	4637      	mov	r7, r6
 80011ac:	4630      	mov	r0, r6
 80011ae:	e709      	b.n	8000fc4 <__udivmoddi4+0xa0>
 80011b0:	4607      	mov	r7, r0
 80011b2:	e6e7      	b.n	8000f84 <__udivmoddi4+0x60>
 80011b4:	4618      	mov	r0, r3
 80011b6:	e6fb      	b.n	8000fb0 <__udivmoddi4+0x8c>
 80011b8:	4541      	cmp	r1, r8
 80011ba:	d2ab      	bcs.n	8001114 <__udivmoddi4+0x1f0>
 80011bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011c0:	eb69 020e 	sbc.w	r2, r9, lr
 80011c4:	3801      	subs	r0, #1
 80011c6:	4613      	mov	r3, r2
 80011c8:	e7a4      	b.n	8001114 <__udivmoddi4+0x1f0>
 80011ca:	4660      	mov	r0, ip
 80011cc:	e7e9      	b.n	80011a2 <__udivmoddi4+0x27e>
 80011ce:	4618      	mov	r0, r3
 80011d0:	e795      	b.n	80010fe <__udivmoddi4+0x1da>
 80011d2:	4667      	mov	r7, ip
 80011d4:	e7d1      	b.n	800117a <__udivmoddi4+0x256>
 80011d6:	4681      	mov	r9, r0
 80011d8:	e77c      	b.n	80010d4 <__udivmoddi4+0x1b0>
 80011da:	3802      	subs	r0, #2
 80011dc:	442c      	add	r4, r5
 80011de:	e747      	b.n	8001070 <__udivmoddi4+0x14c>
 80011e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e4:	442b      	add	r3, r5
 80011e6:	e72f      	b.n	8001048 <__udivmoddi4+0x124>
 80011e8:	4638      	mov	r0, r7
 80011ea:	e708      	b.n	8000ffe <__udivmoddi4+0xda>
 80011ec:	4637      	mov	r7, r6
 80011ee:	e6e9      	b.n	8000fc4 <__udivmoddi4+0xa0>

080011f0 <__aeabi_idiv0>:
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 fd29 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f00b f94a 	bl	800c4c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fd41 	bl	8001cde <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 fd09 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000024 	.word	0x20000024
 8001290:	20000004 	.word	0x20000004
 8001294:	20000000 	.word	0x20000000

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2001b318 	.word	0x2001b318

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2001b318 	.word	0x2001b318

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e033      	b.n	800139a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f004 fb58 	bl	80059f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d118      	bne.n	800138c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001362:	f023 0302 	bic.w	r3, r3, #2
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fa32 	bl	80017d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	e001      	b.n	8001390 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Start_DMA+0x1e>
 80013be:	2302      	movs	r3, #2
 80013c0:	e0b1      	b.n	8001526 <HAL_ADC_Start_DMA+0x182>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d018      	beq.n	800140a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_ADC_Start_DMA+0x18c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_ADC_Start_DMA+0x190>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9a      	lsrs	r2, r3, #18
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	3b01      	subs	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	f040 8085 	bne.w	8001524 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001458:	d106      	bne.n	8001468 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f023 0206 	bic.w	r2, r3, #6
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
 8001466:	e002      	b.n	800146e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_ADC_Start_DMA+0x194>)
 8001478:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	4a2f      	ldr	r2, [pc, #188]	; (800153c <HAL_ADC_Start_DMA+0x198>)
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001486:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_ADC_Start_DMA+0x19c>)
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_ADC_Start_DMA+0x1a0>)
 8001490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800149a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	334c      	adds	r3, #76	; 0x4c
 80014c6:	4619      	mov	r1, r3
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f000 fcc2 	bl	8001e54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10f      	bne.n	80014fc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11c      	bne.n	8001524 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	e013      	b.n	8001524 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_ADC_Start_DMA+0x1a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10e      	bne.n	8001524 <HAL_ADC_Start_DMA+0x180>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d107      	bne.n	8001524 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001522:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000024 	.word	0x20000024
 8001534:	431bde83 	.word	0x431bde83
 8001538:	40012300 	.word	0x40012300
 800153c:	080019d1 	.word	0x080019d1
 8001540:	08001a8b 	.word	0x08001a8b
 8001544:	08001aa7 	.word	0x08001aa7
 8001548:	40012000 	.word	0x40012000

0800154c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1c>
 800158c:	2302      	movs	r3, #2
 800158e:	e113      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x244>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d925      	bls.n	80015ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68d9      	ldr	r1, [r3, #12]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	3b1e      	subs	r3, #30
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	4603      	mov	r3, r0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4403      	add	r3, r0
 80015de:	3b1e      	subs	r3, #30
 80015e0:	409a      	lsls	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	e022      	b.n	8001632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6919      	ldr	r1, [r3, #16]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	4603      	mov	r3, r0
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4403      	add	r3, r0
 8001628:	409a      	lsls	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d824      	bhi.n	8001684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b05      	subs	r3, #5
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b05      	subs	r3, #5
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
 8001682:	e04c      	b.n	800171e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d824      	bhi.n	80016d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	3b23      	subs	r3, #35	; 0x23
 800169e:	221f      	movs	r2, #31
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43da      	mvns	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	400a      	ands	r2, r1
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	3b23      	subs	r3, #35	; 0x23
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
 80016d4:	e023      	b.n	800171e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b41      	subs	r3, #65	; 0x41
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	400a      	ands	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b41      	subs	r3, #65	; 0x41
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_ADC_ConfigChannel+0x250>)
 8001720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <HAL_ADC_ConfigChannel+0x254>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d10f      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1d8>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d10b      	bne.n	800174c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_ADC_ConfigChannel+0x254>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12b      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x23a>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_ADC_ConfigChannel+0x258>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d003      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x1f4>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b11      	cmp	r3, #17
 8001766:	d122      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_ADC_ConfigChannel+0x258>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d111      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_ADC_ConfigChannel+0x25c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <HAL_ADC_ConfigChannel+0x260>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9a      	lsrs	r2, r3, #18
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40012300 	.word	0x40012300
 80017c8:	40012000 	.word	0x40012000
 80017cc:	10000012 	.word	0x10000012
 80017d0:	20000024 	.word	0x20000024
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <ADC_Init+0x1f0>)
 80017e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800180c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6899      	ldr	r1, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	4a58      	ldr	r2, [pc, #352]	; (80019cc <ADC_Init+0x1f4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800187e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6899      	ldr	r1, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6899      	ldr	r1, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	e00f      	b.n	80018d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0202 	bic.w	r2, r2, #2
 80018e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6899      	ldr	r1, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
 80018f0:	005a      	lsls	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01b      	beq.n	800193c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	3b01      	subs	r3, #1
 8001930:	035a      	lsls	r2, r3, #13
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e007      	b.n	800194c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	3b01      	subs	r3, #1
 8001968:	051a      	lsls	r2, r3, #20
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800198e:	025a      	lsls	r2, r3, #9
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	029a      	lsls	r2, r3, #10
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40012300 	.word	0x40012300
 80019cc:	0f000001 	.word	0x0f000001

080019d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d13c      	bne.n	8001a64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d12b      	bne.n	8001a5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d127      	bne.n	8001a5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d119      	bne.n	8001a5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0220 	bic.w	r2, r2, #32
 8001a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f005 f823 	bl	8006aa8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a62:	e00e      	b.n	8001a82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fd75 	bl	8001560 <HAL_ADC_ErrorCallback>
}
 8001a76:	e004      	b.n	8001a82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fd57 	bl	800154c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fd4a 	bl	8001560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fadc 	bl	80012c0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e099      	b.n	8001e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d34:	e00f      	b.n	8001d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d36:	f7ff fac3 	bl	80012c0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d908      	bls.n	8001d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e078      	b.n	8001e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e8      	bne.n	8001d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_DMA_Init+0x158>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d107      	bne.n	8001dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4313      	orrs	r3, r2
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0307 	bic.w	r3, r3, #7
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d117      	bne.n	8001e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 faed 	bl	80023dc <DMA_CheckFifoParam>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e16:	2301      	movs	r3, #1
 8001e18:	e016      	b.n	8001e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 faa4 	bl	8002370 <DMA_CalcBaseAndBitshift>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	223f      	movs	r2, #63	; 0x3f
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	e010803f 	.word	0xe010803f

08001e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Start_IT+0x26>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e048      	b.n	8001f0c <HAL_DMA_Start_IT+0xb8>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d137      	bne.n	8001efe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fa36 	bl	8002314 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0216 	orr.w	r2, r2, #22
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ed2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b92      	ldr	r3, [pc, #584]	; (80021b0 <HAL_DMA_IRQHandler+0x258>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_DMA_IRQHandler+0x25c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808e 	beq.w	80021f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8086 	beq.w	80021f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07d      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e078      	b.n	8002262 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01c      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d030      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02b      	b.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d027      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e022      	b.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
 80021b0:	20000024 	.word	0x20000024
 80021b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0210 	bic.w	r2, r2, #16
 80021d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d032      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d022      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d307      	bcc.n	800223e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f2      	bne.n	8002222 <HAL_DMA_IRQHandler+0x2ca>
 800223c:	e000      	b.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800223e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e000      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002262:	bf00      	nop
    }
  }
}
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop

0800226c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	460b      	mov	r3, r1
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_DMA_RegisterCallback+0x20>
 8002288:	2302      	movs	r3, #2
 800228a:	e03c      	b.n	8002306 <HAL_DMA_RegisterCallback+0x9a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d129      	bne.n	80022f4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d829      	bhi.n	80022fa <HAL_DMA_RegisterCallback+0x8e>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <HAL_DMA_RegisterCallback+0x40>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022c5 	.word	0x080022c5
 80022b0:	080022cd 	.word	0x080022cd
 80022b4:	080022d5 	.word	0x080022d5
 80022b8:	080022dd 	.word	0x080022dd
 80022bc:	080022e5 	.word	0x080022e5
 80022c0:	080022ed 	.word	0x080022ed
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80022ca:	e017      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80022d2:	e013      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80022da:	e00f      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80022e2:	e00b      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80022ea:	e007      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80022f2:	e003      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
 80022f8:	e000      	b.n	80022fc <HAL_DMA_RegisterCallback+0x90>
      break;
 80022fa:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002304:	7dfb      	ldrb	r3, [r7, #23]
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop

08002314 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002330:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d108      	bne.n	8002354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002352:	e007      	b.n	8002364 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3b10      	subs	r3, #16
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <DMA_CalcBaseAndBitshift+0x68>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d909      	bls.n	80023b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
 80023b0:	e007      	b.n	80023c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	aaaaaaab 	.word	0xaaaaaaab
 80023d8:	08013684 	.word	0x08013684

080023dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d855      	bhi.n	80024a8 <DMA_CheckFifoParam+0xcc>
 80023fc:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <DMA_CheckFifoParam+0x28>)
 80023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002402:	bf00      	nop
 8002404:	08002415 	.word	0x08002415
 8002408:	08002427 	.word	0x08002427
 800240c:	08002415 	.word	0x08002415
 8002410:	080024a9 	.word	0x080024a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d045      	beq.n	80024ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e042      	b.n	80024ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242e:	d13f      	bne.n	80024b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e03c      	b.n	80024b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	d121      	bne.n	8002484 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d836      	bhi.n	80024b4 <DMA_CheckFifoParam+0xd8>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <DMA_CheckFifoParam+0x70>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800245d 	.word	0x0800245d
 8002450:	08002463 	.word	0x08002463
 8002454:	0800245d 	.word	0x0800245d
 8002458:	08002475 	.word	0x08002475
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e02f      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002472:	e021      	b.n	80024b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800247c:	d11e      	bne.n	80024bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002482:	e01b      	b.n	80024bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d902      	bls.n	8002490 <DMA_CheckFifoParam+0xb4>
 800248a:	2b03      	cmp	r3, #3
 800248c:	d003      	beq.n	8002496 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800248e:	e018      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e015      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00e      	beq.n	80024c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      break;
 80024a6:	e00b      	b.n	80024c0 <DMA_CheckFifoParam+0xe4>
      break;
 80024a8:	bf00      	nop
 80024aa:	e00a      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024ac:	bf00      	nop
 80024ae:	e008      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024b0:	bf00      	nop
 80024b2:	e006      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024b4:	bf00      	nop
 80024b6:	e004      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024b8:	bf00      	nop
 80024ba:	e002      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024c0:	bf00      	nop
    }
  } 
  
  return status; 
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e165      	b.n	80027b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8154 	bne.w	80027b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x4a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b12      	cmp	r3, #18
 8002518:	d123      	bne.n	8002562 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00b      	beq.n	80025b6 <HAL_GPIO_Init+0xe6>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025aa:	2b11      	cmp	r3, #17
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80ae 	beq.w	80027b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a5b      	ldr	r2, [pc, #364]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_GPIO_Init+0x300>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d025      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x308>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01f      	beq.n	80026e6 <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x30c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d019      	beq.n	80026e2 <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x310>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x314>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x20a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a49      	ldr	r2, [pc, #292]	; (80027e8 <HAL_GPIO_Init+0x318>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x206>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a48      	ldr	r2, [pc, #288]	; (80027ec <HAL_GPIO_Init+0x31c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x202>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00c      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00a      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026da:	2304      	movs	r3, #4
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026ea:	2300      	movs	r3, #0
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fc:	4934      	ldr	r1, [pc, #208]	; (80027d0 <HAL_GPIO_Init+0x300>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272e:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_GPIO_Init+0x320>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	f67f ae96 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	3724      	adds	r7, #36	; 0x24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40021400 	.word	0x40021400
 80027ec:	40021800 	.word	0x40021800
 80027f0:	40013c00 	.word	0x40013c00

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0ca      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b64      	ldr	r3, [pc, #400]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b62      	ldr	r3, [pc, #392]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b6      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494c      	ldr	r1, [pc, #304]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07d      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06d      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e065      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4933      	ldr	r1, [pc, #204]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe fcd2 	bl	80012c0 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fcce 	bl	80012c0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04d      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <HAL_RCC_ClockConfig+0x1b4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e030      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4915      	ldr	r1, [pc, #84]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490d      	ldr	r1, [pc, #52]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f81d 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029b2:	4601      	mov	r1, r0
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	fa21 f303 	lsr.w	r3, r1, r3
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe fc34 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	0801368c 	.word	0x0801368c
 80029e8:	20000024 	.word	0x20000024

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a02:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d007      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x32>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d008      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x38>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 808d 	bne.w	8002b32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a1a:	60bb      	str	r3, [r7, #8]
       break;
 8002a1c:	e08c      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a1e:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a20:	60bb      	str	r3, [r7, #8]
      break;
 8002a22:	e089      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d023      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	ea03 0501 	and.w	r5, r3, r1
 8002a50:	ea04 0602 	and.w	r6, r4, r2
 8002a54:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a56:	fb02 f106 	mul.w	r1, r2, r6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	fb02 f205 	mul.w	r2, r2, r5
 8002a60:	440a      	add	r2, r1
 8002a62:	493a      	ldr	r1, [pc, #232]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a64:	fba5 0101 	umull	r0, r1, r5, r1
 8002a68:	1853      	adds	r3, r2, r1
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f04f 0400 	mov.w	r4, #0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	f7fe fa3d 	bl	8000ef4 <__aeabi_uldivmod>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e049      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	ea03 0501 	and.w	r5, r3, r1
 8002a98:	ea04 0602 	and.w	r6, r4, r2
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	f04f 0400 	mov.w	r4, #0
 8002aa8:	0154      	lsls	r4, r2, #5
 8002aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aae:	014b      	lsls	r3, r1, #5
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	1b49      	subs	r1, r1, r5
 8002ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f04f 0400 	mov.w	r4, #0
 8002ac2:	0194      	lsls	r4, r2, #6
 8002ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ac8:	018b      	lsls	r3, r1, #6
 8002aca:	1a5b      	subs	r3, r3, r1
 8002acc:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	00e2      	lsls	r2, r4, #3
 8002ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ade:	00d9      	lsls	r1, r3, #3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	195b      	adds	r3, r3, r5
 8002ae6:	eb44 0406 	adc.w	r4, r4, r6
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	02a2      	lsls	r2, r4, #10
 8002af4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002af8:	0299      	lsls	r1, r3, #10
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	f7fe f9f2 	bl	8000ef4 <__aeabi_uldivmod>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	3301      	adds	r3, #1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	60bb      	str	r3, [r7, #8]
      break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b34:	60bb      	str	r3, [r7, #8]
      break;
 8002b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b38:	68bb      	ldr	r3, [r7, #8]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	017d7840 	.word	0x017d7840

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000024 	.word	0x20000024

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	0801369c 	.word	0x0801369c

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffdc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0b5b      	lsrs	r3, r3, #13
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0801369c 	.word	0x0801369c

08002bb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d075      	beq.n	8002cbc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bd0:	4ba2      	ldr	r3, [pc, #648]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d00c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bdc:	4b9f      	ldr	r3, [pc, #636]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d112      	bne.n	8002c0e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be8:	4b9c      	ldr	r3, [pc, #624]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf4:	d10b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf6:	4b99      	ldr	r3, [pc, #612]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d05b      	beq.n	8002cba <HAL_RCC_OscConfig+0x102>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d157      	bne.n	8002cba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e20b      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x6e>
 8002c18:	4b90      	ldr	r3, [pc, #576]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a8f      	ldr	r2, [pc, #572]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e01d      	b.n	8002c62 <HAL_RCC_OscConfig+0xaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x92>
 8002c30:	4b8a      	ldr	r3, [pc, #552]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a89      	ldr	r2, [pc, #548]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b87      	ldr	r3, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a86      	ldr	r2, [pc, #536]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e00b      	b.n	8002c62 <HAL_RCC_OscConfig+0xaa>
 8002c4a:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a83      	ldr	r2, [pc, #524]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d013      	beq.n	8002c92 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fb29 	bl	80012c0 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c72:	f7fe fb25 	bl	80012c0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1d0      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0xba>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fb15 	bl	80012c0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fb11 	bl	80012c0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e1bc      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cac:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0xe2>
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d063      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cc8:	4b64      	ldr	r3, [pc, #400]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d11c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_OscConfig+0x14c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e190      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b55      	ldr	r3, [pc, #340]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4952      	ldr	r1, [pc, #328]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d18:	e03a      	b.n	8002d90 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d22:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <HAL_RCC_OscConfig+0x2a8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe faca 	bl	80012c0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7fe fac6 	bl	80012c0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e171      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	493f      	ldr	r1, [pc, #252]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
 8002d62:	e015      	b.n	8002d90 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d64:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_OscConfig+0x2a8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe faa9 	bl	80012c0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe faa5 	bl	80012c0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e150      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d030      	beq.n	8002dfe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da4:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe fa89 	bl	80012c0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe fa85 	bl	80012c0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e130      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1fa>
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fa72 	bl	80012c0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fa6e 	bl	80012c0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e119      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 809f 	beq.w	8002f4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x2a4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_OscConfig+0x2b0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d120      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_RCC_OscConfig+0x2b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x2b0>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fe fa34 	bl	80012c0 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	e010      	b.n	8002e7e <HAL_RCC_OscConfig+0x2c6>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
 8002e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fe fa28 	bl	80012c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0d3      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x478>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2e8>
 8002e92:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a67      	ldr	r2, [pc, #412]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e01c      	b.n	8002eda <HAL_RCC_OscConfig+0x322>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x30a>
 8002ea8:	4b62      	ldr	r3, [pc, #392]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a61      	ldr	r2, [pc, #388]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a5e      	ldr	r2, [pc, #376]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x322>
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f9ed 	bl	80012c0 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f9e9 	bl	80012c0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e092      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCC_OscConfig+0x332>
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe f9d7 	bl	80012c0 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fe f9d3 	bl	80012c0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e07c      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ee      	bne.n	8002f16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d068      	beq.n	8003024 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d060      	beq.n	8003020 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d145      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x480>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f9a8 	bl	80012c0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe f9a4 	bl	80012c0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e04f      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	491d      	ldr	r1, [pc, #116]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCC_OscConfig+0x480>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f979 	bl	80012c0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe f975 	bl	80012c0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e020      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x41a>
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x480>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe f962 	bl	80012c0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe f95e 	bl	80012c0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e009      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCC_OscConfig+0x47c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x448>
 800301e:	e001      	b.n	8003024 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40007000 	.word	0x40007000
 8003034:	40023800 	.word	0x40023800
 8003038:	42470060 	.word	0x42470060

0800303c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e056      	b.n	80030fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f009 f97b 	bl	800c364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003084:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	ea42 0103 	orr.w	r1, r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0104 	and.w	r1, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_SPI_Transmit+0x22>
 8003122:	2302      	movs	r3, #2
 8003124:	e11e      	b.n	8003364 <HAL_SPI_Transmit+0x260>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800312e:	f7fe f8c7 	bl	80012c0 <HAL_GetTick>
 8003132:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003148:	e103      	b.n	8003352 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_SPI_Transmit+0x52>
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77fb      	strb	r3, [r7, #31]
    goto error;
 800315a:	e0fa      	b.n	8003352 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2203      	movs	r2, #3
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a2:	d107      	bne.n	80031b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d007      	beq.n	80031d2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031da:	d14b      	bne.n	8003274 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_Transmit+0xe6>
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d13e      	bne.n	8003268 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800320e:	e02b      	b.n	8003268 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d112      	bne.n	8003244 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	86da      	strh	r2, [r3, #54]	; 0x36
 8003242:	e011      	b.n	8003268 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003244:	f7fe f83c 	bl	80012c0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d803      	bhi.n	800325c <HAL_SPI_Transmit+0x158>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d102      	bne.n	8003262 <HAL_SPI_Transmit+0x15e>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003266:	e074      	b.n	8003352 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ce      	bne.n	8003210 <HAL_SPI_Transmit+0x10c>
 8003272:	e04c      	b.n	800330e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_Transmit+0x17e>
 800327c:	8afb      	ldrh	r3, [r7, #22]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d140      	bne.n	8003304 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032a8:	e02c      	b.n	8003304 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d113      	bne.n	80032e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80032de:	e011      	b.n	8003304 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e0:	f7fd ffee 	bl	80012c0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d803      	bhi.n	80032f8 <HAL_SPI_Transmit+0x1f4>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x1fa>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003302:	e026      	b.n	8003352 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1cd      	bne.n	80032aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fd96 	bl	8003e44 <SPI_EndRxTxTransaction>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e000      	b.n	8003352 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003350:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003362:	7ffb      	ldrb	r3, [r7, #31]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003388:	d112      	bne.n	80033b0 <HAL_SPI_Receive+0x44>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10e      	bne.n	80033b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2204      	movs	r2, #4
 8003396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8e9 	bl	800357e <HAL_SPI_TransmitReceive>
 80033ac:	4603      	mov	r3, r0
 80033ae:	e0e2      	b.n	8003576 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Receive+0x52>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0db      	b.n	8003576 <HAL_SPI_Receive+0x20a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c6:	f7fd ff7b 	bl	80012c0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033dc:	e0c2      	b.n	8003564 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_SPI_Receive+0x7e>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ee:	e0b9      	b.n	8003564 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2204      	movs	r2, #4
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d107      	bne.n	8003448 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d007      	beq.n	8003466 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d162      	bne.n	8003534 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800346e:	e02e      	b.n	80034ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d115      	bne.n	80034aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f103 020c 	add.w	r2, r3, #12
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a8:	e011      	b.n	80034ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034aa:	f7fd ff09 	bl	80012c0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d803      	bhi.n	80034c2 <HAL_SPI_Receive+0x156>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_Receive+0x15c>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034cc:	e04a      	b.n	8003564 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1cb      	bne.n	8003470 <HAL_SPI_Receive+0x104>
 80034d8:	e031      	b.n	800353e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d113      	bne.n	8003510 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	b292      	uxth	r2, r2
 80034f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	1c9a      	adds	r2, r3, #2
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800350e:	e011      	b.n	8003534 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003510:	f7fd fed6 	bl	80012c0 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d803      	bhi.n	8003528 <HAL_SPI_Receive+0x1bc>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <HAL_SPI_Receive+0x1c2>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003532:	e017      	b.n	8003564 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cd      	bne.n	80034da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fc18 	bl	8003d78 <SPI_EndRxTransaction>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	75fb      	strb	r3, [r7, #23]
 8003560:	e000      	b.n	8003564 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b08c      	sub	sp, #48	; 0x30
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800358c:	2301      	movs	r3, #1
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x26>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e18a      	b.n	80038ba <HAL_SPI_TransmitReceive+0x33c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ac:	f7fd fe88 	bl	80012c0 <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d00f      	beq.n	80035ee <HAL_SPI_TransmitReceive+0x70>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d4:	d107      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x68>
 80035de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d003      	beq.n	80035ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035ec:	e15b      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x82>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x82>
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003606:	e14e      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b04      	cmp	r3, #4
 8003612:	d003      	beq.n	800361c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2205      	movs	r2, #5
 8003618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003678:	d178      	bne.n	800376c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x10a>
 8003682:	8b7b      	ldrh	r3, [r7, #26]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d166      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ac:	e053      	b.n	8003756 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11b      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x176>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x176>
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d113      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d119      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x1b8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d014      	beq.n	8003736 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	b292      	uxth	r2, r2
 8003718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003732:	2301      	movs	r3, #1
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003736:	f7fd fdc3 	bl	80012c0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003742:	429a      	cmp	r2, r3
 8003744:	d807      	bhi.n	8003756 <HAL_SPI_TransmitReceive+0x1d8>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d003      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003754:	e0a7      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1a6      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x130>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1a1      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x130>
 800376a:	e07c      	b.n	8003866 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_TransmitReceive+0x1fc>
 8003774:	8b7b      	ldrh	r3, [r7, #26]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d16b      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a0:	e057      	b.n	8003852 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11c      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x26c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x26c>
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d114      	bne.n	80037ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	7812      	ldrb	r2, [r2, #0]
 80037cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d119      	bne.n	800382c <HAL_SPI_TransmitReceive+0x2ae>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800382c:	f7fd fd48 	bl	80012c0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003838:	429a      	cmp	r2, r3
 800383a:	d803      	bhi.n	8003844 <HAL_SPI_TransmitReceive+0x2c6>
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d102      	bne.n	800384a <HAL_SPI_TransmitReceive+0x2cc>
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003850:	e029      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1a2      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x224>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d19d      	bne.n	80037a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 faea 	bl	8003e44 <SPI_EndRxTxTransaction>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003882:	e010      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	e000      	b.n	80038a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3730      	adds	r7, #48	; 0x30
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0e3      	b.n	8003aac <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80038fa:	7dbb      	ldrb	r3, [r7, #22]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d00d      	beq.n	800391c <HAL_SPI_TransmitReceive_DMA+0x58>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	d106      	bne.n	8003916 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003910:	7dbb      	ldrb	r3, [r7, #22]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d002      	beq.n	800391c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003916:	2302      	movs	r3, #2
 8003918:	75fb      	strb	r3, [r7, #23]
    goto error;
 800391a:	e0c2      	b.n	8003aa2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003932:	e0b6      	b.n	8003aa2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b04      	cmp	r3, #4
 800393e:	d003      	beq.n	8003948 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2205      	movs	r2, #5
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d108      	bne.n	800399c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	4a49      	ldr	r2, [pc, #292]	; (8003ab4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	4a48      	ldr	r2, [pc, #288]	; (8003ab8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003998:	63da      	str	r2, [r3, #60]	; 0x3c
 800399a:	e007      	b.n	80039ac <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	4a46      	ldr	r2, [pc, #280]	; (8003abc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	4a45      	ldr	r2, [pc, #276]	; (8003ac0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	4a44      	ldr	r2, [pc, #272]	; (8003ac4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	2200      	movs	r2, #0
 80039ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	4619      	mov	r1, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	461a      	mov	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f7fe fa3e 	bl	8001e54 <HAL_DMA_Start_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80039f6:	e054      	b.n	8003aa2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	2200      	movs	r2, #0
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	2200      	movs	r2, #0
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4619      	mov	r1, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	330c      	adds	r3, #12
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f7fe fa08 	bl	8001e54 <HAL_DMA_Start_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003a62:	e01e      	b.n	8003aa2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d007      	beq.n	8003a82 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0220 	orr.w	r2, r2, #32
 8003a90:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0202 	orr.w	r2, r2, #2
 8003aa0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003c2d 	.word	0x08003c2d
 8003ab8:	08003b19 	.word	0x08003b19
 8003abc:	08003c49 	.word	0x08003c49
 8003ac0:	08003b9d 	.word	0x08003b9d
 8003ac4:	08003c65 	.word	0x08003c65

08003ac8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b26:	f7fd fbcb 	bl	80012c0 <HAL_GetTick>
 8003b2a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3a:	d029      	beq.n	8003b90 <SPI_DMAReceiveCplt+0x78>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0220 	bic.w	r2, r2, #32
 8003b4a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0203 	bic.w	r2, r2, #3
 8003b5a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	2164      	movs	r1, #100	; 0x64
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f909 	bl	8003d78 <SPI_EndRxTransaction>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <SPI_DMAReceiveCplt+0x78>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff ffbb 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b8e:	e002      	b.n	8003b96 <SPI_DMAReceiveCplt+0x7e>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff99 	bl	8003ac8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003baa:	f7fd fb89 	bl	80012c0 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d02f      	beq.n	8003c20 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0220 	bic.w	r2, r2, #32
 8003bce:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	2164      	movs	r1, #100	; 0x64
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f935 	bl	8003e44 <SPI_EndRxTxTransaction>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0203 	bic.w	r2, r2, #3
 8003bfa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff73 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c1e:	e002      	b.n	8003c26 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f002 fcd7 	bl	80065d4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff4e 	bl	8003adc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff ff4a 	bl	8003af0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0203 	bic.w	r2, r2, #3
 8003c80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff34 	bl	8003b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cb4:	e04c      	b.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d048      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cbe:	f7fd faff 	bl	80012c0 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d902      	bls.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d13d      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cec:	d111      	bne.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf6:	d004      	beq.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d107      	bne.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d10f      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e00f      	b.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d1a3      	bne.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8c:	d111      	bne.n	8003db2 <SPI_EndRxTransaction+0x3a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d96:	d004      	beq.n	8003da2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d107      	bne.n	8003db2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dba:	d12a      	bne.n	8003e12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d012      	beq.n	8003dec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff ff67 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02d      	beq.n	8003e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e026      	b.n	8003e3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2101      	movs	r1, #1
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff ff54 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01a      	beq.n	8003e38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e013      	b.n	8003e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff41 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e000      	b.n	8003e3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <SPI_EndRxTxTransaction+0x7c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <SPI_EndRxTxTransaction+0x80>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	0d5b      	lsrs	r3, r3, #21
 8003e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d112      	bne.n	8003e96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff ff12 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d0f2      	beq.n	8003e96 <SPI_EndRxTxTransaction+0x52>
 8003eb0:	e000      	b.n	8003eb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eb2:	bf00      	nop
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000024 	.word	0x20000024
 8003ec4:	165e9f81 	.word	0x165e9f81

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e01d      	b.n	8003f16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f00a f906 	bl	800e100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fd4e 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01d      	b.n	8003fb4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f815 	bl	8003fbc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 fcff 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 ffca 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <HAL_TIM_OC_Start+0x74>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_OC_Start+0x2c>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	; (8004048 <HAL_TIM_OC_Start+0x78>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_OC_Start+0x30>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_TIM_OC_Start+0x32>
 8004000:	2300      	movs	r3, #0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d007      	beq.n	8004038 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01d      	b.n	800409a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f815 	bl	80040a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 fc8c 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff56 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_TIM_PWM_Start+0x74>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIM_PWM_Start+0x2c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <HAL_TIM_PWM_Start+0x78>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x30>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <HAL_TIM_PWM_Start+0x32>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d007      	beq.n	8004120 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400

08004134 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	6839      	ldr	r1, [r7, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ff18 	bl	8004f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a22      	ldr	r2, [pc, #136]	; (80041dc <HAL_TIM_PWM_Stop+0xa8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_PWM_Stop+0x2c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <HAL_TIM_PWM_Stop+0xac>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_TIM_PWM_Stop+0x30>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_TIM_PWM_Stop+0x32>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	f241 1311 	movw	r3, #4369	; 0x1111
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_TIM_PWM_Stop+0x66>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	f240 4344 	movw	r3, #1092	; 0x444
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_TIM_PWM_Stop+0x66>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_TIM_PWM_Stop+0x96>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	f240 4344 	movw	r3, #1092	; 0x444
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_TIM_PWM_Stop+0x96>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40010400 	.word	0x40010400

080041e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e083      	b.n	8004300 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f00a f837 	bl	800e280 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f000 fbb5 	bl	80049a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	4313      	orrs	r3, r2
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004284:	f023 030c 	bic.w	r3, r3, #12
 8004288:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	031b      	lsls	r3, r3, #12
 80042b4:	4313      	orrs	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4313      	orrs	r3, r2
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_TIM_Encoder_Start+0x16>
 8004318:	2b04      	cmp	r3, #4
 800431a:	d008      	beq.n	800432e <HAL_TIM_Encoder_Start+0x26>
 800431c:	e00f      	b.n	800433e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fe28 	bl	8004f7c <TIM_CCxChannelCmd>
      break;
 800432c:	e016      	b.n	800435c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fe20 	bl	8004f7c <TIM_CCxChannelCmd>
      break;
 800433c:	e00e      	b.n	800435c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2201      	movs	r2, #1
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fe18 	bl	8004f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	2104      	movs	r1, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fe11 	bl	8004f7c <TIM_CCxChannelCmd>
      break;
 800435a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d122      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d11b      	bne.n	80043d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0202 	mvn.w	r2, #2
 80043a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fad6 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 80043be:	e005      	b.n	80043cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fac8 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fad9 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d122      	bne.n	8004426 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d11b      	bne.n	8004426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0204 	mvn.w	r2, #4
 80043f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 faac 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004412:	e005      	b.n	8004420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa9e 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 faaf 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d122      	bne.n	800447a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11b      	bne.n	800447a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f06f 0208 	mvn.w	r2, #8
 800444a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fa82 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004466:	e005      	b.n	8004474 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa74 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa85 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d122      	bne.n	80044ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b10      	cmp	r3, #16
 8004494:	d11b      	bne.n	80044ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0210 	mvn.w	r2, #16
 800449e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2208      	movs	r2, #8
 80044a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fa58 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 80044ba:	e005      	b.n	80044c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fa4a 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa5b 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10e      	bne.n	80044fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0201 	mvn.w	r2, #1
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa24 	bl	8004942 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d10e      	bne.n	8004526 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d107      	bne.n	8004526 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fdf1 	bl	8005108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d10e      	bne.n	8004552 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d107      	bne.n	8004552 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fa20 	bl	8004992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b20      	cmp	r3, #32
 800455e:	d10e      	bne.n	800457e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d107      	bne.n	800457e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f06f 0220 	mvn.w	r2, #32
 8004576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fdbb 	bl	80050f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e04e      	b.n	8004640 <HAL_TIM_OC_ConfigChannel+0xb8>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	d839      	bhi.n	800462c <HAL_TIM_OC_ConfigChannel+0xa4>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	0800462d 	.word	0x0800462d
 80045d0:	08004603 	.word	0x08004603
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	08004611 	.word	0x08004611
 80045e4:	0800462d 	.word	0x0800462d
 80045e8:	0800462d 	.word	0x0800462d
 80045ec:	0800462d 	.word	0x0800462d
 80045f0:	0800461f 	.word	0x0800461f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fa74 	bl	8004ae8 <TIM_OC1_SetConfig>
      break;
 8004600:	e015      	b.n	800462e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fadd 	bl	8004bc8 <TIM_OC2_SetConfig>
      break;
 800460e:	e00e      	b.n	800462e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb4c 	bl	8004cb4 <TIM_OC3_SetConfig>
      break;
 800461c:	e007      	b.n	800462e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fbb9 	bl	8004d9c <TIM_OC4_SetConfig>
      break;
 800462a:	e000      	b.n	800462e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800462c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800465e:	2302      	movs	r3, #2
 8004660:	e0b4      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	f200 809f 	bhi.w	80047b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046b5 	.word	0x080046b5
 8004684:	080047b9 	.word	0x080047b9
 8004688:	080047b9 	.word	0x080047b9
 800468c:	080047b9 	.word	0x080047b9
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080047b9 	.word	0x080047b9
 8004698:	080047b9 	.word	0x080047b9
 800469c:	080047b9 	.word	0x080047b9
 80046a0:	08004737 	.word	0x08004737
 80046a4:	080047b9 	.word	0x080047b9
 80046a8:	080047b9 	.word	0x080047b9
 80046ac:	080047b9 	.word	0x080047b9
 80046b0:	08004777 	.word	0x08004777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fa14 	bl	8004ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	619a      	str	r2, [r3, #24]
      break;
 80046f2:	e062      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fa64 	bl	8004bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	619a      	str	r2, [r3, #24]
      break;
 8004734:	e041      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fab9 	bl	8004cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0208 	orr.w	r2, r2, #8
 8004750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0204 	bic.w	r2, r2, #4
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69d9      	ldr	r1, [r3, #28]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
      break;
 8004774:	e021      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fb0d 	bl	8004d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69d9      	ldr	r1, [r3, #28]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	021a      	lsls	r2, r3, #8
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	61da      	str	r2, [r3, #28]
      break;
 80047b6:	e000      	b.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80047b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_ConfigClockSource+0x18>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e0a6      	b.n	800493a <HAL_TIM_ConfigClockSource+0x166>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004812:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d067      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0x120>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d80b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x6c>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d073      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x140>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d802      	bhi.n	8004836 <HAL_TIM_ConfigClockSource+0x62>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d06f      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004834:	e078      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004836:	2b20      	cmp	r3, #32
 8004838:	d06c      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x140>
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d06a      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800483e:	e073      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d00d      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0x8c>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d804      	bhi.n	8004852 <HAL_TIM_ConfigClockSource+0x7e>
 8004848:	2b50      	cmp	r3, #80	; 0x50
 800484a:	d033      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0xe0>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d041      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004850:	e06a      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d066      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x152>
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d017      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800485e:	e063      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f000 fb64 	bl	8004f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004882:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]
      break;
 800488c:	e04c      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f000 fb4d 	bl	8004f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b0:	609a      	str	r2, [r3, #8]
      break;
 80048b2:	e039      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f000 fac1 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2150      	movs	r1, #80	; 0x50
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb1a 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80048d2:	e029      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f000 fae0 	bl	8004ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2160      	movs	r1, #96	; 0x60
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fb0a 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 80048f2:	e019      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	461a      	mov	r2, r3
 8004902:	f000 faa1 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2140      	movs	r1, #64	; 0x40
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fafa 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004912:	e009      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 faf1 	bl	8004f06 <TIM_ITRx_SetConfig>
      break;
 8004924:	e000      	b.n	8004928 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a40      	ldr	r2, [pc, #256]	; (8004abc <TIM_Base_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d00f      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <TIM_Base_SetConfig+0x118>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <TIM_Base_SetConfig+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3b      	ldr	r2, [pc, #236]	; (8004ac8 <TIM_Base_SetConfig+0x120>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <TIM_Base_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <TIM_Base_SetConfig+0x114>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d027      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ac0 <TIM_Base_SetConfig+0x118>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d023      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <TIM_Base_SetConfig+0x11c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <TIM_Base_SetConfig+0x120>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <TIM_Base_SetConfig+0x124>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <TIM_Base_SetConfig+0x128>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <TIM_Base_SetConfig+0x12c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <TIM_Base_SetConfig+0x130>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a25      	ldr	r2, [pc, #148]	; (8004adc <TIM_Base_SetConfig+0x134>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <TIM_Base_SetConfig+0x138>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <TIM_Base_SetConfig+0x13c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <TIM_Base_SetConfig+0x114>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0xf8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <TIM_Base_SetConfig+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d103      	bne.n	8004aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	615a      	str	r2, [r3, #20]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800
 8004ac8:	40000c00 	.word	0x40000c00
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800
 8004adc:	40001800 	.word	0x40001800
 8004ae0:	40001c00 	.word	0x40001c00
 8004ae4:	40002000 	.word	0x40002000

08004ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0302 	bic.w	r3, r3, #2
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <TIM_OC1_SetConfig+0xd8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_OC1_SetConfig+0x64>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <TIM_OC1_SetConfig+0xdc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d10c      	bne.n	8004b66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0308 	bic.w	r3, r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <TIM_OC1_SetConfig+0xd8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC1_SetConfig+0x8e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <TIM_OC1_SetConfig+0xdc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d111      	bne.n	8004b9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40010400 	.word	0x40010400

08004bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0210 	bic.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a22      	ldr	r2, [pc, #136]	; (8004cac <TIM_OC2_SetConfig+0xe4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <TIM_OC2_SetConfig+0x68>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <TIM_OC2_SetConfig+0xe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <TIM_OC2_SetConfig+0xe4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC2_SetConfig+0x94>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <TIM_OC2_SetConfig+0xe8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d113      	bne.n	8004c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <TIM_OC3_SetConfig+0xe0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_OC3_SetConfig+0x66>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_OC3_SetConfig+0xe4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10d      	bne.n	8004d36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <TIM_OC3_SetConfig+0xe0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC3_SetConfig+0x92>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_OC3_SetConfig+0xe4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d113      	bne.n	8004d6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	621a      	str	r2, [r3, #32]
}
 8004d88:	bf00      	nop
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <TIM_OC4_SetConfig+0xa4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC4_SetConfig+0x68>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <TIM_OC4_SetConfig+0xa8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d109      	bne.n	8004e18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40010400 	.word	0x40010400

08004e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 030a 	bic.w	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0210 	bic.w	r2, r3, #16
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f043 0307 	orr.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	2201      	movs	r2, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e032      	b.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e03d      	b.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e03f      	b.n	80051ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f009 f99a 	bl	800e47c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9b1 	bl	80054c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b088      	sub	sp, #32
 80051ba:	af02      	add	r7, sp, #8
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	f040 8083 	bne.w	80052de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_UART_Transmit+0x2e>
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e07b      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Transmit+0x40>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e074      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2221      	movs	r2, #33	; 0x21
 8005208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800520c:	f7fc f858 	bl	80012c0 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	88fa      	ldrh	r2, [r7, #6]
 8005216:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800521e:	e042      	b.n	80052a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d122      	bne.n	800527e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f8f6 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e046      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	3302      	adds	r3, #2
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	e017      	b.n	80052a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3301      	adds	r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	e013      	b.n	80052a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f8d3 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e023      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	60ba      	str	r2, [r7, #8]
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1b7      	bne.n	8005220 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2200      	movs	r2, #0
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8ba 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e00a      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b20      	cmp	r3, #32
 8005306:	f040 8090 	bne.w	800542a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_UART_Receive+0x2e>
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e088      	b.n	800542c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_UART_Receive+0x40>
 8005324:	2302      	movs	r3, #2
 8005326:	e081      	b.n	800542c <HAL_UART_Receive+0x144>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2222      	movs	r2, #34	; 0x22
 800533a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800533e:	f7fb ffbf 	bl	80012c0 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005350:	e05c      	b.n	800540c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d12b      	bne.n	80053c2 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2200      	movs	r2, #0
 8005372:	2120      	movs	r1, #32
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f85d 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e053      	b.n	800542c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539c:	b29a      	uxth	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3302      	adds	r3, #2
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	e030      	b.n	800540c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3301      	adds	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
 80053c0:	e024      	b.n	800540c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2120      	movs	r1, #32
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f831 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e027      	b.n	800542c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	60ba      	str	r2, [r7, #8]
 80053f0:	b2ca      	uxtb	r2, r1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e00a      	b.n	800540c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1c59      	adds	r1, r3, #1
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d19d      	bne.n	8005352 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005444:	e02c      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d028      	beq.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x30>
 8005454:	f7fb ff34 	bl	80012c0 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	d21d      	bcs.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005472:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e00f      	b.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d0c3      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005508:	f023 030c 	bic.w	r3, r3, #12
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005534:	f040 80e4 	bne.w	8005700 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4aab      	ldr	r2, [pc, #684]	; (80057ec <UART_SetConfig+0x324>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <UART_SetConfig+0x84>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4aaa      	ldr	r2, [pc, #680]	; (80057f0 <UART_SetConfig+0x328>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d16c      	bne.n	8005626 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800554c:	f7fd fb20 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8005550:	4602      	mov	r2, r0
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009a      	lsls	r2, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4aa3      	ldr	r2, [pc, #652]	; (80057f4 <UART_SetConfig+0x32c>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	011c      	lsls	r4, r3, #4
 8005570:	f7fd fb0e 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8005574:	4602      	mov	r2, r0
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009a      	lsls	r2, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	fbb2 f5f3 	udiv	r5, r2, r3
 800558a:	f7fd fb01 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800558e:	4602      	mov	r2, r0
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a93      	ldr	r2, [pc, #588]	; (80057f4 <UART_SetConfig+0x32c>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2264      	movs	r2, #100	; 0x64
 80055ae:	fb02 f303 	mul.w	r3, r2, r3
 80055b2:	1aeb      	subs	r3, r5, r3
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	3332      	adds	r3, #50	; 0x32
 80055b8:	4a8e      	ldr	r2, [pc, #568]	; (80057f4 <UART_SetConfig+0x32c>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055c6:	441c      	add	r4, r3
 80055c8:	f7fd fae2 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009a      	lsls	r2, r3, #2
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fbb2 f5f3 	udiv	r5, r2, r3
 80055e2:	f7fd fad5 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <UART_SetConfig+0x32c>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2264      	movs	r2, #100	; 0x64
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	1aeb      	subs	r3, r5, r3
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a78      	ldr	r2, [pc, #480]	; (80057f4 <UART_SetConfig+0x32c>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 0207 	and.w	r2, r3, #7
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4422      	add	r2, r4
 8005622:	609a      	str	r2, [r3, #8]
 8005624:	e154      	b.n	80058d0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005626:	f7fd fa9f 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 800562a:	4602      	mov	r2, r0
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009a      	lsls	r2, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	4a6c      	ldr	r2, [pc, #432]	; (80057f4 <UART_SetConfig+0x32c>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	011c      	lsls	r4, r3, #4
 800564a:	f7fd fa8d 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 800564e:	4602      	mov	r2, r0
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009a      	lsls	r2, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	fbb2 f5f3 	udiv	r5, r2, r3
 8005664:	f7fd fa80 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005668:	4602      	mov	r2, r0
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009a      	lsls	r2, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <UART_SetConfig+0x32c>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	2264      	movs	r2, #100	; 0x64
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	1aeb      	subs	r3, r5, r3
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	3332      	adds	r3, #50	; 0x32
 8005692:	4a58      	ldr	r2, [pc, #352]	; (80057f4 <UART_SetConfig+0x32c>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056a0:	441c      	add	r4, r3
 80056a2:	f7fd fa61 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009a      	lsls	r2, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80056bc:	f7fd fa54 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009a      	lsls	r2, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	4a47      	ldr	r2, [pc, #284]	; (80057f4 <UART_SetConfig+0x32c>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2264      	movs	r2, #100	; 0x64
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	1aeb      	subs	r3, r5, r3
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a42      	ldr	r2, [pc, #264]	; (80057f4 <UART_SetConfig+0x32c>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 0207 	and.w	r2, r3, #7
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4422      	add	r2, r4
 80056fc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80056fe:	e0e7      	b.n	80058d0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a39      	ldr	r2, [pc, #228]	; (80057ec <UART_SetConfig+0x324>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <UART_SetConfig+0x24c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a38      	ldr	r2, [pc, #224]	; (80057f0 <UART_SetConfig+0x328>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d171      	bne.n	80057f8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005714:	f7fd fa3c 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8005718:	4602      	mov	r2, r0
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009a      	lsls	r2, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	fbb2 f3f3 	udiv	r3, r2, r3
 800572e:	4a31      	ldr	r2, [pc, #196]	; (80057f4 <UART_SetConfig+0x32c>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	011c      	lsls	r4, r3, #4
 8005738:	f7fd fa2a 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800573c:	4602      	mov	r2, r0
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009a      	lsls	r2, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005752:	f7fd fa1d 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8005756:	4602      	mov	r2, r0
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <UART_SetConfig+0x32c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2264      	movs	r2, #100	; 0x64
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	1aeb      	subs	r3, r5, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	; 0x32
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <UART_SetConfig+0x32c>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578c:	441c      	add	r4, r3
 800578e:	f7fd f9ff 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8005792:	4602      	mov	r2, r0
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80057a8:	f7fd f9f2 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009a      	lsls	r2, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <UART_SetConfig+0x32c>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	2264      	movs	r2, #100	; 0x64
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	1aeb      	subs	r3, r5, r3
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	3332      	adds	r3, #50	; 0x32
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <UART_SetConfig+0x32c>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	f003 020f 	and.w	r2, r3, #15
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4422      	add	r2, r4
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	e071      	b.n	80058d0 <UART_SetConfig+0x408>
 80057ec:	40011000 	.word	0x40011000
 80057f0:	40011400 	.word	0x40011400
 80057f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80057f8:	f7fd f9b6 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009a      	lsls	r2, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	4a31      	ldr	r2, [pc, #196]	; (80058d8 <UART_SetConfig+0x410>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	011c      	lsls	r4, r3, #4
 800581c:	f7fd f9a4 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005820:	4602      	mov	r2, r0
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009a      	lsls	r2, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	fbb2 f5f3 	udiv	r5, r2, r3
 8005836:	f7fd f997 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 800583a:	4602      	mov	r2, r0
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	009a      	lsls	r2, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <UART_SetConfig+0x410>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	2264      	movs	r2, #100	; 0x64
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	1aeb      	subs	r3, r5, r3
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	3332      	adds	r3, #50	; 0x32
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <UART_SetConfig+0x410>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005870:	441c      	add	r4, r3
 8005872:	f7fd f979 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005876:	4602      	mov	r2, r0
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009a      	lsls	r2, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	fbb2 f5f3 	udiv	r5, r2, r3
 800588c:	f7fd f96c 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8005890:	4602      	mov	r2, r0
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <UART_SetConfig+0x410>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	2264      	movs	r2, #100	; 0x64
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	1aeb      	subs	r3, r5, r3
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	3332      	adds	r3, #50	; 0x32
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <UART_SetConfig+0x410>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4422      	add	r2, r4
 80058cc:	609a      	str	r2, [r3, #8]
}
 80058ce:	e7ff      	b.n	80058d0 <UART_SetConfig+0x408>
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdb0      	pop	{r4, r5, r7, pc}
 80058d8:	51eb851f 	.word	0x51eb851f

080058dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80058e2:	463b      	mov	r3, r7
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80058ee:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <MX_ADC1_Init+0x10c>)
 80058f0:	4a3e      	ldr	r2, [pc, #248]	; (80059ec <MX_ADC1_Init+0x110>)
 80058f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80058f4:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <MX_ADC1_Init+0x10c>)
 80058f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80058fc:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <MX_ADC1_Init+0x10c>)
 80058fe:	2200      	movs	r2, #0
 8005900:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005902:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005904:	2201      	movs	r2, #1
 8005906:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005908:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <MX_ADC1_Init+0x10c>)
 800590a:	2200      	movs	r2, #0
 800590c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8005916:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005918:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800591c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800591e:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005928:	2200      	movs	r2, #0
 800592a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800592c:	4b2e      	ldr	r3, [pc, #184]	; (80059e8 <MX_ADC1_Init+0x10c>)
 800592e:	2205      	movs	r2, #5
 8005930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005932:	4b2d      	ldr	r3, [pc, #180]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800593a:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <MX_ADC1_Init+0x10c>)
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005940:	4829      	ldr	r0, [pc, #164]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005942:	f7fb fceb 	bl	800131c <HAL_ADC_Init>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800594c:	f001 fc0a 	bl	8007164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005950:	2308      	movs	r3, #8
 8005952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005954:	2301      	movs	r3, #1
 8005956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005958:	2303      	movs	r3, #3
 800595a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800595c:	463b      	mov	r3, r7
 800595e:	4619      	mov	r1, r3
 8005960:	4821      	ldr	r0, [pc, #132]	; (80059e8 <MX_ADC1_Init+0x10c>)
 8005962:	f7fb fe07 	bl	8001574 <HAL_ADC_ConfigChannel>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800596c:	f001 fbfa 	bl	8007164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005970:	2300      	movs	r3, #0
 8005972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005974:	2302      	movs	r3, #2
 8005976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005978:	463b      	mov	r3, r7
 800597a:	4619      	mov	r1, r3
 800597c:	481a      	ldr	r0, [pc, #104]	; (80059e8 <MX_ADC1_Init+0x10c>)
 800597e:	f7fb fdf9 	bl	8001574 <HAL_ADC_ConfigChannel>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8005988:	f001 fbec 	bl	8007164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800598c:	2301      	movs	r3, #1
 800598e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005990:	2303      	movs	r3, #3
 8005992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005994:	463b      	mov	r3, r7
 8005996:	4619      	mov	r1, r3
 8005998:	4813      	ldr	r0, [pc, #76]	; (80059e8 <MX_ADC1_Init+0x10c>)
 800599a:	f7fb fdeb 	bl	8001574 <HAL_ADC_ConfigChannel>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80059a4:	f001 fbde 	bl	8007164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80059a8:	2302      	movs	r3, #2
 80059aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80059ac:	2304      	movs	r3, #4
 80059ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059b0:	463b      	mov	r3, r7
 80059b2:	4619      	mov	r1, r3
 80059b4:	480c      	ldr	r0, [pc, #48]	; (80059e8 <MX_ADC1_Init+0x10c>)
 80059b6:	f7fb fddd 	bl	8001574 <HAL_ADC_ConfigChannel>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80059c0:	f001 fbd0 	bl	8007164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80059c4:	2303      	movs	r3, #3
 80059c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80059c8:	2305      	movs	r3, #5
 80059ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059cc:	463b      	mov	r3, r7
 80059ce:	4619      	mov	r1, r3
 80059d0:	4805      	ldr	r0, [pc, #20]	; (80059e8 <MX_ADC1_Init+0x10c>)
 80059d2:	f7fb fdcf 	bl	8001574 <HAL_ADC_ConfigChannel>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80059dc:	f001 fbc2 	bl	8007164 <Error_Handler>
  }

}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2001b31c 	.word	0x2001b31c
 80059ec:	40012000 	.word	0x40012000

080059f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <HAL_ADC_MspInit+0x110>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d172      	bne.n	8005af8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	4a3a      	ldr	r2, [pc, #232]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a20:	6453      	str	r3, [r2, #68]	; 0x44
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	4a33      	ldr	r2, [pc, #204]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	4b2d      	ldr	r3, [pc, #180]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_ADC_MspInit+0x114>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = Sensor_FL_Pin|Sensor_SL_Pin|Sensor_SR_Pin|Sensor_FR_Pin;
 8005a66:	230f      	movs	r3, #15
 8005a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	4619      	mov	r1, r3
 8005a78:	4823      	ldr	r0, [pc, #140]	; (8005b08 <HAL_ADC_MspInit+0x118>)
 8005a7a:	f7fc fd29 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_Battery_Pin;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a82:	2303      	movs	r3, #3
 8005a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_Battery_GPIO_Port, &GPIO_InitStruct);
 8005a8a:	f107 0314 	add.w	r3, r7, #20
 8005a8e:	4619      	mov	r1, r3
 8005a90:	481e      	ldr	r0, [pc, #120]	; (8005b0c <HAL_ADC_MspInit+0x11c>)
 8005a92:	f7fc fd1d 	bl	80024d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <HAL_ADC_MspInit+0x124>)
 8005a9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005a9c:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005aae:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ab4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005abc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ac4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005acc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ad0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005ad4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005adc:	480c      	ldr	r0, [pc, #48]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005ade:	f7fc f90b 	bl	8001cf8 <HAL_DMA_Init>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005ae8:	f001 fb3c 	bl	8007164 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <HAL_ADC_MspInit+0x120>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005af8:	bf00      	nop
 8005afa:	3728      	adds	r7, #40	; 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40012000 	.word	0x40012000
 8005b04:	40023800 	.word	0x40023800
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	2001b364 	.word	0x2001b364
 8005b14:	40026410 	.word	0x40026410

08005b18 <Battery_GetVoltage>:

/* ---------------------------------------------------------------
	バッテリの電圧を取得する関数
--------------------------------------------------------------- */
float Battery_GetVoltage( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	return (BATTERY_REFERENCE * (20.f / 10.f) * (float)Sensor_GetBatteryValue()) / 4096.f;
 8005b1c:	f001 f812 	bl	8006b44 <Sensor_GetBatteryValue>
 8005b20:	4603      	mov	r3, r0
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8005b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b32:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005b44 <Battery_GetVoltage+0x2c>
 8005b36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b3a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	45800000 	.word	0x45800000

08005b48 <Communication_Initialize>:

/* ---------------------------------------------------------------
	printfとscanfを使用するための設定
--------------------------------------------------------------- */
void Communication_Initialize( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	setbuf(stdout, NULL);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <Communication_Initialize+0x34>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f009 fe3f 	bl	800f7d8 <setbuf>
	setbuf(stdin, NULL);
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <Communication_Initialize+0x34>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f009 fe38 	bl	800f7d8 <setbuf>
	setbuf(stderr, NULL);
 8005b68:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <Communication_Initialize+0x34>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f009 fe31 	bl	800f7d8 <setbuf>
}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000028 	.word	0x20000028

08005b80 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart1/*使用しているusartに変更すること*/, &ch, 1, 1);
 8005b8a:	1df9      	adds	r1, r7, #7
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <__io_putchar+0x20>)
 8005b92:	f7ff fb10 	bl	80051b6 <HAL_UART_Transmit>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2001bf18 	.word	0x2001bf18

08005ba4 <__io_getchar>:
#ifdef __GNUC__
#define GETCHAR_PROTOTYPE int __io_getchar(void)
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */
int __io_getchar(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
HAL_StatusTypeDef Status = HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
 8005bac:	71fb      	strb	r3, [r7, #7]
uint8_t Data;

while(Status != HAL_OK)
 8005bae:	e007      	b.n	8005bc0 <__io_getchar+0x1c>
Status = HAL_UART_Receive(&huart1, &Data, 1, 10);
 8005bb0:	1db9      	adds	r1, r7, #6
 8005bb2:	230a      	movs	r3, #10
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4806      	ldr	r0, [pc, #24]	; (8005bd0 <__io_getchar+0x2c>)
 8005bb8:	f7ff fb96 	bl	80052e8 <HAL_UART_Receive>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	71fb      	strb	r3, [r7, #7]
while(Status != HAL_OK)
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f4      	bne.n	8005bb0 <__io_getchar+0xc>

return(Data);
 8005bc6:	79bb      	ldrb	r3, [r7, #6]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	2001bf18 	.word	0x2001bf18

08005bd4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <MX_DMA_Init+0x98>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <MX_DMA_Init+0x98>)
 8005be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005be8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bea:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <MX_DMA_Init+0x98>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <MX_DMA_Init+0x98>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <MX_DMA_Init+0x98>)
 8005c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c04:	6313      	str	r3, [r2, #48]	; 0x30
 8005c06:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <MX_DMA_Init+0x98>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2100      	movs	r1, #0
 8005c16:	200e      	movs	r0, #14
 8005c18:	f7fc f837 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005c1c:	200e      	movs	r0, #14
 8005c1e:	f7fc f850 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	2100      	movs	r1, #0
 8005c26:	200f      	movs	r0, #15
 8005c28:	f7fc f82f 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005c2c:	200f      	movs	r0, #15
 8005c2e:	f7fc f848 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005c32:	2200      	movs	r2, #0
 8005c34:	2100      	movs	r1, #0
 8005c36:	2038      	movs	r0, #56	; 0x38
 8005c38:	f7fc f827 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005c3c:	2038      	movs	r0, #56	; 0x38
 8005c3e:	f7fc f840 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 8005c42:	2200      	movs	r2, #0
 8005c44:	2101      	movs	r1, #1
 8005c46:	2039      	movs	r0, #57	; 0x39
 8005c48:	f7fc f81f 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005c4c:	2039      	movs	r0, #57	; 0x39
 8005c4e:	f7fc f838 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	2101      	movs	r1, #1
 8005c56:	203a      	movs	r0, #58	; 0x3a
 8005c58:	f7fc f817 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005c5c:	203a      	movs	r0, #58	; 0x3a
 8005c5e:	f7fc f830 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800

08005c70 <Encoder_Initialize>:

/* ---------------------------------------------------------------
	位相係数モードのタイマーを開始し、位相カウントを初期化する関数
--------------------------------------------------------------- */
void Encoder_Initialize( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8005c74:	213c      	movs	r1, #60	; 0x3c
 8005c76:	480c      	ldr	r0, [pc, #48]	; (8005ca8 <Encoder_Initialize+0x38>)
 8005c78:	f7fe fb46 	bl	8004308 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8005c7c:	213c      	movs	r1, #60	; 0x3c
 8005c7e:	480b      	ldr	r0, [pc, #44]	; (8005cac <Encoder_Initialize+0x3c>)
 8005c80:	f7fe fb42 	bl	8004308 <HAL_TIM_Encoder_Start>
	Encoder_ResetCount_Left();
 8005c84:	f000 f81a 	bl	8005cbc <Encoder_ResetCount_Left>
	Encoder_ResetCount_Right();
 8005c88:	f000 f826 	bl	8005cd8 <Encoder_ResetCount_Right>
	enc_cnt_r_old	=	ENC_CNT_R;
 8005c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <Encoder_Initialize+0x40>)
 8005c96:	801a      	strh	r2, [r3, #0]
	enc_cnt_l_old	=	ENC_CNT_L;
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <Encoder_Initialize+0x44>)
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <Encoder_Initialize+0x48>)
 8005ca0:	801a      	strh	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2001bed8 	.word	0x2001bed8
 8005cac:	2001bdec 	.word	0x2001bdec
 8005cb0:	20000220 	.word	0x20000220
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	20000222 	.word	0x20000222

08005cbc <Encoder_ResetCount_Left>:

/* ---------------------------------------------------------------
	左タイヤの位相係数カウントを初期化する関数
--------------------------------------------------------------- */
void Encoder_ResetCount_Left( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
	ENC_CNT_L = ENC_ZERO;
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <Encoder_ResetCount_Left+0x18>)
 8005cc2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40000400 	.word	0x40000400

08005cd8 <Encoder_ResetCount_Right>:

/* ---------------------------------------------------------------
	右タイヤの位相係数カウントを初期化する関数
--------------------------------------------------------------- */
void Encoder_ResetCount_Right( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
	ENC_CNT_R = ENC_ZERO;
 8005cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ce0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <Encoder_GetAngle_Left>:

/* ---------------------------------------------------------------
	左タイヤの角度を取得する関数[rad]
--------------------------------------------------------------- */
float Encoder_GetAngle_Left( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	return(2 * PI * (float)( (int32_t)ENC_CNT_L - (int32_t)ENC_ZERO ) / (float)ENC_RESOLUTION);
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <Encoder_GetAngle_Left+0x38>)
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8005cfc:	3b7e      	subs	r3, #126	; 0x7e
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d06:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005d2c <Encoder_GetAngle_Left+0x3c>
 8005d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d0e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005d30 <Encoder_GetAngle_Left+0x40>
 8005d12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d16:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40c90fda 	.word	0x40c90fda
 8005d30:	447fc000 	.word	0x447fc000

08005d34 <Encoder_GetAngle_Right>:

/* ---------------------------------------------------------------
	右タイヤの角度を取得する関数[rad]
--------------------------------------------------------------- */
float Encoder_GetAngle_Right( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	return(2 * PI * (float)( (int32_t)ENC_ZERO - (int32_t)ENC_CNT_R ) / (float)ENC_RESOLUTION);
 8005d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8005d42:	337e      	adds	r3, #126	; 0x7e
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005d6c <Encoder_GetAngle_Right+0x38>
 8005d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d54:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005d70 <Encoder_GetAngle_Right+0x3c>
 8005d58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d60:	eeb0 0a67 	vmov.f32	s0, s15
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40c90fda 	.word	0x40c90fda
 8005d70:	447fc000 	.word	0x447fc000

08005d74 <Get_speed>:

/* ---------------------------------------------------------------
 	 速度を算出する関数(1msタスク)[m/s]
 -------------------------------------------------------------- */
void Get_speed(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
	int32_t		sl_delta_cnt_r;	//m　右タイヤのカウント [/ms]
	int32_t		sl_delta_cnt_l;	//m　左タイヤのカウント [/ms]
	float 		delta_angle_tire_r;	//m　右タイヤの角速度	[rad/s]
	float		delta_angle_tire_l;	//m 左タイヤの角速度	[rad/s]

	enc_cnt_r_new = ENC_CNT_R;
 8005d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	4b87      	ldr	r3, [pc, #540]	; (8005fa0 <Get_speed+0x22c>)
 8005d84:	801a      	strh	r2, [r3, #0]
	enc_cnt_l_new = ENC_CNT_L;
 8005d86:	4b87      	ldr	r3, [pc, #540]	; (8005fa4 <Get_speed+0x230>)
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	4b86      	ldr	r3, [pc, #536]	; (8005fa8 <Get_speed+0x234>)
 8005d8e:	801a      	strh	r2, [r3, #0]

	if((ENC_CNT_SR_R & 0x0001) == 0x0000)//overflowがないとき(UIF=0)
 8005d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <Get_speed+0x3a>
	{
		sl_delta_cnt_r = (int32_t)enc_cnt_r_new - (int32_t)enc_cnt_r_old;	//m　右タイヤのカウント値を取得(/1ms)
 8005d9e:	4b80      	ldr	r3, [pc, #512]	; (8005fa0 <Get_speed+0x22c>)
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	4b81      	ldr	r3, [pc, #516]	; (8005fac <Get_speed+0x238>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	e01f      	b.n	8005dee <Get_speed+0x7a>
	}
	else//overflow　or underflowがあるとき(UIF=1)
	{
		if(enc_cnt_r_new >= enc_cnt_r_old)//m 逆回転時
 8005dae:	4b7c      	ldr	r3, [pc, #496]	; (8005fa0 <Get_speed+0x22c>)
 8005db0:	881a      	ldrh	r2, [r3, #0]
 8005db2:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <Get_speed+0x238>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d309      	bcc.n	8005dce <Get_speed+0x5a>
		{
			uss_delta_cnt_r = enc_cnt_r_old	- enc_cnt_r_new;
 8005dba:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <Get_speed+0x238>)
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <Get_speed+0x22c>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	81fb      	strh	r3, [r7, #14]
			sl_delta_cnt_r = -1 * (int32_t)uss_delta_cnt_r;
 8005dc6:	89fb      	ldrh	r3, [r7, #14]
 8005dc8:	425b      	negs	r3, r3
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e007      	b.n	8005dde <Get_speed+0x6a>
		}
		else	//m 正回転時
		{
			uss_delta_cnt_r = enc_cnt_r_new	- enc_cnt_r_old;
 8005dce:	4b74      	ldr	r3, [pc, #464]	; (8005fa0 <Get_speed+0x22c>)
 8005dd0:	881a      	ldrh	r2, [r3, #0]
 8005dd2:	4b76      	ldr	r3, [pc, #472]	; (8005fac <Get_speed+0x238>)
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	81fb      	strh	r3, [r7, #14]
			sl_delta_cnt_r = 1 * (int32_t)uss_delta_cnt_r;
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	617b      	str	r3, [r7, #20]
		}

		ENC_CNT_SR_R = ENC_CNT_SR_R & ~(0x0001); //UIFクリア
 8005dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	6113      	str	r3, [r2, #16]

	}


	if((ENC_CNT_SR_L & 0x0001) == 0x0000)//overflowがないとき(UIF=0)
 8005dee:	4b6d      	ldr	r3, [pc, #436]	; (8005fa4 <Get_speed+0x230>)
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <Get_speed+0x96>
	{
		sl_delta_cnt_l = (int32_t)enc_cnt_l_new - (int32_t)enc_cnt_l_old;	//m　右タイヤのカウント値を取得(/1ms)
 8005dfa:	4b6b      	ldr	r3, [pc, #428]	; (8005fa8 <Get_speed+0x234>)
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4b6b      	ldr	r3, [pc, #428]	; (8005fb0 <Get_speed+0x23c>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	e01d      	b.n	8005e46 <Get_speed+0xd2>
	}
	else//overflow　or underflowがあるとき(UIF=1)
	{
		if(enc_cnt_l_new >= enc_cnt_l_old)//m 逆回転時
 8005e0a:	4b67      	ldr	r3, [pc, #412]	; (8005fa8 <Get_speed+0x234>)
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	4b68      	ldr	r3, [pc, #416]	; (8005fb0 <Get_speed+0x23c>)
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d309      	bcc.n	8005e2a <Get_speed+0xb6>
		{
			uss_delta_cnt_l = enc_cnt_l_old	- enc_cnt_l_new;
 8005e16:	4b66      	ldr	r3, [pc, #408]	; (8005fb0 <Get_speed+0x23c>)
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	4b63      	ldr	r3, [pc, #396]	; (8005fa8 <Get_speed+0x234>)
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	81bb      	strh	r3, [r7, #12]
			sl_delta_cnt_l = -1 * (int32_t)uss_delta_cnt_l;
 8005e22:	89bb      	ldrh	r3, [r7, #12]
 8005e24:	425b      	negs	r3, r3
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	e007      	b.n	8005e3a <Get_speed+0xc6>
		}
		else	//m 正回転時
		{
			uss_delta_cnt_l = enc_cnt_l_new	- enc_cnt_l_old;
 8005e2a:	4b5f      	ldr	r3, [pc, #380]	; (8005fa8 <Get_speed+0x234>)
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	4b60      	ldr	r3, [pc, #384]	; (8005fb0 <Get_speed+0x23c>)
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	81bb      	strh	r3, [r7, #12]
			sl_delta_cnt_l = 1 * (int32_t)uss_delta_cnt_l;
 8005e36:	89bb      	ldrh	r3, [r7, #12]
 8005e38:	613b      	str	r3, [r7, #16]
		}

		ENC_CNT_SR_L = ENC_CNT_SR_L & ~(0x0001); //UIFクリア
 8005e3a:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <Get_speed+0x230>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4a59      	ldr	r2, [pc, #356]	; (8005fa4 <Get_speed+0x230>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6113      	str	r3, [r2, #16]
	}



	/*m 各タイヤの角速度算出 */
	delta_angle_tire_r = -1 * 1000 * 2 * PI * (float)sl_delta_cnt_r / (float)ENC_RESOLUTION;//m 右タイヤ角速度 [rad/s]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e50:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005fb4 <Get_speed+0x240>
 8005e54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e58:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005fb8 <Get_speed+0x244>
 8005e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e60:	edc7 7a02 	vstr	s15, [r7, #8]
	delta_angle_tire_l =  1 * 1000 * 2 * PI * (float)sl_delta_cnt_l / (float)ENC_RESOLUTION;//m 左タイヤ角速度 [rad/s]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005fbc <Get_speed+0x248>
 8005e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e76:	eddf 6a50 	vldr	s13, [pc, #320]	; 8005fb8 <Get_speed+0x244>
 8005e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7e:	edc7 7a01 	vstr	s15, [r7, #4]

	/*m 各モータの角速度算出*/
	delta_angle_motor_r = gear_rate * delta_angle_tire_r;
 8005e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e86:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005fc0 <Get_speed+0x24c>
 8005e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e8e:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <Get_speed+0x250>)
 8005e90:	edc3 7a00 	vstr	s15, [r3]
	delta_angle_motor_l = gear_rate * delta_angle_tire_l;
 8005e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e98:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005fc0 <Get_speed+0x24c>
 8005e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ea0:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <Get_speed+0x254>)
 8005ea2:	edc3 7a00 	vstr	s15, [r3]

	/*m 各タイヤの角速度から各タイヤの速度算出　*/
	speed_r = Tire_diameter * 0.5 * delta_angle_tire_r;	//m 右タイヤ速度[ m/s]
 8005ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005eaa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005fcc <Get_speed+0x258>
 8005eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <Get_speed+0x25c>)
 8005eb4:	edc3 7a00 	vstr	s15, [r3]
	speed_l = Tire_diameter * 0.5 * delta_angle_tire_l;	//m 左タイヤ速度[ m/s]
 8005eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ebc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005fcc <Get_speed+0x258>
 8005ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ec4:	4b43      	ldr	r3, [pc, #268]	; (8005fd4 <Get_speed+0x260>)
 8005ec6:	edc3 7a00 	vstr	s15, [r3]



	if(speed_r > speed_r_max)
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <Get_speed+0x25c>)
 8005ecc:	ed93 7a00 	vldr	s14, [r3]
 8005ed0:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <Get_speed+0x264>)
 8005ed2:	edd3 7a00 	vldr	s15, [r3]
 8005ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ede:	dd04      	ble.n	8005eea <Get_speed+0x176>
	{
		speed_r_max = speed_r;
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <Get_speed+0x25c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3c      	ldr	r2, [pc, #240]	; (8005fd8 <Get_speed+0x264>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	e00e      	b.n	8005f08 <Get_speed+0x194>
	}
	else if(speed_r < speed_r_min)
 8005eea:	4b39      	ldr	r3, [pc, #228]	; (8005fd0 <Get_speed+0x25c>)
 8005eec:	ed93 7a00 	vldr	s14, [r3]
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <Get_speed+0x268>)
 8005ef2:	edd3 7a00 	vldr	s15, [r3]
 8005ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efe:	d503      	bpl.n	8005f08 <Get_speed+0x194>
	{
		speed_r_min = speed_r;
 8005f00:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <Get_speed+0x25c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a35      	ldr	r2, [pc, #212]	; (8005fdc <Get_speed+0x268>)
 8005f06:	6013      	str	r3, [r2, #0]
	}

	if(speed_l > speed_l_max)
 8005f08:	4b32      	ldr	r3, [pc, #200]	; (8005fd4 <Get_speed+0x260>)
 8005f0a:	ed93 7a00 	vldr	s14, [r3]
 8005f0e:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <Get_speed+0x26c>)
 8005f10:	edd3 7a00 	vldr	s15, [r3]
 8005f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	dd04      	ble.n	8005f28 <Get_speed+0x1b4>
	{
		speed_l_max = speed_l;
 8005f1e:	4b2d      	ldr	r3, [pc, #180]	; (8005fd4 <Get_speed+0x260>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2f      	ldr	r2, [pc, #188]	; (8005fe0 <Get_speed+0x26c>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e00e      	b.n	8005f46 <Get_speed+0x1d2>
	}
	else if(speed_l < speed_l_min)
 8005f28:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <Get_speed+0x260>)
 8005f2a:	ed93 7a00 	vldr	s14, [r3]
 8005f2e:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <Get_speed+0x270>)
 8005f30:	edd3 7a00 	vldr	s15, [r3]
 8005f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	d503      	bpl.n	8005f46 <Get_speed+0x1d2>
	{
		speed_l_min = speed_l;
 8005f3e:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <Get_speed+0x260>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <Get_speed+0x270>)
 8005f44:	6013      	str	r3, [r2, #0]
	}

	speed_m = (speed_r + speed_l)/2;					//m 本体速度（右と左の平均値）  [m/s]
 8005f46:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <Get_speed+0x25c>)
 8005f48:	ed93 7a00 	vldr	s14, [r3]
 8005f4c:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <Get_speed+0x260>)
 8005f4e:	edd3 7a00 	vldr	s15, [r3]
 8005f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f5e:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <Get_speed+0x274>)
 8005f60:	edc3 7a00 	vstr	s15, [r3]
	speed_rad = (-speed_l + speed_r) / chassis_width;	//m エンコーダ値から算出される角速度[rad/s]
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <Get_speed+0x25c>)
 8005f66:	ed93 7a00 	vldr	s14, [r3]
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <Get_speed+0x260>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f74:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8005fec <Get_speed+0x278>
 8005f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <Get_speed+0x27c>)
 8005f7e:	edc3 7a00 	vstr	s15, [r3]


	enc_cnt_r_old	=	enc_cnt_r_new;	//m 右タイヤのカウント値を更新
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <Get_speed+0x22c>)
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <Get_speed+0x238>)
 8005f88:	801a      	strh	r2, [r3, #0]
	enc_cnt_l_old	=	enc_cnt_l_new;	//m 左タイヤのカウント値を更新
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <Get_speed+0x234>)
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <Get_speed+0x23c>)
 8005f90:	801a      	strh	r2, [r3, #0]

}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	2000021c 	.word	0x2000021c
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	2000021e 	.word	0x2000021e
 8005fac:	20000220 	.word	0x20000220
 8005fb0:	20000222 	.word	0x20000222
 8005fb4:	c5c4597b 	.word	0xc5c4597b
 8005fb8:	447fc000 	.word	0x447fc000
 8005fbc:	45c4597b 	.word	0x45c4597b
 8005fc0:	40838e39 	.word	0x40838e39
 8005fc4:	2000024c 	.word	0x2000024c
 8005fc8:	20000250 	.word	0x20000250
 8005fcc:	3bd2502f 	.word	0x3bd2502f
 8005fd0:	20000224 	.word	0x20000224
 8005fd4:	20000230 	.word	0x20000230
 8005fd8:	20000228 	.word	0x20000228
 8005fdc:	2000022c 	.word	0x2000022c
 8005fe0:	20000234 	.word	0x20000234
 8005fe4:	20000238 	.word	0x20000238
 8005fe8:	2000023c 	.word	0x2000023c
 8005fec:	3d16adf7 	.word	0x3d16adf7
 8005ff0:	20000248 	.word	0x20000248
 8005ff4:	00000000 	.word	0x00000000

08005ff8 <speed_m_average>:

/* ---------------------------------------------------------------
	並進方向の速度に移動平均をかけ、遅れを補完する関数(1msタスク)
--------------------------------------------------------------- */
void speed_m_average( void )
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
	static uint16_t l_ave_counter = 0;
	uint16_t i = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	80fb      	strh	r3, [r7, #6]
	uint16_t j = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	82fb      	strh	r3, [r7, #22]

	float l_ave_speed_m = 0;	//m 並進方向速度平均
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	603b      	str	r3, [r7, #0]
	float l_ave_accel_m = 0;	//m 並進方向加速度
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	613b      	str	r3, [r7, #16]

	float l_sum_speed_m = 0; 	//m 並進方向速度合計
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
	float l_sum_accel_m = 0;	//m 並進方向加速度合計
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]

	i = l_ave_counter % m_ave_num;
 800601e:	4b56      	ldr	r3, [pc, #344]	; (8006178 <speed_m_average+0x180>)
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	4b56      	ldr	r3, [pc, #344]	; (800617c <speed_m_average+0x184>)
 8006024:	fba3 1302 	umull	r1, r3, r3, r2
 8006028:	08d9      	lsrs	r1, r3, #3
 800602a:	460b      	mov	r3, r1
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	80fb      	strh	r3, [r7, #6]

	ave_store[i].speed_m = speed_m;
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	4a51      	ldr	r2, [pc, #324]	; (8006180 <speed_m_average+0x188>)
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	4951      	ldr	r1, [pc, #324]	; (8006184 <speed_m_average+0x18c>)
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	440b      	add	r3, r1
 8006042:	601a      	str	r2, [r3, #0]
	ave_store[i].accel_m = IMU_GetAccel_X();
 8006044:	88fc      	ldrh	r4, [r7, #6]
 8006046:	f000 fb01 	bl	800664c <IMU_GetAccel_X>
 800604a:	eef0 7a40 	vmov.f32	s15, s0
 800604e:	4a4d      	ldr	r2, [pc, #308]	; (8006184 <speed_m_average+0x18c>)
 8006050:	00e3      	lsls	r3, r4, #3
 8006052:	4413      	add	r3, r2
 8006054:	3304      	adds	r3, #4
 8006056:	edc3 7a00 	vstr	s15, [r3]

	for(j=0; j < m_ave_num; j++)
 800605a:	2300      	movs	r3, #0
 800605c:	82fb      	strh	r3, [r7, #22]
 800605e:	e01b      	b.n	8006098 <speed_m_average+0xa0>
	{
		l_sum_speed_m += ave_store[j].speed_m;
 8006060:	8afb      	ldrh	r3, [r7, #22]
 8006062:	4a48      	ldr	r2, [pc, #288]	; (8006184 <speed_m_average+0x18c>)
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	edd3 7a00 	vldr	s15, [r3]
 800606c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006074:	edc7 7a03 	vstr	s15, [r7, #12]
		l_sum_accel_m += ave_store[j].accel_m;
 8006078:	8afb      	ldrh	r3, [r7, #22]
 800607a:	4a42      	ldr	r2, [pc, #264]	; (8006184 <speed_m_average+0x18c>)
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	edd3 7a00 	vldr	s15, [r3]
 8006086:	ed97 7a02 	vldr	s14, [r7, #8]
 800608a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608e:	edc7 7a02 	vstr	s15, [r7, #8]
	for(j=0; j < m_ave_num; j++)
 8006092:	8afb      	ldrh	r3, [r7, #22]
 8006094:	3301      	adds	r3, #1
 8006096:	82fb      	strh	r3, [r7, #22]
 8006098:	8afb      	ldrh	r3, [r7, #22]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d9e0      	bls.n	8006060 <speed_m_average+0x68>
	}

	l_ave_speed_m = l_sum_speed_m / m_ave_num;
 800609e:	ed97 7a03 	vldr	s14, [r7, #12]
 80060a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80060a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060aa:	edc7 7a00 	vstr	s15, [r7]
	l_ave_accel_m = l_sum_accel_m / m_ave_num;
 80060ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80060b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80060b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060ba:	edc7 7a04 	vstr	s15, [r7, #16]

	/*加速度センサのぶれを補正、閾値範囲内を０とする*/
	if(ABS(l_ave_accel_m) < 0.5)
 80060be:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ca:	d50c      	bpl.n	80060e6 <speed_m_average+0xee>
 80060cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80060d0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80060d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060dc:	bfcc      	ite	gt
 80060de:	2301      	movgt	r3, #1
 80060e0:	2300      	movle	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e00b      	b.n	80060fe <speed_m_average+0x106>
 80060e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80060ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	bf4c      	ite	mi
 80060f8:	2301      	movmi	r3, #1
 80060fa:	2300      	movpl	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <speed_m_average+0x110>
	{
		l_ave_accel_m = 0;
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
	}

	/*m 遅れ補正*/
	l_ave_speed_m += 0.5 * ( l_ave_accel_m * (m_ave_num * 0.001)); //m 平均速度＋0.5(　加速度平均[m/s2]　・　平均時間[s])
 8006108:	6838      	ldr	r0, [r7, #0]
 800610a:	f7fa fa45 	bl	8000598 <__aeabi_f2d>
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f7fa fa40 	bl	8000598 <__aeabi_f2d>
 8006118:	a315      	add	r3, pc, #84	; (adr r3, 8006170 <speed_m_average+0x178>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f7fa fa93 	bl	8000648 <__aeabi_dmul>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	4b16      	ldr	r3, [pc, #88]	; (8006188 <speed_m_average+0x190>)
 8006130:	f7fa fa8a 	bl	8000648 <__aeabi_dmul>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f8ce 	bl	80002dc <__adddf3>
 8006140:	4603      	mov	r3, r0
 8006142:	460c      	mov	r4, r1
 8006144:	4618      	mov	r0, r3
 8006146:	4621      	mov	r1, r4
 8006148:	f7fa fd76 	bl	8000c38 <__aeabi_d2f>
 800614c:	4603      	mov	r3, r0
 800614e:	603b      	str	r3, [r7, #0]


	g_ave_speed_m = l_ave_speed_m;
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <speed_m_average+0x194>)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6013      	str	r3, [r2, #0]
	g_ave_accel_m = l_ave_accel_m;
 8006156:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <speed_m_average+0x198>)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6013      	str	r3, [r2, #0]


	l_ave_counter += 1 ;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <speed_m_average+0x180>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <speed_m_average+0x180>)
 8006166:	801a      	strh	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bdb0      	pop	{r4, r5, r7, pc}
 8006170:	47ae147b 	.word	0x47ae147b
 8006174:	3f847ae1 	.word	0x3f847ae1
 8006178:	200002a4 	.word	0x200002a4
 800617c:	cccccccd 	.word	0xcccccccd
 8006180:	2000023c 	.word	0x2000023c
 8006184:	20000254 	.word	0x20000254
 8006188:	3fe00000 	.word	0x3fe00000
 800618c:	20000240 	.word	0x20000240
 8006190:	20000244 	.word	0x20000244

08006194 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	609a      	str	r2, [r3, #8]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	4b31      	ldr	r3, [pc, #196]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	4a30      	ldr	r2, [pc, #192]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ba:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4a29      	ldr	r2, [pc, #164]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	6313      	str	r3, [r2, #48]	; 0x30
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <MX_GPIO_Init+0xe0>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_FL_Pin|LED_SL_Pin|LED_SR_Pin|LED_FR_Pin 
 80061e2:	2200      	movs	r2, #0
 80061e4:	f643 11f0 	movw	r1, #14832	; 0x39f0
 80061e8:	4823      	ldr	r0, [pc, #140]	; (8006278 <MX_GPIO_Init+0xe4>)
 80061ea:	f7fc fb03 	bl	80027f4 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);
 80061ee:	2200      	movs	r2, #0
 80061f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061f4:	4821      	ldr	r0, [pc, #132]	; (800627c <MX_GPIO_Init+0xe8>)
 80061f6:	f7fc fafd 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_FL_Pin|LED_SL_Pin|LED_SR_Pin|LED_FR_Pin;
 80061fa:	23f0      	movs	r3, #240	; 0xf0
 80061fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061fe:	2301      	movs	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006206:	2303      	movs	r3, #3
 8006208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620a:	f107 030c 	add.w	r3, r7, #12
 800620e:	4619      	mov	r1, r3
 8006210:	4819      	ldr	r0, [pc, #100]	; (8006278 <MX_GPIO_Init+0xe4>)
 8006212:	f7fc f95d 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Push_SW_Pin;
 8006216:	2302      	movs	r3, #2
 8006218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_SW_GPIO_Port, &GPIO_InitStruct);
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	4619      	mov	r1, r3
 8006228:	4814      	ldr	r0, [pc, #80]	; (800627c <MX_GPIO_Init+0xe8>)
 800622a:	f7fc f951 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = gyro_CS_Pin;
 800622e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006234:	2301      	movs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800623c:	2303      	movs	r3, #3
 800623e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(gyro_CS_GPIO_Port, &GPIO_InitStruct);
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	4619      	mov	r1, r3
 8006246:	480d      	ldr	r0, [pc, #52]	; (800627c <MX_GPIO_Init+0xe8>)
 8006248:	f7fc f942 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin;
 800624c:	f44f 5364 	mov.w	r3, #14592	; 0x3900
 8006250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006252:	2301      	movs	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006256:	2302      	movs	r3, #2
 8006258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800625a:	2303      	movs	r3, #3
 800625c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625e:	f107 030c 	add.w	r3, r7, #12
 8006262:	4619      	mov	r1, r3
 8006264:	4804      	ldr	r0, [pc, #16]	; (8006278 <MX_GPIO_Init+0xe4>)
 8006266:	f7fc f933 	bl	80024d0 <HAL_GPIO_Init>

}
 800626a:	bf00      	nop
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	40020000 	.word	0x40020000
 800627c:	40020400 	.word	0x40020400

08006280 <rt_roundd_snf>:
/*
 * Arguments    : double u
 * Return Type  : double
 */
static double rt_roundd_snf(double u)
{
 8006280:	b590      	push	{r4, r7, lr}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	ed87 0b00 	vstr	d0, [r7]
  double y;
  if (fabs(u) < 4.503599627370496E+15) {
 800628a:	6838      	ldr	r0, [r7, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <rt_roundd_snf+0xd4>)
 8006298:	f7fa fc48 	bl	8000b2c <__aeabi_dcmplt>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d048      	beq.n	8006334 <rt_roundd_snf+0xb4>
    if (u >= 0.5) {
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <rt_roundd_snf+0xd8>)
 80062a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062ac:	f7fa fc52 	bl	8000b54 <__aeabi_dcmpge>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d013      	beq.n	80062de <rt_roundd_snf+0x5e>
      y = floor(u + 0.5);
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	4b27      	ldr	r3, [pc, #156]	; (8006358 <rt_roundd_snf+0xd8>)
 80062bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062c0:	f7fa f80c 	bl	80002dc <__adddf3>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	ec44 3b17 	vmov	d7, r3, r4
 80062cc:	eeb0 0a47 	vmov.f32	s0, s14
 80062d0:	eef0 0a67 	vmov.f32	s1, s15
 80062d4:	f00c fcfc 	bl	8012cd0 <floor>
 80062d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80062dc:	e02e      	b.n	800633c <rt_roundd_snf+0xbc>
    } else if (u > -0.5) {
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <rt_roundd_snf+0xdc>)
 80062e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e8:	f7fa fc3e 	bl	8000b68 <__aeabi_dcmpgt>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <rt_roundd_snf+0x8c>
      y = u * 0.0;
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062fe:	f7fa f9a3 	bl	8000648 <__aeabi_dmul>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800630a:	e017      	b.n	800633c <rt_roundd_snf+0xbc>
    } else {
      y = ceil(u - 0.5);
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	4b11      	ldr	r3, [pc, #68]	; (8006358 <rt_roundd_snf+0xd8>)
 8006312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006316:	f7f9 ffdf 	bl	80002d8 <__aeabi_dsub>
 800631a:	4603      	mov	r3, r0
 800631c:	460c      	mov	r4, r1
 800631e:	ec44 3b17 	vmov	d7, r3, r4
 8006322:	eeb0 0a47 	vmov.f32	s0, s14
 8006326:	eef0 0a67 	vmov.f32	s1, s15
 800632a:	f00c fc51 	bl	8012bd0 <ceil>
 800632e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006332:	e003      	b.n	800633c <rt_roundd_snf+0xbc>
    }
  } else {
    y = u;
 8006334:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006338:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  return y;
 800633c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006340:	ec44 3b17 	vmov	d7, r3, r4
}
 8006344:	eeb0 0a47 	vmov.f32	s0, s14
 8006348:	eef0 0a67 	vmov.f32	s1, s15
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	bf00      	nop
 8006354:	43300000 	.word	0x43300000
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	bfe00000 	.word	0xbfe00000

08006360 <idivide>:
 *                int c_size[1]
 * Return Type  : void
 */
void idivide(const unsigned short a_data[], const int a_size[1], unsigned short
             c_data[], int c_size[1])
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  int nx;
  int k;
  static double x_data[1024];
  nx = a_size[0];
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	613b      	str	r3, [r7, #16]
  for (k = 0; k < nx; k++) {
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e017      	b.n	80063aa <idivide+0x4a>
    x_data[k] = (double)a_data[k] / 32.0;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa f8e5 	bl	8000554 <__aeabi_ui2d>
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	4b30      	ldr	r3, [pc, #192]	; (8006450 <idivide+0xf0>)
 8006390:	f7fa fa84 	bl	800089c <__aeabi_ddiv>
 8006394:	4603      	mov	r3, r0
 8006396:	460c      	mov	r4, r1
 8006398:	492e      	ldr	r1, [pc, #184]	; (8006454 <idivide+0xf4>)
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	00d2      	lsls	r2, r2, #3
 800639e:	440a      	add	r2, r1
 80063a0:	e9c2 3400 	strd	r3, r4, [r2]
  for (k = 0; k < nx; k++) {
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3301      	adds	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	dbe3      	blt.n	800637a <idivide+0x1a>
  }

  nx = a_size[0];
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	613b      	str	r3, [r7, #16]
  for (k = 0; k < nx; k++) {
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e018      	b.n	80063f0 <idivide+0x90>
    x_data[k] = trunc(x_data[k]);
 80063be:	4a25      	ldr	r2, [pc, #148]	; (8006454 <idivide+0xf4>)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4413      	add	r3, r2
 80063c6:	ed93 7b00 	vldr	d7, [r3]
 80063ca:	eeb0 0a47 	vmov.f32	s0, s14
 80063ce:	eef0 0a67 	vmov.f32	s1, s15
 80063d2:	f00c fd01 	bl	8012dd8 <trunc>
 80063d6:	eeb0 7a40 	vmov.f32	s14, s0
 80063da:	eef0 7a60 	vmov.f32	s15, s1
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <idivide+0xf4>)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	4413      	add	r3, r2
 80063e6:	ed83 7b00 	vstr	d7, [r3]
  for (k = 0; k < nx; k++) {
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	3301      	adds	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	dbe2      	blt.n	80063be <idivide+0x5e>
  }

  c_size[0] = a_size[0];
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	601a      	str	r2, [r3, #0]
  nx = a_size[0];
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	613b      	str	r3, [r7, #16]
  for (k = 0; k < nx; k++) {
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e019      	b.n	8006440 <idivide+0xe0>
    c_data[k] = (unsigned short)rt_roundd_snf(x_data[k]);
 800640c:	4a11      	ldr	r2, [pc, #68]	; (8006454 <idivide+0xf4>)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4413      	add	r3, r2
 8006414:	ed93 7b00 	vldr	d7, [r3]
 8006418:	eeb0 0a47 	vmov.f32	s0, s14
 800641c:	eef0 0a67 	vmov.f32	s1, s15
 8006420:	f7ff ff2e 	bl	8006280 <rt_roundd_snf>
 8006424:	ec51 0b10 	vmov	r0, r1, d0
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	18d4      	adds	r4, r2, r3
 8006430:	f7fa fbe2 	bl	8000bf8 <__aeabi_d2uiz>
 8006434:	4603      	mov	r3, r0
 8006436:	b29b      	uxth	r3, r3
 8006438:	8023      	strh	r3, [r4, #0]
  for (k = 0; k < nx; k++) {
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	3301      	adds	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	429a      	cmp	r2, r3
 8006446:	dbe1      	blt.n	800640c <idivide+0xac>
  }
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd90      	pop	{r4, r7, pc}
 8006450:	40400000 	.word	0x40400000
 8006454:	200002a8 	.word	0x200002a8

08006458 <IMU_Write1byte>:

/* ---------------------------------------------------------------
	ICM20648に1byte書き込む関数
--------------------------------------------------------------- */
void IMU_Write1byte( uint8_t addr , uint8_t data )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	460a      	mov	r2, r1
 8006462:	71fb      	strb	r3, [r7, #7]
 8006464:	4613      	mov	r3, r2
 8006466:	71bb      	strb	r3, [r7, #6]
	uint8_t address = addr & 0x7f;//write設定(MSB=0)　+　アドレス7bit
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646e:	b2db      	uxtb	r3, r3
 8006470:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);//CSpinをLoに、SPI通信開始
 8006472:	2200      	movs	r2, #0
 8006474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006478:	480c      	ldr	r0, [pc, #48]	; (80064ac <IMU_Write1byte+0x54>)
 800647a:	f7fc f9bb 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &address, 1, 1);//address送付
 800647e:	f107 010f 	add.w	r1, r7, #15
 8006482:	2301      	movs	r3, #1
 8006484:	2201      	movs	r2, #1
 8006486:	480a      	ldr	r0, [pc, #40]	; (80064b0 <IMU_Write1byte+0x58>)
 8006488:	f7fc fe3c 	bl	8003104 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);//data送付
 800648c:	1db9      	adds	r1, r7, #6
 800648e:	2301      	movs	r3, #1
 8006490:	2201      	movs	r2, #1
 8006492:	4807      	ldr	r0, [pc, #28]	; (80064b0 <IMU_Write1byte+0x58>)
 8006494:	f7fc fe36 	bl	8003104 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_SET);//CSpinをHiに、SPI通信終了
 8006498:	2201      	movs	r2, #1
 800649a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800649e:	4803      	ldr	r0, [pc, #12]	; (80064ac <IMU_Write1byte+0x54>)
 80064a0:	f7fc f9a8 	bl	80027f4 <HAL_GPIO_WritePin>
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40020400 	.word	0x40020400
 80064b0:	2001bbcc 	.word	0x2001bbcc

080064b4 <IMU_Read1byte>:

/* ---------------------------------------------------------------
	ICM20648から1byte読み出す関数
--------------------------------------------------------------- */
uint8_t IMU_Read1byte( uint8_t addr )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
	uint8_t address = addr | 0x80;//read設定(MSB=0)　+ アドレス7bit
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	73fb      	strb	r3, [r7, #15]
	uint8_t value;

	HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);//CSpinをLoに、SPI通信開始
 80064c8:	2200      	movs	r2, #0
 80064ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064ce:	480e      	ldr	r0, [pc, #56]	; (8006508 <IMU_Read1byte+0x54>)
 80064d0:	f7fc f990 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &address, 1, 1);//address送付
 80064d4:	f107 010f 	add.w	r1, r7, #15
 80064d8:	2301      	movs	r3, #1
 80064da:	2201      	movs	r2, #1
 80064dc:	480b      	ldr	r0, [pc, #44]	; (800650c <IMU_Read1byte+0x58>)
 80064de:	f7fc fe11 	bl	8003104 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &value, 1, 1);//data受信
 80064e2:	f107 010e 	add.w	r1, r7, #14
 80064e6:	2301      	movs	r3, #1
 80064e8:	2201      	movs	r2, #1
 80064ea:	4808      	ldr	r0, [pc, #32]	; (800650c <IMU_Read1byte+0x58>)
 80064ec:	f7fc ff3e 	bl	800336c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_SET);//CSpinをHiに、SPI通信終了
 80064f0:	2201      	movs	r2, #1
 80064f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064f6:	4804      	ldr	r0, [pc, #16]	; (8006508 <IMU_Read1byte+0x54>)
 80064f8:	f7fc f97c 	bl	80027f4 <HAL_GPIO_WritePin>

	return value;
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40020400 	.word	0x40020400
 800650c:	2001bbcc 	.word	0x2001bbcc

08006510 <IMU_CheckWHOAMI>:

/* ---------------------------------------------------------------
	ICM20648の動作確認関数（WHO_AM_I(0xe0)を取得する）
--------------------------------------------------------------- */
uint8_t IMU_CheckWHOAMI( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
	return IMU_Read1byte( WHO_AM_I );
 8006514:	2000      	movs	r0, #0
 8006516:	f7ff ffcd 	bl	80064b4 <IMU_Read1byte>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}

08006520 <IMU_Initialize>:

/* ---------------------------------------------------------------
	ICM20648の初期設定用関数
--------------------------------------------------------------- */
void IMU_Initialize( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0

	uint8_t who_am_i;

	HAL_Delay( 100 ); // wait start
 8006526:	2064      	movs	r0, #100	; 0x64
 8006528:	f7fa fed6 	bl	80012d8 <HAL_Delay>
	IMU_CheckWHOAMI( );//dummy read
 800652c:	f7ff fff0 	bl	8006510 <IMU_CheckWHOAMI>
	who_am_i = IMU_CheckWHOAMI( ); // Who_am_iの取得
 8006530:	f7ff ffee 	bl	8006510 <IMU_CheckWHOAMI>
 8006534:	4603      	mov	r3, r0
 8006536:	71fb      	strb	r3, [r7, #7]
//	printf( "\r\n0x%x\r\n",who_am_i ); // Who_am_iの値出力

	if ( who_am_i != 0xe0 ){//WHO_AM_Iが規定値でないときエラー表示
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2be0      	cmp	r3, #224	; 0xe0
 800653c:	d003      	beq.n	8006546 <IMU_Initialize+0x26>
	  while(1){
	    printf( "gyro_error\r");
 800653e:	4820      	ldr	r0, [pc, #128]	; (80065c0 <IMU_Initialize+0xa0>)
 8006540:	f009 f8be 	bl	800f6c0 <iprintf>
 8006544:	e7fb      	b.n	800653e <IMU_Initialize+0x1e>
	    }
	}


	HAL_Delay(100);
 8006546:	2064      	movs	r0, #100	; 0x64
 8006548:	f7fa fec6 	bl	80012d8 <HAL_Delay>

	IMU_Write1byte(USER_CTRL, 0x10);	//I2CモードをDisableに設定
 800654c:	2110      	movs	r1, #16
 800654e:	2003      	movs	r0, #3
 8006550:	f7ff ff82 	bl	8006458 <IMU_Write1byte>
	HAL_Delay(1);
 8006554:	2001      	movs	r0, #1
 8006556:	f7fa febf 	bl	80012d8 <HAL_Delay>
	IMU_Write1byte(PWR_MGMT_1, 0x01);	// ICM20648をリセット
 800655a:	2101      	movs	r1, #1
 800655c:	2006      	movs	r0, #6
 800655e:	f7ff ff7b 	bl	8006458 <IMU_Write1byte>
	HAL_Delay(100);
 8006562:	2064      	movs	r0, #100	; 0x64
 8006564:	f7fa feb8 	bl	80012d8 <HAL_Delay>

	IMU_Write1byte(REG_BANK_SEL, REG_USER_BANK_2); // USER_BANK_2へ切り替え
 8006568:	2120      	movs	r1, #32
 800656a:	207f      	movs	r0, #127	; 0x7f
 800656c:	f7ff ff74 	bl	8006458 <IMU_Write1byte>
	HAL_Delay(100);
 8006570:	2064      	movs	r0, #100	; 0x64
 8006572:	f7fa feb1 	bl	80012d8 <HAL_Delay>

	// m ジャイロの設定
	IMU_Write1byte(GYRO_CONFIG_1, 0x07);	// a ジャイロのスケールを±2000deg/sに設定、
 8006576:	2107      	movs	r1, #7
 8006578:	2001      	movs	r0, #1
 800657a:	f7ff ff6d 	bl	8006458 <IMU_Write1byte>
											// a ジャイロのローパスフィルタをEnableに設定
	HAL_Delay(1);
 800657e:	2001      	movs	r0, #1
 8006580:	f7fa feaa 	bl	80012d8 <HAL_Delay>
	// a 加速度計の設定
	IMU_Write1byte(ACCEL_CONFIG, 0x0d);		// a 加速度計のスケールを±8gに設定
 8006584:	210d      	movs	r1, #13
 8006586:	2014      	movs	r0, #20
 8006588:	f7ff ff66 	bl	8006458 <IMU_Write1byte>
											// a 加速度計のローパスフィルタをEnableに設定
	HAL_Delay(1);
 800658c:	2001      	movs	r0, #1
 800658e:	f7fa fea3 	bl	80012d8 <HAL_Delay>

	IMU_Write1byte(REG_BANK_SEL, REG_USER_BANK_0);	// USER_BANK_0へ切り替え
 8006592:	2100      	movs	r1, #0
 8006594:	207f      	movs	r0, #127	; 0x7f
 8006596:	f7ff ff5f 	bl	8006458 <IMU_Write1byte>
	HAL_Delay(100);
 800659a:	2064      	movs	r0, #100	; 0x64
 800659c:	f7fa fe9c 	bl	80012d8 <HAL_Delay>

	// DMAの開始
	HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);//CSpinをLoに、SPI通信開始
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065a6:	4807      	ldr	r0, [pc, #28]	; (80065c4 <IMU_Initialize+0xa4>)
 80065a8:	f7fc f924 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA( &hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t) );
 80065ac:	230d      	movs	r3, #13
 80065ae:	4a06      	ldr	r2, [pc, #24]	; (80065c8 <IMU_Initialize+0xa8>)
 80065b0:	4906      	ldr	r1, [pc, #24]	; (80065cc <IMU_Initialize+0xac>)
 80065b2:	4807      	ldr	r0, [pc, #28]	; (80065d0 <IMU_Initialize+0xb0>)
 80065b4:	f7fd f986 	bl	80038c4 <HAL_SPI_TransmitReceive_DMA>

}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	080132e0 	.word	0x080132e0
 80065c4:	40020400 	.word	0x40020400
 80065c8:	200022a8 	.word	0x200022a8
 80065cc:	20000005 	.word	0x20000005
 80065d0:	2001bbcc 	.word	0x2001bbcc

080065d4 <HAL_SPI_TxRxCpltCallback>:

/* ---------------------------------------------------------------
	DMA送受信完了後のコールバック関数
--------------------------------------------------------------- */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_SET );//CSpinをHIに、SPI通信停止
 80065dc:	2201      	movs	r2, #1
 80065de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065e2:	4814      	ldr	r0, [pc, #80]	; (8006634 <HAL_SPI_TxRxCpltCallback+0x60>)
 80065e4:	f7fc f906 	bl	80027f4 <HAL_GPIO_WritePin>
	accel_x_value = ( ( (int16_t)imu_value[3]<<8 ) | ( (int16_t)imu_value[4]&0x00ff ) );//ICMのy軸方向加速度をx方向加速度として取得
 80065e8:	4b13      	ldr	r3, [pc, #76]	; (8006638 <HAL_SPI_TxRxCpltCallback+0x64>)
 80065ea:	78db      	ldrb	r3, [r3, #3]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	b21a      	sxth	r2, r3
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <HAL_SPI_TxRxCpltCallback+0x64>)
 80065f2:	791b      	ldrb	r3, [r3, #4]
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b21a      	sxth	r2, r3
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <HAL_SPI_TxRxCpltCallback+0x68>)
 80065fc:	801a      	strh	r2, [r3, #0]
	gyro_z_value =  ( ( (int16_t)imu_value[11]<<8 ) | ( (int16_t)imu_value[12]&0x00ff ) );//z軸角速度を取得
 80065fe:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <HAL_SPI_TxRxCpltCallback+0x64>)
 8006600:	7adb      	ldrb	r3, [r3, #11]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	b21a      	sxth	r2, r3
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <HAL_SPI_TxRxCpltCallback+0x64>)
 8006608:	7b1b      	ldrb	r3, [r3, #12]
 800660a:	b21b      	sxth	r3, r3
 800660c:	4313      	orrs	r3, r2
 800660e:	b21a      	sxth	r2, r3
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8006612:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin( gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET );//CSpinをLoに、SPI通信開始
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800661a:	4806      	ldr	r0, [pc, #24]	; (8006634 <HAL_SPI_TxRxCpltCallback+0x60>)
 800661c:	f7fc f8ea 	bl	80027f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA( &hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t) );
 8006620:	230d      	movs	r3, #13
 8006622:	4a05      	ldr	r2, [pc, #20]	; (8006638 <HAL_SPI_TxRxCpltCallback+0x64>)
 8006624:	4907      	ldr	r1, [pc, #28]	; (8006644 <HAL_SPI_TxRxCpltCallback+0x70>)
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <HAL_SPI_TxRxCpltCallback+0x74>)
 8006628:	f7fd f94c 	bl	80038c4 <HAL_SPI_TransmitReceive_DMA>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40020400 	.word	0x40020400
 8006638:	200022a8 	.word	0x200022a8
 800663c:	200022b6 	.word	0x200022b6
 8006640:	200022ba 	.word	0x200022ba
 8006644:	20000005 	.word	0x20000005
 8006648:	2001bbcc 	.word	0x2001bbcc

0800664c <IMU_GetAccel_X>:

/* ---------------------------------------------------------------
	X軸加速度計の加速度を取得する関数[m/s^2]
--------------------------------------------------------------- */
float IMU_GetAccel_X( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
	return ACCEL_X_SIGN * G * (accel_x_value - accel_x_reference) / ACCEL_X_SENSITIVITY;
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <IMU_GetAccel_X+0x3c>)
 8006652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006656:	461a      	mov	r2, r3
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <IMU_GetAccel_X+0x40>)
 800665a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	ee07 3a90 	vmov	s15, r3
 8006664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006668:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8006690 <IMU_GetAccel_X+0x44>
 800666c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006670:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006694 <IMU_GetAccel_X+0x48>
 8006674:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006678:	eef0 7a66 	vmov.f32	s15, s13
}
 800667c:	eeb0 0a67 	vmov.f32	s0, s15
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	200022b6 	.word	0x200022b6
 800668c:	200022b8 	.word	0x200022b8
 8006690:	411ce80a 	.word	0x411ce80a
 8006694:	45800000 	.word	0x45800000

08006698 <IMU_GetGyro_Z>:

/* ---------------------------------------------------------------
	Z軸ジャイロの角速度を取得する関数[rad/s]
--------------------------------------------------------------- */
float IMU_GetGyro_Z( void )
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
	return GYRO_Z_SIGN * DEG2RAD( (gyro_z_value - gyro_z_reference) / GYRO_Z_SENSITIVITY );
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <IMU_GetGyro_Z+0x44>)
 800669e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a2:	461a      	mov	r2, r3
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <IMU_GetGyro_Z+0x48>)
 80066a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066b4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80066e4 <IMU_GetGyro_Z+0x4c>
 80066b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066bc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80066e8 <IMU_GetGyro_Z+0x50>
 80066c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80066ec <IMU_GetGyro_Z+0x54>
 80066c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066cc:	eef1 7a67 	vneg.f32	s15, s15
}
 80066d0:	eeb0 0a67 	vmov.f32	s0, s15
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	200022ba 	.word	0x200022ba
 80066e0:	200022bc 	.word	0x200022bc
 80066e4:	41860419 	.word	0x41860419
 80066e8:	43340000 	.word	0x43340000
 80066ec:	40490fda 	.word	0x40490fda

080066f0 <Interrupt_Main>:

/* ---------------------------------------------------------------
	1ms周期で割り込み処理関数
--------------------------------------------------------------- */
void Interrupt_Main( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0

	Get_speed();
 80066f4:	f7ff fb3e 	bl	8005d74 <Get_speed>
	speed_m_average();
 80066f8:	f7ff fc7e 	bl	8005ff8 <speed_m_average>

	switch(mode_number_int){
 80066fc:	4b48      	ldr	r3, [pc, #288]	; (8006820 <Interrupt_Main+0x130>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b0f      	cmp	r3, #15
 8006702:	f200 808a 	bhi.w	800681a <Interrupt_Main+0x12a>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <Interrupt_Main+0x1c>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006819 	.word	0x08006819
 8006710:	0800674d 	.word	0x0800674d
 8006714:	0800676f 	.word	0x0800676f
 8006718:	0800678d 	.word	0x0800678d
 800671c:	080067ab 	.word	0x080067ab
 8006720:	080067b1 	.word	0x080067b1
 8006724:	080067b7 	.word	0x080067b7
 8006728:	080067d5 	.word	0x080067d5
 800672c:	0800681b 	.word	0x0800681b
 8006730:	0800681b 	.word	0x0800681b
 8006734:	0800681b 	.word	0x0800681b
 8006738:	0800681b 	.word	0x0800681b
 800673c:	0800681b 	.word	0x0800681b
 8006740:	0800681b 	.word	0x0800681b
 8006744:	0800681b 	.word	0x0800681b
 8006748:	080067f7 	.word	0x080067f7
	case 0 ://m 初期起動時にとおるので、つかわないこと。(ログ出力用）
		break;

	case 1 :
		data_get();
 800674c:	f004 ff60 	bl	800b610 <data_get>
		calibrate_tim(); 			//m前壁補正用カウンタ
 8006750:	f007 fa84 	bl	800dc5c <calibrate_tim>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 8006754:	f006 f81c 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 8006758:	f006 f846 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 800675c:	f006 f99c 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 8006760:	f006 fa42 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 8006764:	f006 f870 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();
 8006768:	f006 faee 	bl	800cd48 <Operation_amount_calc>
		break;
 800676c:	e055      	b.n	800681a <Interrupt_Main+0x12a>
	case 2 :
		data_get();
 800676e:	f004 ff4f 	bl	800b610 <data_get>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 8006772:	f006 f80d 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 8006776:	f006 f837 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 800677a:	f006 f98d 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 800677e:	f006 fa33 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 8006782:	f006 f861 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();	//m目標速度と現在速度の偏差に応じて各モータの電圧演算
 8006786:	f006 fadf 	bl	800cd48 <Operation_amount_calc>
		break;
 800678a:	e046      	b.n	800681a <Interrupt_Main+0x12a>
	case 3 :
		data_get();
 800678c:	f004 ff40 	bl	800b610 <data_get>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 8006790:	f005 fffe 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 8006794:	f006 f828 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 8006798:	f006 f97e 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 800679c:	f006 fa24 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 80067a0:	f006 f852 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();	//m目標速度と現在速度の偏差に応じて各モータの電圧演算
 80067a4:	f006 fad0 	bl	800cd48 <Operation_amount_calc>
		break;
 80067a8:	e037      	b.n	800681a <Interrupt_Main+0x12a>
	case 4 :
		data_get();
 80067aa:	f004 ff31 	bl	800b610 <data_get>
		break;
 80067ae:	e034      	b.n	800681a <Interrupt_Main+0x12a>
	case 5 :
		data_get();
 80067b0:	f004 ff2e 	bl	800b610 <data_get>
		break;
 80067b4:	e031      	b.n	800681a <Interrupt_Main+0x12a>
	case 6 :
		data_get();
 80067b6:	f004 ff2b 	bl	800b610 <data_get>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 80067ba:	f005 ffe9 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 80067be:	f006 f813 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 80067c2:	f006 f969 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 80067c6:	f006 fa0f 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 80067ca:	f006 f83d 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();	//m目標速度と現在速度の偏差に応じて各モータの電圧演算
 80067ce:	f006 fabb 	bl	800cd48 <Operation_amount_calc>
		break;
 80067d2:	e022      	b.n	800681a <Interrupt_Main+0x12a>
	case 7 :
		data_get();
 80067d4:	f004 ff1c 	bl	800b610 <data_get>
		calibrate_tim(); //m前壁補正用カウンタ
 80067d8:	f007 fa40 	bl	800dc5c <calibrate_tim>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 80067dc:	f005 ffd8 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 80067e0:	f006 f802 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 80067e4:	f006 f958 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 80067e8:	f006 f9fe 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 80067ec:	f006 f82c 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();
 80067f0:	f006 faaa 	bl	800cd48 <Operation_amount_calc>
		break;
 80067f4:	e011      	b.n	800681a <Interrupt_Main+0x12a>
	case 15 :
		data_get();
 80067f6:	f004 ff0b 	bl	800b610 <data_get>
		calibrate_tim(); 			//m前壁補正用カウンタ
 80067fa:	f007 fa2f 	bl	800dc5c <calibrate_tim>
		real_distance_m_calc();		//m現在速度を積分して距離算出
 80067fe:	f005 ffc7 	bl	800c790 <real_distance_m_calc>
		real_distance_w_calc();		//m現在角速度を積分して角度算出
 8006802:	f005 fff1 	bl	800c7e8 <real_distance_w_calc>
		target_speed_m_calc();		//m現在距離と目標距離に応じて加速度を切り替え
 8006806:	f006 f947 	bl	800ca98 <target_speed_m_calc>
		target_speed_w_calc();		//m現在角度と目標角度に応じて角加速度を切り替え
 800680a:	f006 f9ed 	bl	800cbe8 <target_speed_w_calc>
		target_speed_inc();			//m加速度、角加速度を目標速度に加算
 800680e:	f006 f81b 	bl	800c848 <target_speed_inc>
		Operation_amount_calc();	//m目標速度と現在速度の偏差に応じて各モータの電圧演算
 8006812:	f006 fa99 	bl	800cd48 <Operation_amount_calc>
		break;
 8006816:	e000      	b.n	800681a <Interrupt_Main+0x12a>
		break;
 8006818:	bf00      	nop
	}
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200022fc 	.word	0x200022fc

08006824 <Interrupt_Initialize>:

/* ---------------------------------------------------------------
	メイン割り込みの初期設定関数
--------------------------------------------------------------- */
void Interrupt_Initialize( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT( &htim6 );
 8006828:	4802      	ldr	r0, [pc, #8]	; (8006834 <Interrupt_Initialize+0x10>)
 800682a:	f7fd fb78 	bl	8003f1e <HAL_TIM_Base_Start_IT>
}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	2001be48 	.word	0x2001be48

08006838 <Interrupt_PreProcess>:

/* ---------------------------------------------------------------
	割り込み前処理関数
--------------------------------------------------------------- */
void Interrupt_PreProcess( void )
{
 8006838:	b598      	push	{r3, r4, r7, lr}
 800683a:	af00      	add	r7, sp, #0
//	static uint32_t		interrupt_count_old = 0;
//	static uint16_t		interrupt_count_old = 0;

	static uint64_t		boot_time_count = 0;

	interrupt_count_now = TIMER_COUNT;
 800683c:	4b0f      	ldr	r3, [pc, #60]	; (800687c <Interrupt_PreProcess+0x44>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	4a0f      	ldr	r2, [pc, #60]	; (8006880 <Interrupt_PreProcess+0x48>)
 8006844:	6013      	str	r3, [r2, #0]
//	boot_time_count += (uint16_t)(interrupt_count_now - interrupt_count_old);
//	interrupt_count_old = interrupt_count_now;
//	boot_time = (float)boot_time_count / (float)(HAL_RCC_GetPCLK1Freq() *2 / ( TIMER_PSC + 1) );

	boot_time_count += 1;
 8006846:	4b0f      	ldr	r3, [pc, #60]	; (8006884 <Interrupt_PreProcess+0x4c>)
 8006848:	e9d3 1200 	ldrd	r1, r2, [r3]
 800684c:	1c4b      	adds	r3, r1, #1
 800684e:	f142 0400 	adc.w	r4, r2, #0
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <Interrupt_PreProcess+0x4c>)
 8006854:	e9c2 3400 	strd	r3, r4, [r2]
	boot_time = ((float)boot_time_count /(float)1000);
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <Interrupt_PreProcess+0x4c>)
 800685a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800685e:	4618      	mov	r0, r3
 8006860:	4621      	mov	r1, r4
 8006862:	f7fa fb01 	bl	8000e68 <__aeabi_ul2f>
 8006866:	ee06 0a90 	vmov	s13, r0
 800686a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006888 <Interrupt_PreProcess+0x50>
 800686e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <Interrupt_PreProcess+0x54>)
 8006874:	edc3 7a00 	vstr	s15, [r3]
}
 8006878:	bf00      	nop
 800687a:	bd98      	pop	{r3, r4, r7, pc}
 800687c:	2001be48 	.word	0x2001be48
 8006880:	200022c0 	.word	0x200022c0
 8006884:	200022d0 	.word	0x200022d0
 8006888:	447a0000 	.word	0x447a0000
 800688c:	200022cc 	.word	0x200022cc

08006890 <Interrupt_PostProcess>:

/* ---------------------------------------------------------------
	割り込み後処理関数
--------------------------------------------------------------- */
void Interrupt_PostProcess( void )
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
	interrupt_duty = (TIMER_COUNT - interrupt_count_now) * 1000 / TIMER_LOAD;
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <Interrupt_PostProcess+0x44>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <Interrupt_PostProcess+0x48>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068a4:	fb02 f203 	mul.w	r2, r2, r3
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <Interrupt_PostProcess+0x44>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <Interrupt_PostProcess+0x4c>)
 80068b4:	6013      	str	r3, [r2, #0]
	interrupt_duty_max = MAX( interrupt_duty_max, interrupt_duty );
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <Interrupt_PostProcess+0x4c>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b09      	ldr	r3, [pc, #36]	; (80068e0 <Interrupt_PostProcess+0x50>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4293      	cmp	r3, r2
 80068c0:	bf38      	it	cc
 80068c2:	4613      	movcc	r3, r2
 80068c4:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <Interrupt_PostProcess+0x50>)
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2001be48 	.word	0x2001be48
 80068d8:	200022c0 	.word	0x200022c0
 80068dc:	200022c4 	.word	0x200022c4
 80068e0:	200022c8 	.word	0x200022c8

080068e4 <Interrupt_GetDuty>:

/* ---------------------------------------------------------------
	割り込み周期に占める呼び出し位置までの処理時間の割合を取得する関数
--------------------------------------------------------------- */
uint16_t Interrupt_GetDuty( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
	return interrupt_duty;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <Interrupt_GetDuty+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	200022c4 	.word	0x200022c4

080068fc <Interrupt_GetDuty_Max>:

/* ---------------------------------------------------------------
	上記割合の最大値を取得する関数
--------------------------------------------------------------- */
uint16_t Interrupt_GetDuty_Max( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
	return interrupt_duty_max;
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <Interrupt_GetDuty_Max+0x14>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
}
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	200022c8 	.word	0x200022c8

08006914 <Interrupt_GetBootTime>:

/* ---------------------------------------------------------------
	マイコン起動時からの経過時間を取得する関数
--------------------------------------------------------------- */
float Interrupt_GetBootTime( void )
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
	return boot_time;
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <Interrupt_GetBootTime+0x18>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	ee07 3a90 	vmov	s15, r3
}
 8006920:	eeb0 0a67 	vmov.f32	s0, s15
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	200022cc 	.word	0x200022cc

08006930 <TIM1_CC2_Callback>:

/* ---------------------------------------------------------------
	LED消灯時に次のセンシングパターンに切り替えるコールバック関数
--------------------------------------------------------------- */
void TIM1_CC2_Callback( DMA_HandleTypeDef* hdma )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	switch( sensor_mode ) {
 8006938:	4b14      	ldr	r3, [pc, #80]	; (800698c <TIM1_CC2_Callback+0x5c>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d007      	beq.n	8006950 <TIM1_CC2_Callback+0x20>
 8006940:	2b02      	cmp	r3, #2
 8006942:	d009      	beq.n	8006958 <TIM1_CC2_Callback+0x28>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <TIM1_CC2_Callback+0x30>
		case sensor_all_off_mode:
			sensor_on_pattern = SENSOR_FRONT_ON_PATTERN;
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <TIM1_CC2_Callback+0x60>)
 800694a:	2290      	movs	r2, #144	; 0x90
 800694c:	801a      	strh	r2, [r3, #0]
		break;
 800694e:	e007      	b.n	8006960 <TIM1_CC2_Callback+0x30>

		case sensor_front_on_mode:
			sensor_on_pattern = SENSOR_SIDE_ON_PATTERN;
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <TIM1_CC2_Callback+0x60>)
 8006952:	2260      	movs	r2, #96	; 0x60
 8006954:	801a      	strh	r2, [r3, #0]
		break;
 8006956:	e003      	b.n	8006960 <TIM1_CC2_Callback+0x30>

		case sensor_side_on_mode:
			sensor_on_pattern = SENSOR_ALL_OFF_PATTERN;
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <TIM1_CC2_Callback+0x60>)
 800695a:	2200      	movs	r2, #0
 800695c:	801a      	strh	r2, [r3, #0]
		break;
 800695e:	bf00      	nop
	}
	// 	m次のLED点灯パターンに切替
	sensor_mode = (sensor_mode + 1) % 3;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <TIM1_CC2_Callback+0x5c>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <TIM1_CC2_Callback+0x64>)
 8006968:	fb83 3102 	smull	r3, r1, r3, r2
 800696c:	17d3      	asrs	r3, r2, #31
 800696e:	1ac9      	subs	r1, r1, r3
 8006970:	460b      	mov	r3, r1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	440b      	add	r3, r1
 8006976:	1ad1      	subs	r1, r2, r3
 8006978:	b2ca      	uxtb	r2, r1
 800697a:	4b04      	ldr	r3, [pc, #16]	; (800698c <TIM1_CC2_Callback+0x5c>)
 800697c:	701a      	strb	r2, [r3, #0]
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	200022dc 	.word	0x200022dc
 8006990:	200022d8 	.word	0x200022d8
 8006994:	55555556 	.word	0x55555556

08006998 <Sensor_Initialize>:

/* ---------------------------------------------------------------
	赤外センサの初期設定関数
--------------------------------------------------------------- */
void Sensor_Initialize( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	HAL_DMA_RegisterCallback (htim1.hdma[TIM_DMA_ID_CC2], HAL_DMA_XFER_CPLT_CB_ID, TIM1_CC2_Callback);
 800699c:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <Sensor_Initialize+0x60>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	4a16      	ldr	r2, [pc, #88]	; (80069fc <Sensor_Initialize+0x64>)
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fb fc61 	bl	800226c <HAL_DMA_RegisterCallback>
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC1], (uint32_t)&sensor_on_pattern,  (uint32_t)(&(GPIOA->ODR)), 1);
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <Sensor_Initialize+0x60>)
 80069ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069ae:	4914      	ldr	r1, [pc, #80]	; (8006a00 <Sensor_Initialize+0x68>)
 80069b0:	2301      	movs	r3, #1
 80069b2:	4a14      	ldr	r2, [pc, #80]	; (8006a04 <Sensor_Initialize+0x6c>)
 80069b4:	f7fb fa4e 	bl	8001e54 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC2], (uint32_t)&sensor_off_pattern, (uint32_t)(&(GPIOA->ODR)), 1);
 80069b8:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <Sensor_Initialize+0x60>)
 80069ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80069bc:	4912      	ldr	r1, [pc, #72]	; (8006a08 <Sensor_Initialize+0x70>)
 80069be:	2301      	movs	r3, #1
 80069c0:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <Sensor_Initialize+0x6c>)
 80069c2:	f7fb fa47 	bl	8001e54 <HAL_DMA_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, sizeof(adc_value)/sizeof(uint16_t));
 80069c6:	2205      	movs	r2, #5
 80069c8:	4910      	ldr	r1, [pc, #64]	; (8006a0c <Sensor_Initialize+0x74>)
 80069ca:	4811      	ldr	r0, [pc, #68]	; (8006a10 <Sensor_Initialize+0x78>)
 80069cc:	f7fa fcea 	bl	80013a4 <HAL_ADC_Start_DMA>

	htim1.Instance->DIER |= TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 80069d0:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <Sensor_Initialize+0x60>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <Sensor_Initialize+0x60>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80069de:	60da      	str	r2, [r3, #12]
	__HAL_TIM_MOE_ENABLE(&htim1);
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <Sensor_Initialize+0x60>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <Sensor_Initialize+0x60>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44

	Sensor_StartADC();
 80069f0:	f000 f810 	bl	8006a14 <Sensor_StartADC>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	2001be88 	.word	0x2001be88
 80069fc:	08006931 	.word	0x08006931
 8006a00:	200022d8 	.word	0x200022d8
 8006a04:	40020014 	.word	0x40020014
 8006a08:	200022da 	.word	0x200022da
 8006a0c:	200022e0 	.word	0x200022e0
 8006a10:	2001b31c 	.word	0x2001b31c

08006a14 <Sensor_StartADC>:

/* ---------------------------------------------------------------
	赤外センサによる計測を開始する関数
--------------------------------------------------------------- */
void Sensor_StartADC( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
	sensor_off_pattern = SENSOR_ALL_OFF_PATTERN;
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <Sensor_StartADC+0x3c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	801a      	strh	r2, [r3, #0]
	sensor_on_pattern = SENSOR_ALL_OFF_PATTERN;
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <Sensor_StartADC+0x40>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	801a      	strh	r2, [r3, #0]
	sensor_mode = sensor_all_off_mode;
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <Sensor_StartADC+0x44>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <Sensor_StartADC+0x48>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0201 	mvn.w	r2, #1
 8006a32:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006a34:	2100      	movs	r1, #0
 8006a36:	4809      	ldr	r0, [pc, #36]	; (8006a5c <Sensor_StartADC+0x48>)
 8006a38:	f7fd fb3e 	bl	80040b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	4807      	ldr	r0, [pc, #28]	; (8006a5c <Sensor_StartADC+0x48>)
 8006a40:	f7fd fb3a 	bl	80040b8 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8006a44:	2108      	movs	r1, #8
 8006a46:	4805      	ldr	r0, [pc, #20]	; (8006a5c <Sensor_StartADC+0x48>)
 8006a48:	f7fd fac2 	bl	8003fd0 <HAL_TIM_OC_Start>
}
 8006a4c:	bf00      	nop
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	200022da 	.word	0x200022da
 8006a54:	200022d8 	.word	0x200022d8
 8006a58:	200022dc 	.word	0x200022dc
 8006a5c:	2001be88 	.word	0x2001be88

08006a60 <Sensor_StopADC>:

/* ---------------------------------------------------------------
	赤外センサによる計測を停止する関数
--------------------------------------------------------------- */
void Sensor_StopADC( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8006a64:	2100      	movs	r1, #0
 8006a66:	480e      	ldr	r0, [pc, #56]	; (8006aa0 <Sensor_StopADC+0x40>)
 8006a68:	f7fd fb64 	bl	8004134 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8006a6c:	2104      	movs	r1, #4
 8006a6e:	480c      	ldr	r0, [pc, #48]	; (8006aa0 <Sensor_StopADC+0x40>)
 8006a70:	f7fd fb60 	bl	8004134 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8006a74:	2108      	movs	r1, #8
 8006a76:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <Sensor_StopADC+0x40>)
 8006a78:	f7fd fb5c 	bl	8004134 <HAL_TIM_PWM_Stop>
	HAL_DMA_Abort_IT(htim1.hdma[TIM_DMA_ID_CC2]);
 8006a7c:	4b08      	ldr	r3, [pc, #32]	; (8006aa0 <Sensor_StopADC+0x40>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fb fa47 	bl	8001f14 <HAL_DMA_Abort_IT>
	HAL_DMA_Abort_IT(htim1.hdma[TIM_DMA_ID_CC1]);
 8006a86:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <Sensor_StopADC+0x40>)
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fb fa42 	bl	8001f14 <HAL_DMA_Abort_IT>
	SENSOR_ALL_OFF();
 8006a90:	2200      	movs	r2, #0
 8006a92:	21f0      	movs	r1, #240	; 0xf0
 8006a94:	4803      	ldr	r0, [pc, #12]	; (8006aa4 <Sensor_StopADC+0x44>)
 8006a96:	f7fb fead 	bl	80027f4 <HAL_GPIO_WritePin>
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	2001be88 	.word	0x2001be88
 8006aa4:	40020000 	.word	0x40020000

08006aa8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
//	printf("DMA_complete\r\n");//デバッグ用

//	ADC1->SR &= ~ADC_SR_EOC_Msk;//ADC完了フラグをクリア

	/* a 割り込み処理を書く */
	switch ((sensor_mode+2)%3) {
 8006ab0:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <HAL_ADC_ConvCpltCallback+0x88>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	1c99      	adds	r1, r3, #2
 8006ab6:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <HAL_ADC_ConvCpltCallback+0x8c>)
 8006ab8:	fb83 3201 	smull	r3, r2, r3, r1
 8006abc:	17cb      	asrs	r3, r1, #31
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	0052      	lsls	r2, r2, #1
 8006ac4:	441a      	add	r2, r3
 8006ac6:	1a8b      	subs	r3, r1, r2
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d019      	beq.n	8006b00 <HAL_ADC_ConvCpltCallback+0x58>
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d020      	beq.n	8006b12 <HAL_ADC_ConvCpltCallback+0x6a>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d000      	beq.n	8006ad6 <HAL_ADC_ConvCpltCallback+0x2e>
	break;

	}
	//HAL_GPIO_WritePin(GPIOA,LED2_Pin,GPIO_PIN_SET);

}
 8006ad4:	e026      	b.n	8006b24 <HAL_ADC_ConvCpltCallback+0x7c>
		battery_value 					= adc_value[0];
 8006ad6:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <HAL_ADC_ConvCpltCallback+0x94>)
 8006adc:	801a      	strh	r2, [r3, #0]
		sensor_value[front_left].off 	= adc_value[1];
 8006ade:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006ae0:	885a      	ldrh	r2, [r3, #2]
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006ae4:	801a      	strh	r2, [r3, #0]
		sensor_value[side_left].off		= adc_value[2];
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006ae8:	889a      	ldrh	r2, [r3, #4]
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006aec:	809a      	strh	r2, [r3, #4]
		sensor_value[side_right].off 	= adc_value[3];
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006af0:	88da      	ldrh	r2, [r3, #6]
 8006af2:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006af4:	811a      	strh	r2, [r3, #8]
		sensor_value[front_right].off 	= adc_value[4];
 8006af6:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006af8:	891a      	ldrh	r2, [r3, #8]
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006afc:	819a      	strh	r2, [r3, #12]
	break;
 8006afe:	e011      	b.n	8006b24 <HAL_ADC_ConvCpltCallback+0x7c>
		sensor_value[front_left].on 	= adc_value[1];
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006b02:	885a      	ldrh	r2, [r3, #2]
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006b06:	805a      	strh	r2, [r3, #2]
		sensor_value[front_right].on 	= adc_value[4];
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006b0a:	891a      	ldrh	r2, [r3, #8]
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006b0e:	81da      	strh	r2, [r3, #14]
	break;
 8006b10:	e008      	b.n	8006b24 <HAL_ADC_ConvCpltCallback+0x7c>
		sensor_value[side_left].on		= adc_value[2];
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006b14:	889a      	ldrh	r2, [r3, #4]
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006b18:	80da      	strh	r2, [r3, #6]
		sensor_value[side_right].on 	= adc_value[3];
 8006b1a:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <HAL_ADC_ConvCpltCallback+0x90>)
 8006b1c:	88da      	ldrh	r2, [r3, #6]
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <HAL_ADC_ConvCpltCallback+0x98>)
 8006b20:	815a      	strh	r2, [r3, #10]
	break;
 8006b22:	bf00      	nop
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	200022dc 	.word	0x200022dc
 8006b34:	55555556 	.word	0x55555556
 8006b38:	200022e0 	.word	0x200022e0
 8006b3c:	200022ea 	.word	0x200022ea
 8006b40:	200022ec 	.word	0x200022ec

08006b44 <Sensor_GetBatteryValue>:

/* ---------------------------------------------------------------
	バッテリのAD値を取得する関数
--------------------------------------------------------------- */
uint16_t Sensor_GetBatteryValue( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
	return( battery_value );
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <Sensor_GetBatteryValue+0x14>)
 8006b4a:	881b      	ldrh	r3, [r3, #0]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	200022ea 	.word	0x200022ea

08006b5c <Sensor_GetValue>:

/* ---------------------------------------------------------------
	赤外センサの偏差値を取得する関数
--------------------------------------------------------------- */
int16_t Sensor_GetValue( uint8_t dir )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
	if( 0 <= dir || dir <= 3 ) {
		return sensor_value[dir].on - sensor_value[dir].off;
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <Sensor_GetValue+0x30>)
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	885a      	ldrh	r2, [r3, #2]
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	4906      	ldr	r1, [pc, #24]	; (8006b8c <Sensor_GetValue+0x30>)
 8006b74:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b21b      	sxth	r3, r3
	} else {
		return -1;
	}
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	200022ec 	.word	0x200022ec

08006b90 <SensorValue2length>:

/* ---------------------------------------------------------------
	赤外センサの偏差値から距離に変換する関数
--------------------------------------------------------------- */
double SensorValue2length( uint8_t dir )
{
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b08b      	sub	sp, #44	; 0x2c
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]

double length_tmp = 0;
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	f04f 0400 	mov.w	r4, #0
 8006ba2:	e9c7 3408 	strd	r3, r4, [r7, #32]
double sensor_tmp = (double)Sensor_GetValue(dir);
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ffd7 	bl	8006b5c <Sensor_GetValue>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7f9 fcdf 	bl	8000574 <__aeabi_i2d>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	e9c7 3402 	strd	r3, r4, [r7, #8]

//m線形近似　a*ln(AD) -b
double a = 0;
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	f04f 0400 	mov.w	r4, #0
 8006bc6:	e9c7 3406 	strd	r3, r4, [r7, #24]
double b = 0;
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	f04f 0400 	mov.w	r4, #0
 8006bd2:	e9c7 3404 	strd	r3, r4, [r7, #16]

if(sensor_tmp <= 100){
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	4b35      	ldr	r3, [pc, #212]	; (8006cb0 <SensorValue2length+0x120>)
 8006bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006be0:	f7f9 ffae 	bl	8000b40 <__aeabi_dcmple>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <SensorValue2length+0x62>
	return 0.09;
 8006bea:	a429      	add	r4, pc, #164	; (adr r4, 8006c90 <SensorValue2length+0x100>)
 8006bec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006bf0:	e044      	b.n	8006c7c <SensorValue2length+0xec>
}

else{

	//m 左前
	if(dir == 0){
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d109      	bne.n	8006c0c <SensorValue2length+0x7c>
		a = 0.7;
 8006bf8:	a427      	add	r4, pc, #156	; (adr r4, 8006c98 <SensorValue2length+0x108>)
 8006bfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006bfe:	e9c7 3406 	strd	r3, r4, [r7, #24]
		b = 0.0847;
 8006c02:	a427      	add	r4, pc, #156	; (adr r4, 8006ca0 <SensorValue2length+0x110>)
 8006c04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006c08:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	//m 右前
	if(dir == 3){
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d109      	bne.n	8006c26 <SensorValue2length+0x96>
		a = 0.7;
 8006c12:	a421      	add	r4, pc, #132	; (adr r4, 8006c98 <SensorValue2length+0x108>)
 8006c14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006c18:	e9c7 3406 	strd	r3, r4, [r7, #24]
		b = 0.082;
 8006c1c:	a422      	add	r4, pc, #136	; (adr r4, 8006ca8 <SensorValue2length+0x118>)
 8006c1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006c22:	e9c7 3404 	strd	r3, r4, [r7, #16]
		}

	length_tmp = a / log(sensor_tmp) - b ;
 8006c26:	ed97 0b02 	vldr	d0, [r7, #8]
 8006c2a:	f00c f90f 	bl	8012e4c <log>
 8006c2e:	ec54 3b10 	vmov	r3, r4, d0
 8006c32:	461a      	mov	r2, r3
 8006c34:	4623      	mov	r3, r4
 8006c36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c3a:	f7f9 fe2f 	bl	800089c <__aeabi_ddiv>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	4618      	mov	r0, r3
 8006c44:	4621      	mov	r1, r4
 8006c46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c4a:	f7f9 fb45 	bl	80002d8 <__aeabi_dsub>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	460c      	mov	r4, r1
 8006c52:	e9c7 3408 	strd	r3, r4, [r7, #32]

	if(length_tmp < 0) //mリミット処理
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c62:	f7f9 ff63 	bl	8000b2c <__aeabi_dcmplt>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <SensorValue2length+0xe8>
	{
		length_tmp = 0;
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	f04f 0400 	mov.w	r4, #0
 8006c74:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}

	return length_tmp;
 8006c78:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006c7c:	ec44 3b17 	vmov	d7, r3, r4


}

}
 8006c80:	eeb0 0a47 	vmov.f32	s0, s14
 8006c84:	eef0 0a67 	vmov.f32	s1, s15
 8006c88:	372c      	adds	r7, #44	; 0x2c
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd90      	pop	{r4, r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	70a3d70a 	.word	0x70a3d70a
 8006c94:	3fb70a3d 	.word	0x3fb70a3d
 8006c98:	66666666 	.word	0x66666666
 8006c9c:	3fe66666 	.word	0x3fe66666
 8006ca0:	31f8a090 	.word	0x31f8a090
 8006ca4:	3fb5aee6 	.word	0x3fb5aee6
 8006ca8:	b645a1cb 	.word	0xb645a1cb
 8006cac:	3fb4fdf3 	.word	0x3fb4fdf3
 8006cb0:	40590000 	.word	0x40590000

08006cb4 <Sensor_DebugPrintf>:

/* ---------------------------------------------------------------
	デバッグ用
--------------------------------------------------------------- */
void Sensor_DebugPrintf( void )
{
 8006cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb6:	b08f      	sub	sp, #60	; 0x3c
 8006cb8:	af0a      	add	r7, sp, #40	; 0x28
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
			sensor_value[3].on - sensor_value[3].off, sensor_value[3].on, sensor_value[3].off,
 8006cba:	4b22      	ldr	r3, [pc, #136]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cbc:	89db      	ldrh	r3, [r3, #14]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cc2:	899b      	ldrh	r3, [r3, #12]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cc4:	1ad4      	subs	r4, r2, r3
			sensor_value[3].on - sensor_value[3].off, sensor_value[3].on, sensor_value[3].off,
 8006cc6:	4b1f      	ldr	r3, [pc, #124]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cc8:	89db      	ldrh	r3, [r3, #14]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cca:	469c      	mov	ip, r3
			sensor_value[3].on - sensor_value[3].off, sensor_value[3].on, sensor_value[3].off,
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cce:	899b      	ldrh	r3, [r3, #12]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cd0:	469e      	mov	lr, r3
			sensor_value[2].on - sensor_value[2].off, sensor_value[2].on, sensor_value[2].off,
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cd4:	895b      	ldrh	r3, [r3, #10]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cda:	891b      	ldrh	r3, [r3, #8]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cdc:	1ad3      	subs	r3, r2, r3
			sensor_value[2].on - sensor_value[2].off, sensor_value[2].on, sensor_value[2].off,
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006ce0:	8952      	ldrh	r2, [r2, #10]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006ce2:	4615      	mov	r5, r2
			sensor_value[2].on - sensor_value[2].off, sensor_value[2].on, sensor_value[2].off,
 8006ce4:	4a17      	ldr	r2, [pc, #92]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006ce6:	8912      	ldrh	r2, [r2, #8]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006ce8:	4616      	mov	r6, r2
			sensor_value[1].on - sensor_value[1].off, sensor_value[1].on, sensor_value[1].off,
 8006cea:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cec:	88d2      	ldrh	r2, [r2, #6]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cf2:	8892      	ldrh	r2, [r2, #4]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cf4:	1a8a      	subs	r2, r1, r2
			sensor_value[1].on - sensor_value[1].off, sensor_value[1].on, sensor_value[1].off,
 8006cf6:	4913      	ldr	r1, [pc, #76]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cf8:	88c9      	ldrh	r1, [r1, #6]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006cfa:	60f9      	str	r1, [r7, #12]
			sensor_value[1].on - sensor_value[1].off, sensor_value[1].on, sensor_value[1].off,
 8006cfc:	4911      	ldr	r1, [pc, #68]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006cfe:	8889      	ldrh	r1, [r1, #4]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006d00:	60b9      	str	r1, [r7, #8]
			sensor_value[0].on - sensor_value[0].off, sensor_value[0].on, sensor_value[0].off );
 8006d02:	4910      	ldr	r1, [pc, #64]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006d04:	8849      	ldrh	r1, [r1, #2]
 8006d06:	4608      	mov	r0, r1
 8006d08:	490e      	ldr	r1, [pc, #56]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006d0a:	8809      	ldrh	r1, [r1, #0]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006d0c:	1a41      	subs	r1, r0, r1
			sensor_value[0].on - sensor_value[0].off, sensor_value[0].on, sensor_value[0].off );
 8006d0e:	480d      	ldr	r0, [pc, #52]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006d10:	8840      	ldrh	r0, [r0, #2]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006d12:	6078      	str	r0, [r7, #4]
			sensor_value[0].on - sensor_value[0].off, sensor_value[0].on, sensor_value[0].off );
 8006d14:	480b      	ldr	r0, [pc, #44]	; (8006d44 <Sensor_DebugPrintf+0x90>)
 8006d16:	8800      	ldrh	r0, [r0, #0]
	printf( "%5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d), %5d (%4d - %3d)\r\n",
 8006d18:	9008      	str	r0, [sp, #32]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	9007      	str	r0, [sp, #28]
 8006d1e:	9106      	str	r1, [sp, #24]
 8006d20:	68b8      	ldr	r0, [r7, #8]
 8006d22:	9005      	str	r0, [sp, #20]
 8006d24:	68f9      	ldr	r1, [r7, #12]
 8006d26:	9104      	str	r1, [sp, #16]
 8006d28:	9203      	str	r2, [sp, #12]
 8006d2a:	9602      	str	r6, [sp, #8]
 8006d2c:	9501      	str	r5, [sp, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4673      	mov	r3, lr
 8006d32:	4662      	mov	r2, ip
 8006d34:	4621      	mov	r1, r4
 8006d36:	4804      	ldr	r0, [pc, #16]	; (8006d48 <Sensor_DebugPrintf+0x94>)
 8006d38:	f008 fcc2 	bl	800f6c0 <iprintf>

}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d44:	200022ec 	.word	0x200022ec
 8006d48:	080132ec 	.word	0x080132ec

08006d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  int16_t i = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	81fb      	strh	r3, [r7, #14]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d56:	f7fa fa4d 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d5a:	f000 f999 	bl	8007090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d5e:	f7ff fa19 	bl	8006194 <MX_GPIO_Init>
  MX_DMA_Init();
 8006d62:	f7fe ff37 	bl	8005bd4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006d66:	f007 fb5f 	bl	800e428 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8006d6a:	f007 f8fb 	bl	800df64 <MX_TIM4_Init>
  MX_SPI2_Init();
 8006d6e:	f005 fac3 	bl	800c2f8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8006d72:	f7fe fdb3 	bl	80058dc <MX_ADC1_Init>
  MX_TIM2_Init();
 8006d76:	f007 f84d 	bl	800de14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006d7a:	f007 f89f 	bl	800debc <MX_TIM3_Init>
  MX_TIM6_Init();
 8006d7e:	f007 f989 	bl	800e094 <MX_TIM6_Init>
  MX_TIM1_Init();
 8006d82:	f006 ff81 	bl	800dc88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* m 各関数初期化　*/
  Motor_Initialize(); 			/*m モータ用タイマ設定*/
 8006d86:	f005 f95f 	bl	800c048 <Motor_Initialize>
  Communication_Initialize( );	/*printf,scanf用の設定*/
 8006d8a:	f7fe fedd 	bl	8005b48 <Communication_Initialize>
  IMU_Initialize();				/*IMU初期設定*/
 8006d8e:	f7ff fbc7 	bl	8006520 <IMU_Initialize>
  Encoder_Initialize();			/*Encoderタイマ設定、位相初期化*/
 8006d92:	f7fe ff6d 	bl	8005c70 <Encoder_Initialize>
  Interrupt_Initialize( );		/*interrupt処理用タイマ(TIM6)初期化*/
 8006d96:	f7ff fd45 	bl	8006824 <Interrupt_Initialize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(stanby_mode == 0)//mスタンバイモードでないとき
 8006d9a:	4bab      	ldr	r3, [pc, #684]	; (8007048 <main+0x2fc>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d145      	bne.n	8006e2e <main+0xe2>
	  {
		  Sensor_StopADC();
 8006da2:	f7ff fe5d 	bl	8006a60 <Sensor_StopADC>
		  mode_count = 0;			//modeカウンタ初期化
 8006da6:	4ba9      	ldr	r3, [pc, #676]	; (800704c <main+0x300>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
		  while(stanby_mode == 0){	//stanby_modeに入るまでモード選択可能
 8006dac:	e007      	b.n	8006dbe <main+0x72>
		  mode_select();
 8006dae:	f004 fab3 	bl	800b318 <mode_select>
//		  printf("mode_number =%d\r\n", mode_number);
		  stanby_mode = modechangejud_stanby();	//stanby_mode 移行判断
 8006db2:	f004 fc09 	bl	800b5c8 <modechangejud_stanby>
 8006db6:	4603      	mov	r3, r0
 8006db8:	461a      	mov	r2, r3
 8006dba:	4ba3      	ldr	r3, [pc, #652]	; (8007048 <main+0x2fc>)
 8006dbc:	701a      	strb	r2, [r3, #0]
		  while(stanby_mode == 0){	//stanby_modeに入るまでモード選択可能
 8006dbe:	4ba2      	ldr	r3, [pc, #648]	; (8007048 <main+0x2fc>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f3      	beq.n	8006dae <main+0x62>
		  }
		  for(int i=0; i<2; i++){ //stanby移行時、LEDを2回点灯させ、IRセンサ起動
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	e016      	b.n	8006dfa <main+0xae>
		  HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8006dd2:	489f      	ldr	r0, [pc, #636]	; (8007050 <main+0x304>)
 8006dd4:	f7fb fd0e 	bl	80027f4 <HAL_GPIO_WritePin>
		  HAL_Delay(700);
 8006dd8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8006ddc:	f7fa fa7c 	bl	80012d8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8006de6:	489a      	ldr	r0, [pc, #616]	; (8007050 <main+0x304>)
 8006de8:	f7fb fd04 	bl	80027f4 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8006dec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006df0:	f7fa fa72 	bl	80012d8 <HAL_Delay>
		  for(int i=0; i<2; i++){ //stanby移行時、LEDを2回点灯させ、IRセンサ起動
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	dde5      	ble.n	8006dcc <main+0x80>
		  }

		  Sensor_Initialize( );	//irsensor計測開始
 8006e00:	f7ff fdca 	bl	8006998 <Sensor_Initialize>

		  /*m右前センサをモード開始のスイッチとする。*/
		  while(1)
		  {
			  if( Sensor_GetValue(3) >= 1500)
 8006e04:	2003      	movs	r0, #3
 8006e06:	f7ff fea9 	bl	8006b5c <Sensor_GetValue>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f240 53db 	movw	r3, #1499	; 0x5db
 8006e12:	429a      	cmp	r2, r3
 8006e14:	ddf6      	ble.n	8006e04 <main+0xb8>
				{
				  HAL_Delay(500);
 8006e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e1a:	f7fa fa5d 	bl	80012d8 <HAL_Delay>
					  break;
 8006e1e:	bf00      	nop
				}
		  }

		  mode_number_int = mode_number; //m 各モードナンバごとの割り込みフラグ
 8006e20:	4b8c      	ldr	r3, [pc, #560]	; (8007054 <main+0x308>)
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	4b8c      	ldr	r3, [pc, #560]	; (8007058 <main+0x30c>)
 8006e26:	701a      	strb	r2, [r3, #0]
		  mode_number = 0;//m モードナンバの初期化
 8006e28:	4b8a      	ldr	r3, [pc, #552]	; (8007054 <main+0x308>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
	  }

	  /*x ここからモードごとの処理に移行　 x*/
	  switch(mode_number_int){
 8006e2e:	4b8a      	ldr	r3, [pc, #552]	; (8007058 <main+0x30c>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	f200 80dc 	bhi.w	8006ff0 <main+0x2a4>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <main+0xf4>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e81 	.word	0x08006e81
 8006e44:	08006e87 	.word	0x08006e87
 8006e48:	08006e93 	.word	0x08006e93
 8006e4c:	08006ebd 	.word	0x08006ebd
 8006e50:	08006ee7 	.word	0x08006ee7
 8006e54:	08006f0b 	.word	0x08006f0b
 8006e58:	08006f93 	.word	0x08006f93
 8006e5c:	08006fa9 	.word	0x08006fa9
 8006e60:	08006ff1 	.word	0x08006ff1
 8006e64:	08006ff1 	.word	0x08006ff1
 8006e68:	08006ff1 	.word	0x08006ff1
 8006e6c:	08006ff1 	.word	0x08006ff1
 8006e70:	08006ff1 	.word	0x08006ff1
 8006e74:	08006ff1 	.word	0x08006ff1
 8006e78:	08006ff1 	.word	0x08006ff1
 8006e7c:	08006fb5 	.word	0x08006fb5

	  case 0://m データ吐き出し用
//		  printf("mode0_start\r\n");
		  data_read();
 8006e80:	f004 fd3c 	bl	800b8fc <data_read>
	  break;
 8006e84:	e0b4      	b.n	8006ff0 <main+0x2a4>

	  case 1:
//		  printf("mode1_start\r\n");
		  accel_dir_flg = 1; //m減速モード
 8006e86:	4b75      	ldr	r3, [pc, #468]	; (800705c <main+0x310>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
		  fornt_wall_calibrate();
 8006e8c:	f006 fe18 	bl	800dac0 <fornt_wall_calibrate>
//		  fornt_wall_calibrate();//壁補正
//		  turn_clk_90();
//		  fornt_wall_calibrate();
//		  turn_clk_90();
//		  HAL_Delay(1000);
		  break;
 8006e90:	e0ae      	b.n	8006ff0 <main+0x2a4>

	  case 2:
//		  printf("mode2_start\r\n");
		  accel_dir_flg = 1; //m減速モード
 8006e92:	4b72      	ldr	r3, [pc, #456]	; (800705c <main+0x310>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	701a      	strb	r2, [r3, #0]
		  move_dir_flg = 0;////m前進モード
 8006e98:	4b71      	ldr	r3, [pc, #452]	; (8007060 <main+0x314>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
		  real_distance_m_clr();
 8006e9e:	f006 faa1 	bl	800d3e4 <real_distance_m_clr>
		  real_distance_w_clr();
 8006ea2:	f006 faad 	bl	800d400 <real_distance_w_clr>
		  log_init();
 8006ea6:	f004 fba7 	bl	800b5f8 <log_init>
		  target_distance_m_set(0.45);
 8006eaa:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8007064 <main+0x318>
 8006eae:	f006 fab5 	bl	800d41c <target_distance_m_set>
		  HAL_Delay(4000);
 8006eb2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006eb6:	f7fa fa0f 	bl	80012d8 <HAL_Delay>
		  break;
 8006eba:	e099      	b.n	8006ff0 <main+0x2a4>

	  case 3:
//		  printf("mode3_start\r\n");
		  accel_dir_flg = 1; //m減速モード
 8006ebc:	4b67      	ldr	r3, [pc, #412]	; (800705c <main+0x310>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
		  rotation_dir_flg = 0;////m反時計モード
 8006ec2:	4b69      	ldr	r3, [pc, #420]	; (8007068 <main+0x31c>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]

		  real_distance_m_clr();
 8006ec8:	f006 fa8c 	bl	800d3e4 <real_distance_m_clr>
		  real_distance_w_clr();
 8006ecc:	f006 fa98 	bl	800d400 <real_distance_w_clr>
		  log_init();
 8006ed0:	f004 fb92 	bl	800b5f8 <log_init>
		  target_distance_w_set(2*PI);
 8006ed4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800706c <main+0x320>
 8006ed8:	f006 fab8 	bl	800d44c <target_distance_w_set>
		  HAL_Delay(20000);
 8006edc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006ee0:	f7fa f9fa 	bl	80012d8 <HAL_Delay>

//		  target_distance_w_set(PI/2);
//		  HAL_Delay(500);
//		  target_distance_m_set(0.18);
//		  HAL_Delay(1000);
		  break;
 8006ee4:	e084      	b.n	8006ff0 <main+0x2a4>

	  case 4:
//		  Motor_SetDuty_Right(60);
//		  Motor_SetDuty_Left(-60);
		  HAL_Delay(500);
 8006ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006eea:	f7fa f9f5 	bl	80012d8 <HAL_Delay>
		  log_init();
 8006eee:	f004 fb83 	bl	800b5f8 <log_init>
//			  Motor_SetDuty_Right(i);
//			  Motor_SetDuty_Left(-i);
//			  HAL_Delay(10);
//		  }

		  Motor_SetDuty_Right(100);
 8006ef2:	2064      	movs	r0, #100	; 0x64
 8006ef4:	f005 f948 	bl	800c188 <Motor_SetDuty_Right>
		  Motor_SetDuty_Left(-100);
 8006ef8:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8006efc:	f005 f8ba 	bl	800c074 <Motor_SetDuty_Left>

		  HAL_Delay(2000);
 8006f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f04:	f7fa f9e8 	bl	80012d8 <HAL_Delay>
//		  printf("mode4_start\r\n");
		  break;
 8006f08:	e072      	b.n	8006ff0 <main+0x2a4>

	  case 5:
//		  printf("mode5_start\r\n");
		  Motor_SetDuty_Right(60);
 8006f0a:	203c      	movs	r0, #60	; 0x3c
 8006f0c:	f005 f93c 	bl	800c188 <Motor_SetDuty_Right>
		  Motor_SetDuty_Left(60);
 8006f10:	203c      	movs	r0, #60	; 0x3c
 8006f12:	f005 f8af 	bl	800c074 <Motor_SetDuty_Left>
		  HAL_Delay(200);
 8006f16:	20c8      	movs	r0, #200	; 0xc8
 8006f18:	f7fa f9de 	bl	80012d8 <HAL_Delay>
		  log_init();
 8006f1c:	f004 fb6c 	bl	800b5f8 <log_init>
		  for(i=60; i<=200; i += 10){
 8006f20:	233c      	movs	r3, #60	; 0x3c
 8006f22:	81fb      	strh	r3, [r7, #14]
 8006f24:	e010      	b.n	8006f48 <main+0x1fc>
			  Motor_SetDuty_Right(i);
 8006f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f005 f92c 	bl	800c188 <Motor_SetDuty_Right>
			  Motor_SetDuty_Left(i);
 8006f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f005 f89d 	bl	800c074 <Motor_SetDuty_Left>
			  HAL_Delay(10);
 8006f3a:	200a      	movs	r0, #10
 8006f3c:	f7fa f9cc 	bl	80012d8 <HAL_Delay>
		  for(i=60; i<=200; i += 10){
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	330a      	adds	r3, #10
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	81fb      	strh	r3, [r7, #14]
 8006f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f4c:	2bc8      	cmp	r3, #200	; 0xc8
 8006f4e:	ddea      	ble.n	8006f26 <main+0x1da>
		  }
		  HAL_Delay(500);
 8006f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f54:	f7fa f9c0 	bl	80012d8 <HAL_Delay>
		  for(i=200; i>=60; i -= 10){
 8006f58:	23c8      	movs	r3, #200	; 0xc8
 8006f5a:	81fb      	strh	r3, [r7, #14]
 8006f5c:	e010      	b.n	8006f80 <main+0x234>
			  Motor_SetDuty_Right(i);
 8006f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f005 f910 	bl	800c188 <Motor_SetDuty_Right>
			  Motor_SetDuty_Left(i);
 8006f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f005 f881 	bl	800c074 <Motor_SetDuty_Left>
			  HAL_Delay(10);
 8006f72:	200a      	movs	r0, #10
 8006f74:	f7fa f9b0 	bl	80012d8 <HAL_Delay>
		  for(i=200; i>=60; i -= 10){
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	3b0a      	subs	r3, #10
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	81fb      	strh	r3, [r7, #14]
 8006f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006f84:	2b3b      	cmp	r3, #59	; 0x3b
 8006f86:	dcea      	bgt.n	8006f5e <main+0x212>
		  }
		  HAL_Delay(500);
 8006f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f8c:	f7fa f9a4 	bl	80012d8 <HAL_Delay>

		  break;
 8006f90:	e02e      	b.n	8006ff0 <main+0x2a4>

	  case 6:
//		  printf("mode6_start\r\n");
		  accel_dir_flg = 1; //m減速モード
 8006f92:	4b32      	ldr	r3, [pc, #200]	; (800705c <main+0x310>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	701a      	strb	r2, [r3, #0]
		  correction_mode = 0;
 8006f98:	4b35      	ldr	r3, [pc, #212]	; (8007070 <main+0x324>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(10000);
 8006f9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fa2:	f7fa f999 	bl	80012d8 <HAL_Delay>

		  break;
 8006fa6:	e023      	b.n	8006ff0 <main+0x2a4>

	  case 7:
//		  printf("mode7_start\r\n");
//		  correction_mode = 1;
		  accel_dir_flg = 1; //m減速モード
 8006fa8:	4b2c      	ldr	r3, [pc, #176]	; (800705c <main+0x310>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	701a      	strb	r2, [r3, #0]
		  module_test( );
 8006fae:	f004 fe6f 	bl	800bc90 <module_test>
		  break;
 8006fb2:	e01d      	b.n	8006ff0 <main+0x2a4>
		  break;

	  /*m迷路探索*/
	  case 15:
		  /*m迷路データの初期化*/
		  maze_init(maze_y_size, maze_x_size, m_wall_tmp, m_search_tmp);
 8006fb4:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <main+0x328>)
 8006fb6:	7818      	ldrb	r0, [r3, #0]
 8006fb8:	4b2f      	ldr	r3, [pc, #188]	; (8007078 <main+0x32c>)
 8006fba:	7819      	ldrb	r1, [r3, #0]
 8006fbc:	4b2f      	ldr	r3, [pc, #188]	; (800707c <main+0x330>)
 8006fbe:	4a30      	ldr	r2, [pc, #192]	; (8007080 <main+0x334>)
 8006fc0:	f000 f8d7 	bl	8007172 <maze_init>

		  /*m探索モードで走行*/
		  run_mode = search_mode;
 8006fc4:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <main+0x338>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
		  maze_solve(m_wall_tmp, m_search_tmp, maze_y_size, maze_x_size, maze_goal, goal_size, run_mode);
 8006fca:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <main+0x328>)
 8006fcc:	7819      	ldrb	r1, [r3, #0]
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <main+0x32c>)
 8006fd0:	7818      	ldrb	r0, [r3, #0]
 8006fd2:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <main+0x33c>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <main+0x338>)
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	9202      	str	r2, [sp, #8]
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	4b2b      	ldr	r3, [pc, #172]	; (800708c <main+0x340>)
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	4925      	ldr	r1, [pc, #148]	; (800707c <main+0x330>)
 8006fe8:	4825      	ldr	r0, [pc, #148]	; (8007080 <main+0x334>)
 8006fea:	f003 ffdb 	bl	800afa4 <maze_solve>

		  break;
 8006fee:	bf00      	nop



	  }

	  Sensor_StopADC();			//m sennsor停止
 8006ff0:	f7ff fd36 	bl	8006a60 <Sensor_StopADC>
	  stanby_mode = 0;			//m　モード選択処理に移行
 8006ff4:	4b14      	ldr	r3, [pc, #80]	; (8007048 <main+0x2fc>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
	  mode_number_int = 0;		//m　モードごとの割り込みフラグクリア
 8006ffa:	4b17      	ldr	r3, [pc, #92]	; (8007058 <main+0x30c>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
	  Motor_SetDuty_Right(0);	//motor_r 停止
 8007000:	2000      	movs	r0, #0
 8007002:	f005 f8c1 	bl	800c188 <Motor_SetDuty_Right>
	  Motor_SetDuty_Left(0);	//motor_l 停止
 8007006:	2000      	movs	r0, #0
 8007008:	f005 f834 	bl	800c074 <Motor_SetDuty_Left>

	  for(int i=0; i<3; i++){ //m モード処理終了時、LEDを3回点灯
 800700c:	2300      	movs	r3, #0
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	e016      	b.n	8007040 <main+0x2f4>
	  HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8007012:	2201      	movs	r2, #1
 8007014:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8007018:	480d      	ldr	r0, [pc, #52]	; (8007050 <main+0x304>)
 800701a:	f7fb fbeb 	bl	80027f4 <HAL_GPIO_WritePin>
	  HAL_Delay(700);
 800701e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8007022:	f7fa f959 	bl	80012d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8007026:	2200      	movs	r2, #0
 8007028:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800702c:	4808      	ldr	r0, [pc, #32]	; (8007050 <main+0x304>)
 800702e:	f7fb fbe1 	bl	80027f4 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 8007032:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007036:	f7fa f94f 	bl	80012d8 <HAL_Delay>
	  for(int i=0; i<3; i++){ //m モード処理終了時、LEDを3回点灯
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3301      	adds	r3, #1
 800703e:	607b      	str	r3, [r7, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b02      	cmp	r3, #2
 8007044:	dde5      	ble.n	8007012 <main+0x2c6>
	  if(stanby_mode == 0)//mスタンバイモードでないとき
 8007046:	e6a8      	b.n	8006d9a <main+0x4e>
 8007048:	20004b05 	.word	0x20004b05
 800704c:	20004b06 	.word	0x20004b06
 8007050:	40020000 	.word	0x40020000
 8007054:	20004b04 	.word	0x20004b04
 8007058:	200022fc 	.word	0x200022fc
 800705c:	2001b2a6 	.word	0x2001b2a6
 8007060:	2001b2a4 	.word	0x2001b2a4
 8007064:	3ee66666 	.word	0x3ee66666
 8007068:	2001b2a5 	.word	0x2001b2a5
 800706c:	40c90fda 	.word	0x40c90fda
 8007070:	2001b2a8 	.word	0x2001b2a8
 8007074:	20000007 	.word	0x20000007
 8007078:	20000006 	.word	0x20000006
 800707c:	2001b7c4 	.word	0x2001b7c4
 8007080:	2001b3c4 	.word	0x2001b3c4
 8007084:	200022fd 	.word	0x200022fd
 8007088:	20000008 	.word	0x20000008
 800708c:	2000000c 	.word	0x2000000c

08007090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b094      	sub	sp, #80	; 0x50
 8007094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007096:	f107 031c 	add.w	r3, r7, #28
 800709a:	2234      	movs	r2, #52	; 0x34
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f007 fc1f 	bl	800e8e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80070a4:	f107 0308 	add.w	r3, r7, #8
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	609a      	str	r2, [r3, #8]
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80070b4:	2300      	movs	r3, #0
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	4b28      	ldr	r3, [pc, #160]	; (800715c <SystemClock_Config+0xcc>)
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <SystemClock_Config+0xcc>)
 80070be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c2:	6413      	str	r3, [r2, #64]	; 0x40
 80070c4:	4b25      	ldr	r3, [pc, #148]	; (800715c <SystemClock_Config+0xcc>)
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80070d0:	2300      	movs	r3, #0
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4b22      	ldr	r3, [pc, #136]	; (8007160 <SystemClock_Config+0xd0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a21      	ldr	r2, [pc, #132]	; (8007160 <SystemClock_Config+0xd0>)
 80070da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <SystemClock_Config+0xd0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80070ec:	2302      	movs	r3, #2
 80070ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80070f0:	2301      	movs	r3, #1
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80070f4:	2310      	movs	r3, #16
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80070f8:	2302      	movs	r3, #2
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80070fc:	2300      	movs	r3, #0
 80070fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007100:	2310      	movs	r3, #16
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007104:	23c0      	movs	r3, #192	; 0xc0
 8007106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007108:	2302      	movs	r3, #2
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800710c:	2302      	movs	r3, #2
 800710e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007110:	2302      	movs	r3, #2
 8007112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007114:	f107 031c 	add.w	r3, r7, #28
 8007118:	4618      	mov	r0, r3
 800711a:	f7fb fd4d 	bl	8002bb8 <HAL_RCC_OscConfig>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007124:	f000 f81e 	bl	8007164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007128:	230f      	movs	r3, #15
 800712a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800712c:	2302      	movs	r3, #2
 800712e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	2103      	movs	r1, #3
 8007144:	4618      	mov	r0, r3
 8007146:	f7fb fb6f 	bl	8002828 <HAL_RCC_ClockConfig>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8007150:	f000 f808 	bl	8007164 <Error_Handler>
  }
}
 8007154:	bf00      	nop
 8007156:	3750      	adds	r7, #80	; 0x50
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40023800 	.word	0x40023800
 8007160:	40007000 	.word	0x40007000

08007164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007168:	bf00      	nop
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <maze_init>:
 * Return Type  : void
 */
void maze_init(unsigned char maze_row_size, unsigned char maze_col_size,
               unsigned char maze_wall[1024], unsigned char maze_wall_search
               [1024])
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b08a      	sub	sp, #40	; 0x28
 8007176:	af00      	add	r7, sp, #0
 8007178:	60ba      	str	r2, [r7, #8]
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
 8007180:	460b      	mov	r3, r1
 8007182:	73bb      	strb	r3, [r7, #14]

  /* 方角定義 */
  /* 迷路情報、探索済情報初期化 */
  /*  maze_wall = uint8(zeros(maze_col_size-1,maze_row_size-1)); */
  /*  maze_wall_search = uint8(zeros(maze_col_size-1,maze_row_size-1)); */
  memset(&maze_wall[0], 0, sizeof(unsigned char) << 10);
 8007184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007188:	2100      	movs	r1, #0
 800718a:	68b8      	ldr	r0, [r7, #8]
 800718c:	f007 fba9 	bl	800e8e2 <memset>

  /* 既知となる外周4辺の壁情報を入力、探索済みとする。 */
  qY = maze_row_size - 1U;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	3b01      	subs	r3, #1
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
  if (qY > maze_row_size) {
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	429a      	cmp	r2, r3
 800719c:	d901      	bls.n	80071a2 <maze_init+0x30>
    qY = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  i0 = (int)qY;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < i0; i++) {
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	e076      	b.n	800729a <maze_init+0x128>
    qY = maze_col_size - 1U;
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (qY > maze_col_size) {
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d901      	bls.n	80071be <maze_init+0x4c>
      qY = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    i1 = (int)qY;
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	617b      	str	r3, [r7, #20]
    for (n = 0; n < i1; n++) {
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	e061      	b.n	800728c <maze_init+0x11a>
      /* 北側 */
      qY = maze_row_size - 1U;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (qY > maze_row_size) {
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d901      	bls.n	80071da <maze_init+0x68>
        qY = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if (1 + i == (int)qY) {
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d10f      	bne.n	8007204 <maze_init+0x92>
        maze_wall_tmp = i + (n << 5);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	015b      	lsls	r3, r3, #5
 80071e8:	6a3a      	ldr	r2, [r7, #32]
 80071ea:	4413      	add	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        maze_wall[maze_wall_tmp] |= 1;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	4413      	add	r3, r2
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	440b      	add	r3, r1
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]
      }

      /* 東側 */
      qY = maze_col_size - 1U;
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	3b01      	subs	r3, #1
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
      if (qY > maze_col_size) {
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720e:	429a      	cmp	r2, r3
 8007210:	d901      	bls.n	8007216 <maze_init+0xa4>
        qY = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if (1 + n == (int)qY) {
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	429a      	cmp	r2, r3
 800721e:	d112      	bne.n	8007246 <maze_init+0xd4>
        maze_wall[i + (n << 5)] = (unsigned char)(maze_wall[i + (n << 5)] | 2);
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	4413      	add	r3, r2
 8007228:	461a      	mov	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	0159      	lsls	r1, r3, #5
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	440b      	add	r3, r1
 8007238:	4619      	mov	r1, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	440b      	add	r3, r1
 800723e:	f042 0202 	orr.w	r2, r2, #2
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
      }

      /* 南側 */
      if (1 + i == 1) {
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10e      	bne.n	800726a <maze_init+0xf8>
        maze_wall[n << 5] = (unsigned char)(maze_wall[n << 5] | 4);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	015b      	lsls	r3, r3, #5
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4413      	add	r3, r2
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	015b      	lsls	r3, r3, #5
 800725c:	4619      	mov	r1, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	440b      	add	r3, r1
 8007262:	f042 0204 	orr.w	r2, r2, #4
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	701a      	strb	r2, [r3, #0]
      }

      /* 西側 */
      if (1 + n == 1) {
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <maze_init+0x114>
        maze_wall[i] = (unsigned char)(maze_wall[i] | 8);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	440b      	add	r3, r1
 800727e:	f042 0208 	orr.w	r2, r2, #8
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < i1; n++) {
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	429a      	cmp	r2, r3
 8007292:	db99      	blt.n	80071c8 <maze_init+0x56>
  for (i = 0; i < i0; i++) {
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	3301      	adds	r3, #1
 8007298:	623b      	str	r3, [r7, #32]
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	429a      	cmp	r2, r3
 80072a0:	db84      	blt.n	80071ac <maze_init+0x3a>
    }
  }

  /* スタート時の壁は|_|となっているので、あらかじめ入力 */
  /* スタートマスから見て東側 */
  maze_wall[0] = (unsigned char)(maze_wall[0] | 2);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	701a      	strb	r2, [r3, #0]

  /* スタートマスの一マス東側のマスから見て西側 */
  maze_wall[32] = (unsigned char)(maze_wall[32] | 8);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	3320      	adds	r3, #32
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3320      	adds	r3, #32
 80072ba:	f042 0208 	orr.w	r2, r2, #8
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]

  /* 以上の壁情報は探索済みとする */
  memcpy(&maze_wall_search[0], &maze_wall[0], sizeof(unsigned char) << 10);
 80072c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f007 faff 	bl	800e8cc <memcpy>

  /* 座標(1,1)の北側、(2,1)の南側は壁がないことがわかっているので探索済みとする。 */
  maze_wall_search[0] = (unsigned char)(maze_wall[0] | 1);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	701a      	strb	r2, [r3, #0]
  maze_wall_search[1] = (unsigned char)(maze_wall[1] | 4);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3301      	adds	r3, #1
 80072e6:	f042 0204 	orr.w	r2, r2, #4
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
}
 80072ee:	bf00      	nop
 80072f0:	3728      	adds	r7, #40	; 0x28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <fust_run>:
                     coder_internal_ref *current_dir, const coder_internal_ref
                     *goal_size, const coder_internal_ref_2 *wall, const
                     coder_internal_ref_3 *l_direction, const unsigned char
                     maze_wall[1024], const unsigned char contour_map[1024],
                     const unsigned char maze_goal[18], unsigned char max_length)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b091      	sub	sp, #68	; 0x44
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
  unsigned char varargin_3;
  unsigned char varargin_4;

  /*  fust_run 最短経路導出 */
  /* local変数宣言 */
  goal_flag = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* ゴール判定フラグ */
  little = max_length;
 800730c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8007310:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  /* 進行方向選定用閾値 */
  /* マウス位置表示用オブジェクト */
  /* マウスの初期位置設定 */
  current_x->contents = 1U;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
  current_y->contents = 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
  current_dir->contents = g_direction->contents.North;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	701a      	strb	r2, [r3, #0]
  next_dir = g_direction->contents.North;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  /* 探索開始時x */
  /* 探索開始時y */
  /* 探索開始位置プロット */
  /* 足跡プロット */
  do {
    exitg1 = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38

    /* 現在位置がゴールか判定 */
    k = goal_size->contents;
 8007334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    q0 = k;
 800733c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007340:	633b      	str	r3, [r7, #48]	; 0x30
    for (tempi = 0; tempi < q0; tempi++) {
 8007342:	2300      	movs	r3, #0
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007346:	e016      	b.n	8007376 <fust_run+0x7e>
      if ((current_x->contents == maze_goal[tempi]) && (current_y->contents ==
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007350:	440b      	add	r3, r1
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d10b      	bne.n	8007370 <fust_run+0x78>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	781a      	ldrb	r2, [r3, #0]
           maze_goal[tempi + 9])) {
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	3309      	adds	r3, #9
 8007360:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007362:	440b      	add	r3, r1
 8007364:	781b      	ldrb	r3, [r3, #0]
      if ((current_x->contents == maze_goal[tempi]) && (current_y->contents ==
 8007366:	429a      	cmp	r2, r3
 8007368:	d102      	bne.n	8007370 <fust_run+0x78>
        goal_flag = 1U;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (tempi = 0; tempi < q0; tempi++) {
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	3301      	adds	r3, #1
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	429a      	cmp	r2, r3
 800737c:	dbe4      	blt.n	8007348 <fust_run+0x50>
      }
    }

    if (goal_flag == 1) {
 800737e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007382:	2b01      	cmp	r3, #1
 8007384:	d102      	bne.n	800738c <fust_run+0x94>
      exitg1 = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38
 800738a:	e38b      	b.n	8007aa4 <fust_run+0x7ac>
    } else {
      /*             %%進行方向選定 */
      /* 優先順位　北⇒東⇒南⇒西 */
      /* 北側の壁のありなし */
      k = g_direction->contents.North;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      a = maze_wall[(current_y->contents + ((current_x->contents - 1) << 5)) - 1];
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	3b01      	subs	r3, #1
 80073a0:	015b      	lsls	r3, r3, #5
 80073a2:	4413      	add	r3, r2
 80073a4:	3b01      	subs	r3, #1
 80073a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073a8:	4413      	add	r3, r2
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (k <= 7) {
 80073b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073b4:	2b07      	cmp	r3, #7
 80073b6:	d807      	bhi.n	80073c8 <fust_run+0xd0>
        b_k = (unsigned char)(1 << k);
 80073b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073bc:	2201      	movs	r2, #1
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
 80073c6:	e001      	b.n	80073cc <fust_run+0xd4>
      } else {
        b_k = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((a & b_k) == wall->contents.nowall) {
 80073cc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	4013      	ands	r3, r2
 80073d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	4293      	cmp	r3, r2
 80073da:	d12f      	bne.n	800743c <fust_run+0x144>
        /* 北側の等高線mapが閾値より低ければ、 */
        q0 = (int)(current_y->contents + 1U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	2bff      	cmp	r3, #255	; 0xff
 80073e8:	d901      	bls.n	80073ee <fust_run+0xf6>
          q0 = 255;
 80073ea:	23ff      	movs	r3, #255	; 0xff
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30
        }

        if (contour_map[(q0 + ((current_x->contents - 1) << 5)) - 1] < little) {
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	4413      	add	r3, r2
 80073fa:	3b01      	subs	r3, #1
 80073fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fe:	4413      	add	r3, r2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007406:	429a      	cmp	r2, r3
 8007408:	d918      	bls.n	800743c <fust_run+0x144>
          /* 閾値を北側の等高map値に変更 */
          q0 = (int)(current_y->contents + 1U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2bff      	cmp	r3, #255	; 0xff
 8007416:	d901      	bls.n	800741c <fust_run+0x124>
            q0 = 255;
 8007418:	23ff      	movs	r3, #255	; 0xff
 800741a:	633b      	str	r3, [r7, #48]	; 0x30
          }

          little = contour_map[(q0 + ((current_x->contents - 1) << 5)) - 1];
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	3b01      	subs	r3, #1
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	4413      	add	r3, r2
 8007428:	3b01      	subs	r3, #1
 800742a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

          /* 北側を進行方向に変更y */
          next_dir = g_direction->contents.North;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        }
      }

      /* 東側 */
      k = g_direction->contents.East;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      a = maze_wall[(current_y->contents + ((current_x->contents - 1) << 5)) - 1];
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	3b01      	subs	r3, #1
 8007450:	015b      	lsls	r3, r3, #5
 8007452:	4413      	add	r3, r2
 8007454:	3b01      	subs	r3, #1
 8007456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (k <= 7) {
 8007460:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007464:	2b07      	cmp	r3, #7
 8007466:	d807      	bhi.n	8007478 <fust_run+0x180>
        c_k = (unsigned char)(1 << k);
 8007468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800746c:	2201      	movs	r2, #1
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	b2db      	uxtb	r3, r3
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	e001      	b.n	800747c <fust_run+0x184>
      } else {
        c_k = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	623b      	str	r3, [r7, #32]
      }

      if ((a & c_k) == wall->contents.nowall) {
 800747c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	4013      	ands	r3, r2
 8007484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	4293      	cmp	r3, r2
 800748a:	d131      	bne.n	80074f0 <fust_run+0x1f8>
        q0 = (int)(current_x->contents + 1U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d901      	bls.n	800749e <fust_run+0x1a6>
          q0 = 255;
 800749a:	23ff      	movs	r3, #255	; 0xff
 800749c:	633b      	str	r3, [r7, #48]	; 0x30
        }

        if (contour_map[(current_y->contents + ((q0 - 1) << 5)) - 1] < little) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	3b01      	subs	r3, #1
 80074a8:	015b      	lsls	r3, r3, #5
 80074aa:	4413      	add	r3, r2
 80074ac:	3b01      	subs	r3, #1
 80074ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074b0:	4413      	add	r3, r2
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d919      	bls.n	80074f0 <fust_run+0x1f8>
          q0 = (int)(current_x->contents + 1U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2bff      	cmp	r3, #255	; 0xff
 80074c8:	d901      	bls.n	80074ce <fust_run+0x1d6>
            q0 = 255;
 80074ca:	23ff      	movs	r3, #255	; 0xff
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
          }

          little = contour_map[(current_y->contents + ((q0 - 1) << 5)) - 1];
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	3b01      	subs	r3, #1
 80074d8:	015b      	lsls	r3, r3, #5
 80074da:	4413      	add	r3, r2
 80074dc:	3b01      	subs	r3, #1
 80074de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074e0:	4413      	add	r3, r2
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
          next_dir = g_direction->contents.East;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        }
      }

      /* 南側 */
      k = g_direction->contents.South;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	789b      	ldrb	r3, [r3, #2]
 80074f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      a = maze_wall[(current_y->contents + ((current_x->contents - 1) << 5)) - 1];
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	015b      	lsls	r3, r3, #5
 8007506:	4413      	add	r3, r2
 8007508:	3b01      	subs	r3, #1
 800750a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800750c:	4413      	add	r3, r2
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (k <= 7) {
 8007514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007518:	2b07      	cmp	r3, #7
 800751a:	d807      	bhi.n	800752c <fust_run+0x234>
        d_k = (unsigned char)(1 << k);
 800751c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007520:	2201      	movs	r2, #1
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e001      	b.n	8007530 <fust_run+0x238>
      } else {
        d_k = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
      }

      if ((a & d_k) == wall->contents.nowall) {
 8007530:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4013      	ands	r3, r2
 8007538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	4293      	cmp	r3, r2
 800753e:	d135      	bne.n	80075ac <fust_run+0x2b4>
        q0 = current_y->contents;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
        qY = q0 - 1U;
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	3b01      	subs	r3, #1
 800754a:	61bb      	str	r3, [r7, #24]
        if (qY > (unsigned int)q0) {
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	429a      	cmp	r2, r3
 8007552:	d901      	bls.n	8007558 <fust_run+0x260>
          qY = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
        }

        if (contour_map[((int)qY + ((current_x->contents - 1) << 5)) - 1] <
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	4413      	add	r3, r2
 8007564:	3b01      	subs	r3, #1
 8007566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007570:	429a      	cmp	r2, r3
 8007572:	d91b      	bls.n	80075ac <fust_run+0x2b4>
            little) {
          q0 = current_y->contents;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	633b      	str	r3, [r7, #48]	; 0x30
          qY = q0 - 1U;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	3b01      	subs	r3, #1
 800757e:	61bb      	str	r3, [r7, #24]
          if (qY > (unsigned int)q0) {
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	429a      	cmp	r2, r3
 8007586:	d901      	bls.n	800758c <fust_run+0x294>
            qY = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
          }

          little = contour_map[((int)qY + ((current_x->contents - 1) << 5)) - 1];
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	4413      	add	r3, r2
 8007598:	3b01      	subs	r3, #1
 800759a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800759c:	4413      	add	r3, r2
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
          next_dir = g_direction->contents.South;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	789b      	ldrb	r3, [r3, #2]
 80075a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        }
      }

      /* 西側 */
      k = g_direction->contents.West;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	78db      	ldrb	r3, [r3, #3]
 80075b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      a = maze_wall[(current_y->contents + ((current_x->contents - 1) << 5)) - 1];
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	3b01      	subs	r3, #1
 80075c0:	015b      	lsls	r3, r3, #5
 80075c2:	4413      	add	r3, r2
 80075c4:	3b01      	subs	r3, #1
 80075c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (k <= 7) {
 80075d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d807      	bhi.n	80075e8 <fust_run+0x2f0>
        e_k = (unsigned char)(1 << k);
 80075d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e001      	b.n	80075ec <fust_run+0x2f4>
      } else {
        e_k = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
      }

      if ((a & e_k) == wall->contents.nowall) {
 80075ec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	4013      	ands	r3, r2
 80075f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d137      	bne.n	800766c <fust_run+0x374>
        q0 = current_x->contents;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	633b      	str	r3, [r7, #48]	; 0x30
        qY = q0 - 1U;
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	3b01      	subs	r3, #1
 8007606:	61bb      	str	r3, [r7, #24]
        if (qY > (unsigned int)q0) {
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	429a      	cmp	r2, r3
 800760e:	d901      	bls.n	8007614 <fust_run+0x31c>
          qY = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
        }

        if (contour_map[(current_y->contents + (((int)qY - 1) << 5)) - 1] <
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	3b01      	subs	r3, #1
 800761e:	015b      	lsls	r3, r3, #5
 8007620:	4413      	add	r3, r2
 8007622:	3b01      	subs	r3, #1
 8007624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007626:	4413      	add	r3, r2
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800762e:	429a      	cmp	r2, r3
 8007630:	d91c      	bls.n	800766c <fust_run+0x374>
            little) {
          q0 = current_x->contents;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
          qY = q0 - 1U;
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	3b01      	subs	r3, #1
 800763c:	61bb      	str	r3, [r7, #24]
          if (qY > (unsigned int)q0) {
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	429a      	cmp	r2, r3
 8007644:	d901      	bls.n	800764a <fust_run+0x352>
            qY = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
          }

          little = contour_map[(current_y->contents + (((int)qY - 1) << 5)) - 1];
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	3b01      	subs	r3, #1
 8007654:	015b      	lsls	r3, r3, #5
 8007656:	4413      	add	r3, r2
 8007658:	3b01      	subs	r3, #1
 800765a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800765c:	4413      	add	r3, r2
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
          next_dir = g_direction->contents.West;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        }
      }

      /*             %%現在方向と進行方向に応じた処理 */
      q0 = (int)(4U + next_dir);
 800766c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007670:	3304      	adds	r3, #4
 8007672:	633b      	str	r3, [r7, #48]	; 0x30
      if ((unsigned int)q0 > 255U) {
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	2bff      	cmp	r3, #255	; 0xff
 8007678:	d901      	bls.n	800767e <fust_run+0x386>
        q0 = 255;
 800767a:	23ff      	movs	r3, #255	; 0xff
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      qY = (unsigned int)q0 - current_dir->contents;
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
      if (qY > (unsigned int)q0) {
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	429a      	cmp	r2, r3
 800768e:	d901      	bls.n	8007694 <fust_run+0x39c>
        qY = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
      }

      k = (unsigned char)((unsigned char)qY % 4);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      a = l_direction->contents.front;
 80076a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      varargin_2 = l_direction->contents.right;
 80076a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	74fb      	strb	r3, [r7, #19]
      varargin_3 = l_direction->contents.back;
 80076ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b0:	789b      	ldrb	r3, [r3, #2]
 80076b2:	74bb      	strb	r3, [r7, #18]
      varargin_4 = l_direction->contents.left;
 80076b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b6:	78db      	ldrb	r3, [r3, #3]
 80076b8:	747b      	strb	r3, [r7, #17]
      if (a == k) {
 80076ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80076be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d102      	bne.n	80076cc <fust_run+0x3d4>
        q0 = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	633b      	str	r3, [r7, #48]	; 0x30
 80076ca:	e01a      	b.n	8007702 <fust_run+0x40a>
      } else if (varargin_2 == k) {
 80076cc:	7cfa      	ldrb	r2, [r7, #19]
 80076ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d102      	bne.n	80076dc <fust_run+0x3e4>
        q0 = 1;
 80076d6:	2301      	movs	r3, #1
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30
 80076da:	e012      	b.n	8007702 <fust_run+0x40a>
      } else if (varargin_3 == k) {
 80076dc:	7cba      	ldrb	r2, [r7, #18]
 80076de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d102      	bne.n	80076ec <fust_run+0x3f4>
        q0 = 2;
 80076e6:	2302      	movs	r3, #2
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30
 80076ea:	e00a      	b.n	8007702 <fust_run+0x40a>
      } else if (varargin_4 == k) {
 80076ec:	7c7a      	ldrb	r2, [r7, #17]
 80076ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d102      	bne.n	80076fc <fust_run+0x404>
        q0 = 3;
 80076f6:	2303      	movs	r3, #3
 80076f8:	633b      	str	r3, [r7, #48]	; 0x30
 80076fa:	e002      	b.n	8007702 <fust_run+0x40a>
      } else {
        q0 = -1;
 80076fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007700:	633b      	str	r3, [r7, #48]	; 0x30
      }

      switch (q0) {
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b03      	cmp	r3, #3
 8007706:	f200 81cd 	bhi.w	8007aa4 <fust_run+0x7ac>
 800770a:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <fust_run+0x418>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007721 	.word	0x08007721
 8007714:	080077d9 	.word	0x080077d9
 8007718:	080078d1 	.word	0x080078d1
 800771c:	080079bb 	.word	0x080079bb
       case 0:
        k = current_x->contents;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        a = current_y->contents;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        varargin_2 = current_dir->contents;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	74fb      	strb	r3, [r7, #19]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (varargin_2 == g_direction->contents.North) {
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	7cfa      	ldrb	r2, [r7, #19]
 800773c:	429a      	cmp	r2, r3
 800773e:	d10b      	bne.n	8007758 <fust_run+0x460>
          q0 = (int)(a + 1U);
 8007740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007744:	3301      	adds	r3, #1
 8007746:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d901      	bls.n	8007752 <fust_run+0x45a>
            q0 = 255;
 800774e:	23ff      	movs	r3, #255	; 0xff
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
          }

          a = (unsigned char)q0;
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (varargin_2 == g_direction->contents.East) {
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	7cfa      	ldrb	r2, [r7, #19]
 800775e:	429a      	cmp	r2, r3
 8007760:	d10b      	bne.n	800777a <fust_run+0x482>
          q0 = (int)(k + 1U);
 8007762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007766:	3301      	adds	r3, #1
 8007768:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	2bff      	cmp	r3, #255	; 0xff
 800776e:	d901      	bls.n	8007774 <fust_run+0x47c>
            q0 = 255;
 8007770:	23ff      	movs	r3, #255	; 0xff
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
          }

          k = (unsigned char)q0;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (varargin_2 == g_direction->contents.South) {
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	789b      	ldrb	r3, [r3, #2]
 800777e:	7cfa      	ldrb	r2, [r7, #19]
 8007780:	429a      	cmp	r2, r3
 8007782:	d10d      	bne.n	80077a0 <fust_run+0x4a8>
          qY = a - 1U;
 8007784:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007788:	3b01      	subs	r3, #1
 800778a:	61bb      	str	r3, [r7, #24]
          if (qY > a) {
 800778c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	429a      	cmp	r2, r3
 8007794:	d901      	bls.n	800779a <fust_run+0x4a2>
            qY = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	61bb      	str	r3, [r7, #24]
          }

          a = (unsigned char)qY;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (varargin_2 == g_direction->contents.West) {
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	78db      	ldrb	r3, [r3, #3]
 80077a4:	7cfa      	ldrb	r2, [r7, #19]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d10d      	bne.n	80077c6 <fust_run+0x4ce>
          qY = k - 1U;
 80077aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077ae:	3b01      	subs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
          if (qY > k) {
 80077b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d901      	bls.n	80077c0 <fust_run+0x4c8>
            qY = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
          }

          k = (unsigned char)qY;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("west_step") */
        }

        current_x->contents = k;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80077cc:	701a      	strb	r2, [r3, #0]
        current_y->contents = a;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80077d4:	701a      	strb	r2, [r3, #0]

        /* disp("front") */
        break;
 80077d6:	e165      	b.n	8007aa4 <fust_run+0x7ac>

       case 1:
        k = current_dir->contents;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        /* 入力 現在方向 */
        /* 出力 現在方向 */
        /*  turn_clk_90deg 時計周りに90度ターンする関数  */
        q0 = (int)(4U + k);
 80077e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077e4:	3304      	adds	r3, #4
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	2bff      	cmp	r3, #255	; 0xff
 80077ec:	d901      	bls.n	80077f2 <fust_run+0x4fa>
          q0 = 255;
 80077ee:	23ff      	movs	r3, #255	; 0xff
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30
        }

        q0++;
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	3301      	adds	r3, #1
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	2bff      	cmp	r3, #255	; 0xff
 80077fc:	d901      	bls.n	8007802 <fust_run+0x50a>
          q0 = 255;
 80077fe:	23ff      	movs	r3, #255	; 0xff
 8007800:	633b      	str	r3, [r7, #48]	; 0x30
        }

        current_dir->contents = (unsigned char)(q0 % 4);
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	425a      	negs	r2, r3
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	f002 0203 	and.w	r2, r2, #3
 800780e:	bf58      	it	pl
 8007810:	4253      	negpl	r3, r2
 8007812:	b2da      	uxtb	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	701a      	strb	r2, [r3, #0]
        k = current_x->contents;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        a = current_y->contents;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        varargin_2 = current_dir->contents;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	74fb      	strb	r3, [r7, #19]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (varargin_2 == g_direction->contents.North) {
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	7cfa      	ldrb	r2, [r7, #19]
 8007834:	429a      	cmp	r2, r3
 8007836:	d10b      	bne.n	8007850 <fust_run+0x558>
          q0 = (int)(a + 1U);
 8007838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800783c:	3301      	adds	r3, #1
 800783e:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2bff      	cmp	r3, #255	; 0xff
 8007844:	d901      	bls.n	800784a <fust_run+0x552>
            q0 = 255;
 8007846:	23ff      	movs	r3, #255	; 0xff
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
          }

          a = (unsigned char)q0;
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (varargin_2 == g_direction->contents.East) {
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	7cfa      	ldrb	r2, [r7, #19]
 8007856:	429a      	cmp	r2, r3
 8007858:	d10b      	bne.n	8007872 <fust_run+0x57a>
          q0 = (int)(k + 1U);
 800785a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800785e:	3301      	adds	r3, #1
 8007860:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	2bff      	cmp	r3, #255	; 0xff
 8007866:	d901      	bls.n	800786c <fust_run+0x574>
            q0 = 255;
 8007868:	23ff      	movs	r3, #255	; 0xff
 800786a:	633b      	str	r3, [r7, #48]	; 0x30
          }

          k = (unsigned char)q0;
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (varargin_2 == g_direction->contents.South) {
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	789b      	ldrb	r3, [r3, #2]
 8007876:	7cfa      	ldrb	r2, [r7, #19]
 8007878:	429a      	cmp	r2, r3
 800787a:	d10d      	bne.n	8007898 <fust_run+0x5a0>
          qY = a - 1U;
 800787c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007880:	3b01      	subs	r3, #1
 8007882:	61bb      	str	r3, [r7, #24]
          if (qY > a) {
 8007884:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d901      	bls.n	8007892 <fust_run+0x59a>
            qY = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61bb      	str	r3, [r7, #24]
          }

          a = (unsigned char)qY;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (varargin_2 == g_direction->contents.West) {
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	78db      	ldrb	r3, [r3, #3]
 800789c:	7cfa      	ldrb	r2, [r7, #19]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d10d      	bne.n	80078be <fust_run+0x5c6>
          qY = k - 1U;
 80078a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078a6:	3b01      	subs	r3, #1
 80078a8:	61bb      	str	r3, [r7, #24]
          if (qY > k) {
 80078aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d901      	bls.n	80078b8 <fust_run+0x5c0>
            qY = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
          }

          k = (unsigned char)qY;
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("west_step") */
        }

        current_x->contents = k;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80078c4:	701a      	strb	r2, [r3, #0]
        current_y->contents = a;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80078cc:	701a      	strb	r2, [r3, #0]

        /* disp("right") */
        break;
 80078ce:	e0e9      	b.n	8007aa4 <fust_run+0x7ac>

       case 2:
        k = current_dir->contents;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        /* 入力 現在方向 */
        /* 出力 現在方向 */
        /*  turn_180deg 180度ターンする関数 */
        q0 = (int)(4U + k);
 80078d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078dc:	3304      	adds	r3, #4
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d901      	bls.n	80078ea <fust_run+0x5f2>
          q0 = 255;
 80078e6:	23ff      	movs	r3, #255	; 0xff
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        current_dir->contents = (unsigned char)((q0 - 2) % 4);
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	3b02      	subs	r3, #2
 80078ee:	425a      	negs	r2, r3
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	f002 0203 	and.w	r2, r2, #3
 80078f8:	bf58      	it	pl
 80078fa:	4253      	negpl	r3, r2
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	701a      	strb	r2, [r3, #0]
        k = current_x->contents;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        a = current_y->contents;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        varargin_2 = current_dir->contents;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	74fb      	strb	r3, [r7, #19]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (varargin_2 == g_direction->contents.North) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	7cfa      	ldrb	r2, [r7, #19]
 800791e:	429a      	cmp	r2, r3
 8007920:	d10b      	bne.n	800793a <fust_run+0x642>
          q0 = (int)(a + 1U);
 8007922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007926:	3301      	adds	r3, #1
 8007928:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2bff      	cmp	r3, #255	; 0xff
 800792e:	d901      	bls.n	8007934 <fust_run+0x63c>
            q0 = 255;
 8007930:	23ff      	movs	r3, #255	; 0xff
 8007932:	633b      	str	r3, [r7, #48]	; 0x30
          }

          a = (unsigned char)q0;
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (varargin_2 == g_direction->contents.East) {
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	7cfa      	ldrb	r2, [r7, #19]
 8007940:	429a      	cmp	r2, r3
 8007942:	d10b      	bne.n	800795c <fust_run+0x664>
          q0 = (int)(k + 1U);
 8007944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007948:	3301      	adds	r3, #1
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d901      	bls.n	8007956 <fust_run+0x65e>
            q0 = 255;
 8007952:	23ff      	movs	r3, #255	; 0xff
 8007954:	633b      	str	r3, [r7, #48]	; 0x30
          }

          k = (unsigned char)q0;
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (varargin_2 == g_direction->contents.South) {
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	789b      	ldrb	r3, [r3, #2]
 8007960:	7cfa      	ldrb	r2, [r7, #19]
 8007962:	429a      	cmp	r2, r3
 8007964:	d10d      	bne.n	8007982 <fust_run+0x68a>
          qY = a - 1U;
 8007966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800796a:	3b01      	subs	r3, #1
 800796c:	61bb      	str	r3, [r7, #24]
          if (qY > a) {
 800796e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d901      	bls.n	800797c <fust_run+0x684>
            qY = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
          }

          a = (unsigned char)qY;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (varargin_2 == g_direction->contents.West) {
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	7cfa      	ldrb	r2, [r7, #19]
 8007988:	429a      	cmp	r2, r3
 800798a:	d10d      	bne.n	80079a8 <fust_run+0x6b0>
          qY = k - 1U;
 800798c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007990:	3b01      	subs	r3, #1
 8007992:	61bb      	str	r3, [r7, #24]
          if (qY > k) {
 8007994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	429a      	cmp	r2, r3
 800799c:	d901      	bls.n	80079a2 <fust_run+0x6aa>
            qY = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	61bb      	str	r3, [r7, #24]
          }

          k = (unsigned char)qY;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("west_step") */
        }

        current_x->contents = k;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80079ae:	701a      	strb	r2, [r3, #0]
        current_y->contents = a;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80079b6:	701a      	strb	r2, [r3, #0]

        /* disp("back") */
        break;
 80079b8:	e074      	b.n	8007aa4 <fust_run+0x7ac>

       case 3:
        k = current_dir->contents;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        /* 入力　現在方向 */
        /* 出力　現在方向 */
        /*  turn_conclk_90deg 反時計周りに90度回る関数  */
        q0 = (int)(4U + k);
 80079c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079c6:	3304      	adds	r3, #4
 80079c8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((unsigned int)q0 > 255U) {
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	2bff      	cmp	r3, #255	; 0xff
 80079ce:	d901      	bls.n	80079d4 <fust_run+0x6dc>
          q0 = 255;
 80079d0:	23ff      	movs	r3, #255	; 0xff
 80079d2:	633b      	str	r3, [r7, #48]	; 0x30
        }

        current_dir->contents = (unsigned char)((q0 - 1) % 4);
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	3b01      	subs	r3, #1
 80079d8:	425a      	negs	r2, r3
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	f002 0203 	and.w	r2, r2, #3
 80079e2:	bf58      	it	pl
 80079e4:	4253      	negpl	r3, r2
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	701a      	strb	r2, [r3, #0]
        k = current_x->contents;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        a = current_y->contents;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        varargin_2 = current_dir->contents;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	74fb      	strb	r3, [r7, #19]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (varargin_2 == g_direction->contents.North) {
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	7cfa      	ldrb	r2, [r7, #19]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d10b      	bne.n	8007a24 <fust_run+0x72c>
          q0 = (int)(a + 1U);
 8007a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a10:	3301      	adds	r3, #1
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2bff      	cmp	r3, #255	; 0xff
 8007a18:	d901      	bls.n	8007a1e <fust_run+0x726>
            q0 = 255;
 8007a1a:	23ff      	movs	r3, #255	; 0xff
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30
          }

          a = (unsigned char)q0;
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (varargin_2 == g_direction->contents.East) {
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	7cfa      	ldrb	r2, [r7, #19]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d10b      	bne.n	8007a46 <fust_run+0x74e>
          q0 = (int)(k + 1U);
 8007a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a32:	3301      	adds	r3, #1
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30
          if ((unsigned int)q0 > 255U) {
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2bff      	cmp	r3, #255	; 0xff
 8007a3a:	d901      	bls.n	8007a40 <fust_run+0x748>
            q0 = 255;
 8007a3c:	23ff      	movs	r3, #255	; 0xff
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
          }

          k = (unsigned char)q0;
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (varargin_2 == g_direction->contents.South) {
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	789b      	ldrb	r3, [r3, #2]
 8007a4a:	7cfa      	ldrb	r2, [r7, #19]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d10d      	bne.n	8007a6c <fust_run+0x774>
          qY = a - 1U;
 8007a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a54:	3b01      	subs	r3, #1
 8007a56:	61bb      	str	r3, [r7, #24]
          if (qY > a) {
 8007a58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d901      	bls.n	8007a66 <fust_run+0x76e>
            qY = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61bb      	str	r3, [r7, #24]
          }

          a = (unsigned char)qY;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (varargin_2 == g_direction->contents.West) {
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	7cfa      	ldrb	r2, [r7, #19]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d10d      	bne.n	8007a92 <fust_run+0x79a>
          qY = k - 1U;
 8007a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
          if (qY > k) {
 8007a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d901      	bls.n	8007a8c <fust_run+0x794>
            qY = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
          }

          k = (unsigned char)qY;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          /* disp("west_step") */
        }

        current_x->contents = k;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007a98:	701a      	strb	r2, [r3, #0]
        current_y->contents = a;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007aa0:	701a      	strb	r2, [r3, #0]

        /* disp("left") */
        break;
 8007aa2:	bf00      	nop
      }

      /* for code generation */
    }
  } while (exitg1 == 0);
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f43f ac42 	beq.w	8007330 <fust_run+0x38>
}
 8007aac:	bf00      	nop
 8007aae:	3744      	adds	r7, #68	; 0x44
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <make_map_find>:
static void make_map_find(const coder_internal_ref_4 *g_direction, const
  coder_internal_ref_2 *wall, unsigned char maze_row_size, unsigned char
  maze_col_size, const unsigned char maze_goal[18], unsigned char l_goal_size,
  const unsigned char maze_wall[1024], unsigned char contour_map[1024], unsigned
  char *max_length)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8007abe:	b081      	sub	sp, #4
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	f107 0420 	add.w	r4, r7, #32
 8007ac6:	3c14      	subs	r4, #20
 8007ac8:	6020      	str	r0, [r4, #0]
 8007aca:	f107 0020 	add.w	r0, r7, #32
 8007ace:	3818      	subs	r0, #24
 8007ad0:	6001      	str	r1, [r0, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f107 0320 	add.w	r3, r7, #32
 8007ad8:	3b19      	subs	r3, #25
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	f107 0320 	add.w	r3, r7, #32
 8007ae0:	3b1a      	subs	r3, #26
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	701a      	strb	r2, [r3, #0]
  int d_k;
  int e_k;

  /*   make_map_find 壁情報から等高線MAPを生成 */
  /*  迷路パラメータ設定 */
  qY = maze_col_size - 1U;
 8007ae6:	f107 0320 	add.w	r3, r7, #32
 8007aea:	3b1a      	subs	r3, #26
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007af4:	f102 021c 	add.w	r2, r2, #28
 8007af8:	6013      	str	r3, [r2, #0]
  if (qY > maze_col_size) {
 8007afa:	f107 0320 	add.w	r3, r7, #32
 8007afe:	3b1a      	subs	r3, #26
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b06:	f102 021c 	add.w	r2, r2, #28
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d905      	bls.n	8007b1c <make_map_find+0x64>
    qY = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b16:	f102 021c 	add.w	r2, r2, #28
 8007b1a:	6013      	str	r3, [r2, #0]
  }

  b_qY = maze_row_size - 1U;
 8007b1c:	f107 0320 	add.w	r3, r7, #32
 8007b20:	3b19      	subs	r3, #25
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b2a:	f102 0218 	add.w	r2, r2, #24
 8007b2e:	6013      	str	r3, [r2, #0]
  if (b_qY > maze_row_size) {
 8007b30:	f107 0320 	add.w	r3, r7, #32
 8007b34:	3b19      	subs	r3, #25
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b3c:	f102 0218 	add.w	r2, r2, #24
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d905      	bls.n	8007b52 <make_map_find+0x9a>
    b_qY = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b4c:	f102 0218 	add.w	r2, r2, #24
 8007b50:	6013      	str	r3, [r2, #0]
  }

  q0 = (int)(qY * b_qY);
 8007b52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b56:	f103 031c 	add.w	r3, r3, #28
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b60:	f102 0218 	add.w	r2, r2, #24
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b6e:	f102 0214 	add.w	r2, r2, #20
 8007b72:	6013      	str	r3, [r2, #0]
  if ((unsigned int)q0 > 255U) {
 8007b74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b78:	f103 0314 	add.w	r3, r3, #20
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2bff      	cmp	r3, #255	; 0xff
 8007b80:	d905      	bls.n	8007b8e <make_map_find+0xd6>
    q0 = 255;
 8007b82:	23ff      	movs	r3, #255	; 0xff
 8007b84:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b88:	f102 0214 	add.w	r2, r2, #20
 8007b8c:	6013      	str	r3, [r2, #0]
  }

  qY = q0 - 1U;
 8007b8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b92:	f103 0314 	add.w	r3, r3, #20
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b9e:	f102 021c 	add.w	r2, r2, #28
 8007ba2:	6013      	str	r3, [r2, #0]
  if (qY > (unsigned int)q0) {
 8007ba4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ba8:	f103 0314 	add.w	r3, r3, #20
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bb2:	f102 021c 	add.w	r2, r2, #28
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d905      	bls.n	8007bc8 <make_map_find+0x110>
    qY = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bc2:	f102 021c 	add.w	r2, r2, #28
 8007bc6:	6013      	str	r3, [r2, #0]
  }

  *max_length = (unsigned char)qY;
 8007bc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bcc:	f103 031c 	add.w	r3, r3, #28
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	701a      	strb	r2, [r3, #0]

  /* MAPの初期化(すべての要素にmax_lengthを入力) */
  /* 32マス分mapを保持 */
  for (i2 = 0; i2 < 1024; i2++) {
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007be2:	f102 0210 	add.w	r2, r2, #16
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	e01c      	b.n	8007c24 <make_map_find+0x16c>
    contour_map[i2] = (unsigned char)qY;
 8007bea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bee:	f103 0310 	add.w	r3, r3, #16
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8007bf8:	f102 021c 	add.w	r2, r2, #28
 8007bfc:	6812      	ldr	r2, [r2, #0]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c04:	f102 021c 	add.w	r2, r2, #28
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]
  for (i2 = 0; i2 < 1024; i2++) {
 8007c0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c12:	f103 0310 	add.w	r3, r3, #16
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c1e:	f102 0210 	add.w	r2, r2, #16
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c28:	f103 0310 	add.w	r3, r3, #16
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c32:	dbda      	blt.n	8007bea <make_map_find+0x132>
  }

  /* ゴール座標に0を入力 */
  i2 = l_goal_size;
 8007c34:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8007c38:	f103 0314 	add.w	r3, r3, #20
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c42:	f102 0210 	add.w	r2, r2, #16
 8007c46:	6013      	str	r3, [r2, #0]
  for (q0 = 0; q0 < i2; q0++) {
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c4e:	f102 0214 	add.w	r2, r2, #20
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	e030      	b.n	8007cb8 <make_map_find+0x200>
    contour_map[(maze_goal[q0 + 9] + ((maze_goal[q0] - 1) << 5)) - 1] = 0U;
 8007c56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c5a:	f103 0314 	add.w	r3, r3, #20
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3309      	adds	r3, #9
 8007c62:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8007c66:	f102 0210 	add.w	r2, r2, #16
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c76:	f103 0314 	add.w	r3, r3, #20
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8007c80:	f102 0210 	add.w	r2, r2, #16
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	4413      	add	r3, r2
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	015b      	lsls	r3, r3, #5
 8007c8e:	440b      	add	r3, r1
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8007c96:	f102 021c 	add.w	r2, r2, #28
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	701a      	strb	r2, [r3, #0]
  for (q0 = 0; q0 < i2; q0++) {
 8007ca2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ca6:	f103 0314 	add.w	r3, r3, #20
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cb2:	f102 0214 	add.w	r2, r2, #20
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cbc:	f103 0314 	add.w	r3, r3, #20
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cc6:	f103 0310 	add.w	r3, r3, #16
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	dbc2      	blt.n	8007c56 <make_map_find+0x19e>
  }

  do {
    change_flag = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cd6:	f102 020f 	add.w	r2, r2, #15
 8007cda:	7013      	strb	r3, [r2, #0]

    /* map更新確認用フラグ */
    tempi = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ce2:	f102 020e 	add.w	r2, r2, #14
 8007ce6:	7013      	strb	r3, [r2, #0]
    exitg1 = false;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cee:	f102 020d 	add.w	r2, r2, #13
 8007cf2:	7013      	strb	r3, [r2, #0]
    while ((!exitg1) && (tempi <= (unsigned char)qY)) {
 8007cf4:	f000 bd12 	b.w	800871c <make_map_find+0xc64>
      /* 歩数カウントは0~max_length */
      /* 歩数が確定している座標を検索 */
      /* 最初は0,更新され、増加したマスを次々検索していく */
      idx = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cfe:	f102 0208 	add.w	r2, r2, #8
 8007d02:	6013      	str	r3, [r2, #0]
      q0 = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d0a:	f102 0214 	add.w	r2, r2, #20
 8007d0e:	6013      	str	r3, [r2, #0]
      exitg2 = false;
 8007d10:	2300      	movs	r3, #0
 8007d12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d16:	f102 0207 	add.w	r2, r2, #7
 8007d1a:	7013      	strb	r3, [r2, #0]
      while ((!exitg2) && (q0 < 1024)) {
 8007d1c:	e055      	b.n	8007dca <make_map_find+0x312>
        if (contour_map[q0] == tempi) {
 8007d1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d22:	f103 0314 	add.w	r3, r3, #20
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8007d2c:	f102 021c 	add.w	r2, r2, #28
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	4413      	add	r3, r2
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d3a:	f102 020e 	add.w	r2, r2, #14
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d137      	bne.n	8007db4 <make_map_find+0x2fc>
          idx++;
 8007d44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d48:	f103 0308 	add.w	r3, r3, #8
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d54:	f102 0208 	add.w	r2, r2, #8
 8007d58:	6013      	str	r3, [r2, #0]
          ii_data[idx - 1] = (short)(q0 + 1);
 8007d5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d5e:	f103 0314 	add.w	r3, r3, #20
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3301      	adds	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d6e:	f103 0308 	add.w	r3, r3, #8
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b211      	sxth	r1, r2
 8007d78:	4ac8      	ldr	r2, [pc, #800]	; (800809c <make_map_find+0x5e4>)
 8007d7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          if (idx >= 1024) {
 8007d7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d82:	f103 0308 	add.w	r3, r3, #8
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	db06      	blt.n	8007d9c <make_map_find+0x2e4>
            exitg2 = true;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d94:	f102 0207 	add.w	r2, r2, #7
 8007d98:	7013      	strb	r3, [r2, #0]
 8007d9a:	e016      	b.n	8007dca <make_map_find+0x312>
          } else {
            q0++;
 8007d9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007da0:	f103 0314 	add.w	r3, r3, #20
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dac:	f102 0214 	add.w	r2, r2, #20
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e00a      	b.n	8007dca <make_map_find+0x312>
          }
        } else {
          q0++;
 8007db4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007db8:	f103 0314 	add.w	r3, r3, #20
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007dc4:	f102 0214 	add.w	r2, r2, #20
 8007dc8:	6013      	str	r3, [r2, #0]
      while ((!exitg2) && (q0 < 1024)) {
 8007dca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dce:	f103 0307 	add.w	r3, r3, #7
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f083 0301 	eor.w	r3, r3, #1
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <make_map_find+0x336>
 8007dde:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007de2:	f103 0314 	add.w	r3, r3, #20
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dec:	db97      	blt.n	8007d1e <make_map_find+0x266>
        }
      }

      if (1 > idx) {
 8007dee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007df2:	f103 0308 	add.w	r3, r3, #8
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc0a      	bgt.n	8007e12 <make_map_find+0x35a>
        loop_ub = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e02:	6013      	str	r3, [r2, #0]
        q0 = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e0a:	f102 0214 	add.w	r2, r2, #20
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e011      	b.n	8007e36 <make_map_find+0x37e>
      } else {
        loop_ub = idx;
 8007e12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e16:	f103 0308 	add.w	r3, r3, #8
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e20:	6013      	str	r3, [r2, #0]
        q0 = idx;
 8007e22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e26:	f103 0308 	add.w	r3, r3, #8
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e30:	f102 0214 	add.w	r2, r2, #20
 8007e34:	6013      	str	r3, [r2, #0]
      }

      num_temp_size[0] = loop_ub;
 8007e36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8007e40:	f102 0218 	add.w	r2, r2, #24
 8007e44:	6013      	str	r3, [r2, #0]
      for (i2 = 0; i2 < loop_ub; i2++) {
 8007e46:	2300      	movs	r3, #0
 8007e48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e4c:	f102 0210 	add.w	r2, r2, #16
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e01b      	b.n	8007e8c <make_map_find+0x3d4>
        num_temp_data[i2] = (unsigned short)ii_data[i2];
 8007e54:	4a91      	ldr	r2, [pc, #580]	; (800809c <make_map_find+0x5e4>)
 8007e56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e5a:	f103 0310 	add.w	r3, r3, #16
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007e64:	b299      	uxth	r1, r3
 8007e66:	4a8e      	ldr	r2, [pc, #568]	; (80080a0 <make_map_find+0x5e8>)
 8007e68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e6c:	f103 0310 	add.w	r3, r3, #16
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i2 = 0; i2 < loop_ub; i2++) {
 8007e76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e7a:	f103 0310 	add.w	r3, r3, #16
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e86:	f102 0210 	add.w	r2, r2, #16
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e90:	f103 0310 	add.w	r3, r3, #16
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	dbd9      	blt.n	8007e54 <make_map_find+0x39c>
      }

      /* 32行なので、行番号:32で割ったあまり */
      b_num_temp_size[0] = q0;
 8007ea0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ea4:	f103 0314 	add.w	r3, r3, #20
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8007eae:	f102 0214 	add.w	r2, r2, #20
 8007eb2:	6013      	str	r3, [r2, #0]
      for (i2 = 0; i2 < q0; i2++) {
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007eba:	f102 0210 	add.w	r2, r2, #16
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e01c      	b.n	8007efc <make_map_find+0x444>
        b_num_temp_data[i2] = (unsigned short)(num_temp_data[i2] - 1U);
 8007ec2:	4a77      	ldr	r2, [pc, #476]	; (80080a0 <make_map_find+0x5e8>)
 8007ec4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ec8:	f103 0310 	add.w	r3, r3, #16
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b299      	uxth	r1, r3
 8007ed6:	4a73      	ldr	r2, [pc, #460]	; (80080a4 <make_map_find+0x5ec>)
 8007ed8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007edc:	f103 0310 	add.w	r3, r3, #16
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i2 = 0; i2 < q0; i2++) {
 8007ee6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007eea:	f103 0310 	add.w	r3, r3, #16
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ef6:	f102 0210 	add.w	r2, r2, #16
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f00:	f103 0310 	add.w	r3, r3, #16
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f0a:	f103 0314 	add.w	r3, r3, #20
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	dbd6      	blt.n	8007ec2 <make_map_find+0x40a>
      }

      b_rem(b_num_temp_data, b_num_temp_size, tmp_data, tmp_size);
 8007f14:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007f18:	f607 0214 	addw	r2, r7, #2068	; 0x814
 8007f1c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8007f20:	f101 0114 	add.w	r1, r1, #20
 8007f24:	485f      	ldr	r0, [pc, #380]	; (80080a4 <make_map_find+0x5ec>)
 8007f26:	f004 f9b9 	bl	800c29c <b_rem>
      idx = tmp_size[0];
 8007f2a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f34:	f102 0208 	add.w	r2, r2, #8
 8007f38:	6013      	str	r3, [r2, #0]
      loop_ub = tmp_size[0];
 8007f3a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f44:	6013      	str	r3, [r2, #0]
      for (i2 = 0; i2 < loop_ub; i2++) {
 8007f46:	2300      	movs	r3, #0
 8007f48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f4c:	f102 0210 	add.w	r2, r2, #16
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	e050      	b.n	8007ff6 <make_map_find+0x53e>
        b_qY = tmp_data[i2] + 1U;
 8007f54:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007f58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f5c:	f102 0210 	add.w	r2, r2, #16
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007f66:	3301      	adds	r3, #1
 8007f68:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f6c:	f102 0218 	add.w	r2, r2, #24
 8007f70:	6013      	str	r3, [r2, #0]
        if (b_qY > 65535U) {
 8007f72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f76:	f103 0318 	add.w	r3, r3, #24
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d306      	bcc.n	8007f90 <make_map_find+0x4d8>
          b_qY = 65535U;
 8007f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f8a:	f102 0218 	add.w	r2, r2, #24
 8007f8e:	6013      	str	r3, [r2, #0]
        }

        u0 = (unsigned short)b_qY;
 8007f90:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f94:	f103 0318 	add.w	r3, r3, #24
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007f9e:	f102 021e 	add.w	r2, r2, #30
 8007fa2:	8013      	strh	r3, [r2, #0]
        if ((unsigned short)b_qY > 255) {
 8007fa4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fa8:	f103 0318 	add.w	r3, r3, #24
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2bff      	cmp	r3, #255	; 0xff
 8007fb2:	d905      	bls.n	8007fc0 <make_map_find+0x508>
          u0 = 255U;
 8007fb4:	23ff      	movs	r3, #255	; 0xff
 8007fb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007fba:	f102 021e 	add.w	r2, r2, #30
 8007fbe:	8013      	strh	r3, [r2, #0]
        }

        row_data[i2] = (unsigned char)u0;
 8007fc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007fc4:	f103 031e 	add.w	r3, r3, #30
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b2d9      	uxtb	r1, r3
 8007fcc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8007fd0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fd4:	f103 0310 	add.w	r3, r3, #16
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4413      	add	r3, r2
 8007fdc:	460a      	mov	r2, r1
 8007fde:	701a      	strb	r2, [r3, #0]
      for (i2 = 0; i2 < loop_ub; i2++) {
 8007fe0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fe4:	f103 0310 	add.w	r3, r3, #16
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ff0:	f102 0210 	add.w	r2, r2, #16
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ffa:	f103 0310 	add.w	r3, r3, #16
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	dba4      	blt.n	8007f54 <make_map_find+0x49c>
      }

      /* 列番号:32で割ったときの商 */
      for (i2 = 0; i2 < q0; i2++) {
 800800a:	2300      	movs	r3, #0
 800800c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008010:	f102 0210 	add.w	r2, r2, #16
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e01c      	b.n	8008052 <make_map_find+0x59a>
        num_temp_data[i2]--;
 8008018:	4a21      	ldr	r2, [pc, #132]	; (80080a0 <make_map_find+0x5e8>)
 800801a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800801e:	f103 0310 	add.w	r3, r3, #16
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008028:	3b01      	subs	r3, #1
 800802a:	b299      	uxth	r1, r3
 800802c:	4a1c      	ldr	r2, [pc, #112]	; (80080a0 <make_map_find+0x5e8>)
 800802e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008032:	f103 0310 	add.w	r3, r3, #16
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i2 = 0; i2 < q0; i2++) {
 800803c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008040:	f103 0310 	add.w	r3, r3, #16
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3301      	adds	r3, #1
 8008048:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800804c:	f102 0210 	add.w	r2, r2, #16
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008056:	f103 0310 	add.w	r3, r3, #16
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008060:	f103 0314 	add.w	r3, r3, #20
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	dbd6      	blt.n	8008018 <make_map_find+0x560>
      }

      idivide(num_temp_data, num_temp_size, tmp_data, tmp_size);
 800806a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800806e:	f607 0214 	addw	r2, r7, #2068	; 0x814
 8008072:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8008076:	f101 0118 	add.w	r1, r1, #24
 800807a:	4809      	ldr	r0, [pc, #36]	; (80080a0 <make_map_find+0x5e8>)
 800807c:	f7fe f970 	bl	8006360 <idivide>
      loop_ub = tmp_size[0];
 8008080:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800808a:	6013      	str	r3, [r2, #0]
      for (i2 = 0; i2 < loop_ub; i2++) {
 800808c:	2300      	movs	r3, #0
 800808e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008092:	f102 0210 	add.w	r2, r2, #16
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	e058      	b.n	800814c <make_map_find+0x694>
 800809a:	bf00      	nop
 800809c:	20002304 	.word	0x20002304
 80080a0:	20002b04 	.word	0x20002b04
 80080a4:	20003304 	.word	0x20003304
        b_qY = tmp_data[i2] + 1U;
 80080a8:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80080ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080b0:	f102 0210 	add.w	r2, r2, #16
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80080ba:	3301      	adds	r3, #1
 80080bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080c0:	f102 0218 	add.w	r2, r2, #24
 80080c4:	6013      	str	r3, [r2, #0]
        if (b_qY > 65535U) {
 80080c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080ca:	f103 0318 	add.w	r3, r3, #24
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d4:	d306      	bcc.n	80080e4 <make_map_find+0x62c>
          b_qY = 65535U;
 80080d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080de:	f102 0218 	add.w	r2, r2, #24
 80080e2:	6013      	str	r3, [r2, #0]
        }

        u0 = (unsigned short)b_qY;
 80080e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080e8:	f103 0318 	add.w	r3, r3, #24
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80080f2:	f102 021e 	add.w	r2, r2, #30
 80080f6:	8013      	strh	r3, [r2, #0]
        if ((unsigned short)b_qY > 255) {
 80080f8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080fc:	f103 0318 	add.w	r3, r3, #24
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	2bff      	cmp	r3, #255	; 0xff
 8008106:	d905      	bls.n	8008114 <make_map_find+0x65c>
          u0 = 255U;
 8008108:	23ff      	movs	r3, #255	; 0xff
 800810a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800810e:	f102 021e 	add.w	r2, r2, #30
 8008112:	8013      	strh	r3, [r2, #0]
        }

        col_data[i2] = (unsigned char)u0;
 8008114:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008118:	f103 031e 	add.w	r3, r3, #30
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b2d9      	uxtb	r1, r3
 8008120:	f107 0320 	add.w	r3, r7, #32
 8008124:	3b10      	subs	r3, #16
 8008126:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800812a:	f102 0210 	add.w	r2, r2, #16
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	4413      	add	r3, r2
 8008132:	460a      	mov	r2, r1
 8008134:	701a      	strb	r2, [r3, #0]
      for (i2 = 0; i2 < loop_ub; i2++) {
 8008136:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800813a:	f103 0310 	add.w	r3, r3, #16
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008146:	f102 0210 	add.w	r2, r2, #16
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008150:	f103 0310 	add.w	r3, r3, #16
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	dba3      	blt.n	80080a8 <make_map_find+0x5f0>
      }

      /* 見つかったマスの数 */
      if (idx < 0) {
 8008160:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008164:	f103 0308 	add.w	r3, r3, #8
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	da06      	bge.n	800817c <make_map_find+0x6c4>
        idx = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008174:	f102 0208 	add.w	r2, r2, #8
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	e00c      	b.n	8008196 <make_map_find+0x6de>
      } else {
        if (idx > 255) {
 800817c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008180:	f103 0308 	add.w	r3, r3, #8
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2bff      	cmp	r3, #255	; 0xff
 8008188:	dd05      	ble.n	8008196 <make_map_find+0x6de>
          idx = 255;
 800818a:	23ff      	movs	r3, #255	; 0xff
 800818c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008190:	f102 0208 	add.w	r2, r2, #8
 8008194:	6013      	str	r3, [r2, #0]
        }
      }

      /* 更新マスが見つからなければ終了 */
      if ((unsigned char)idx == 0) {
 8008196:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800819a:	f103 0308 	add.w	r3, r3, #8
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <make_map_find+0x6fc>
        exitg1 = true;
 80081a6:	2301      	movs	r3, #1
 80081a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081ac:	f102 020d 	add.w	r2, r2, #13
 80081b0:	7013      	strb	r3, [r2, #0]
 80081b2:	e2b3      	b.n	800871c <make_map_find+0xc64>
      } else {
        /* 検索した座標に対し、歩数mapを更新 */
        i2 = (unsigned char)idx;
 80081b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081b8:	f103 0308 	add.w	r3, r3, #8
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081c4:	f102 0210 	add.w	r2, r2, #16
 80081c8:	6013      	str	r3, [r2, #0]
        for (q0 = 0; q0 < i2; q0++) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081d0:	f102 0214 	add.w	r2, r2, #20
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	e289      	b.n	80086ec <make_map_find+0xc34>
          /* 北側 */
          k = g_direction->contents.North;
 80081d8:	f107 0320 	add.w	r3, r7, #32
 80081dc:	3b14      	subs	r3, #20
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80081e6:	f102 0203 	add.w	r2, r2, #3
 80081ea:	7013      	strb	r3, [r2, #0]
          idx = (col_data[q0] - 1) << 5;
 80081ec:	f107 0320 	add.w	r3, r7, #32
 80081f0:	3b10      	subs	r3, #16
 80081f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081f6:	f102 0214 	add.w	r2, r2, #20
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	4413      	add	r3, r2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	3b01      	subs	r3, #1
 8008202:	015b      	lsls	r3, r3, #5
 8008204:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008208:	f102 0208 	add.w	r2, r2, #8
 800820c:	6013      	str	r3, [r2, #0]
          loop_ub = row_data[q0] + idx;
 800820e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8008212:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008216:	f103 0314 	add.w	r3, r3, #20
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4413      	add	r3, r2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008226:	f103 0308 	add.w	r3, r3, #8
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4413      	add	r3, r2
 800822e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008232:	6013      	str	r3, [r2, #0]
          i3 = maze_wall[loop_ub - 1];
 8008234:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8008240:	f102 0218 	add.w	r2, r2, #24
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	4413      	add	r3, r2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800824e:	f102 021c 	add.w	r2, r2, #28
 8008252:	6013      	str	r3, [r2, #0]
          if (k <= 7) {
 8008254:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008258:	f103 0303 	add.w	r3, r3, #3
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b07      	cmp	r3, #7
 8008260:	d80e      	bhi.n	8008280 <make_map_find+0x7c8>
            b_k = (unsigned char)(1 << k);
 8008262:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008266:	f103 0303 	add.w	r3, r3, #3
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008278:	f102 0218 	add.w	r2, r2, #24
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	e005      	b.n	800828c <make_map_find+0x7d4>
          } else {
            b_k = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008286:	f102 0218 	add.w	r2, r2, #24
 800828a:	6013      	str	r3, [r2, #0]
          }

          if ((i3 & b_k) == wall->contents.nowall) {
 800828c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008290:	f103 031c 	add.w	r3, r3, #28
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800829a:	f103 0318 	add.w	r3, r3, #24
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	401a      	ands	r2, r3
 80082a2:	f107 0320 	add.w	r3, r7, #32
 80082a6:	3b18      	subs	r3, #24
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d16d      	bne.n	800838c <make_map_find+0x8d4>
            /* 北側のMAPが更新されているか判断、されていなければ書き込み */
            i4 = (int)(row_data[q0] + 1U);
 80082b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80082b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082b8:	f103 0314 	add.w	r3, r3, #20
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4413      	add	r3, r2
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80082c8:	f102 0214 	add.w	r2, r2, #20
 80082cc:	6013      	str	r3, [r2, #0]
            i5 = i4;
 80082ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082d2:	f103 0314 	add.w	r3, r3, #20
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80082dc:	f102 0210 	add.w	r2, r2, #16
 80082e0:	6013      	str	r3, [r2, #0]
            if ((unsigned int)i4 > 255U) {
 80082e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082e6:	f103 0314 	add.w	r3, r3, #20
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2bff      	cmp	r3, #255	; 0xff
 80082ee:	d905      	bls.n	80082fc <make_map_find+0x844>
              i5 = 255;
 80082f0:	23ff      	movs	r3, #255	; 0xff
 80082f2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80082f6:	f102 0210 	add.w	r2, r2, #16
 80082fa:	6013      	str	r3, [r2, #0]
            }

            if (contour_map[(i5 + idx) - 1] == (unsigned char)qY) {
 80082fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008300:	f103 0310 	add.w	r3, r3, #16
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800830a:	f103 0308 	add.w	r3, r3, #8
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4413      	add	r3, r2
 8008312:	3b01      	subs	r3, #1
 8008314:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8008318:	f102 021c 	add.w	r2, r2, #28
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	4413      	add	r3, r2
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008326:	f103 031c 	add.w	r3, r3, #28
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	429a      	cmp	r2, r3
 8008330:	d12c      	bne.n	800838c <make_map_find+0x8d4>
              if ((unsigned int)i4 > 255U) {
 8008332:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008336:	f103 0314 	add.w	r3, r3, #20
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2bff      	cmp	r3, #255	; 0xff
 800833e:	d905      	bls.n	800834c <make_map_find+0x894>
                i4 = 255;
 8008340:	23ff      	movs	r3, #255	; 0xff
 8008342:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008346:	f102 0214 	add.w	r2, r2, #20
 800834a:	6013      	str	r3, [r2, #0]
              }

              contour_map[(i4 + idx) - 1] = (unsigned char)(tempi + 1);
 800834c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008350:	f103 0314 	add.w	r3, r3, #20
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800835a:	f103 0308 	add.w	r3, r3, #8
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4413      	add	r3, r2
 8008362:	3b01      	subs	r3, #1
 8008364:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8008368:	f102 021c 	add.w	r2, r2, #28
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	4413      	add	r3, r2
 8008370:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008374:	f102 020e 	add.w	r2, r2, #14
 8008378:	7812      	ldrb	r2, [r2, #0]
 800837a:	3201      	adds	r2, #1
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 8008380:	2301      	movs	r3, #1
 8008382:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008386:	f102 020f 	add.w	r2, r2, #15
 800838a:	7013      	strb	r3, [r2, #0]
            }
          }

          /* 東側 */
          k = g_direction->contents.East;
 800838c:	f107 0320 	add.w	r3, r7, #32
 8008390:	3b14      	subs	r3, #20
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800839a:	f102 0203 	add.w	r2, r2, #3
 800839e:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 80083a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80083a4:	f103 0303 	add.w	r3, r3, #3
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b07      	cmp	r3, #7
 80083ac:	d80e      	bhi.n	80083cc <make_map_find+0x914>
            c_k = (unsigned char)(1 << k);
 80083ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80083b2:	f103 0303 	add.w	r3, r3, #3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2201      	movs	r2, #1
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80083c4:	f102 020c 	add.w	r2, r2, #12
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e005      	b.n	80083d8 <make_map_find+0x920>
          } else {
            c_k = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80083d2:	f102 020c 	add.w	r2, r2, #12
 80083d6:	6013      	str	r3, [r2, #0]
          }

          if ((i3 & c_k) == wall->contents.nowall) {
 80083d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80083dc:	f103 031c 	add.w	r3, r3, #28
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80083e6:	f103 030c 	add.w	r3, r3, #12
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	401a      	ands	r2, r3
 80083ee:	f107 0320 	add.w	r3, r7, #32
 80083f2:	3b18      	subs	r3, #24
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d17c      	bne.n	80084f6 <make_map_find+0xa3e>
            /* 東側のMAPが更新されているか判断、されていなければ書き込み */
            idx = (int)(col_data[q0] + 1U);
 80083fc:	f107 0320 	add.w	r3, r7, #32
 8008400:	3b10      	subs	r3, #16
 8008402:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008406:	f102 0214 	add.w	r2, r2, #20
 800840a:	6812      	ldr	r2, [r2, #0]
 800840c:	4413      	add	r3, r2
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008416:	f102 0208 	add.w	r2, r2, #8
 800841a:	6013      	str	r3, [r2, #0]
            i4 = idx;
 800841c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008420:	f103 0308 	add.w	r3, r3, #8
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800842a:	f102 0214 	add.w	r2, r2, #20
 800842e:	6013      	str	r3, [r2, #0]
            if ((unsigned int)idx > 255U) {
 8008430:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008434:	f103 0308 	add.w	r3, r3, #8
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2bff      	cmp	r3, #255	; 0xff
 800843c:	d905      	bls.n	800844a <make_map_find+0x992>
              i4 = 255;
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008444:	f102 0214 	add.w	r2, r2, #20
 8008448:	6013      	str	r3, [r2, #0]
            }

            if (contour_map[(row_data[q0] + ((i4 - 1) << 5)) - 1] == (unsigned
 800844a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800844e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008452:	f103 0314 	add.w	r3, r3, #20
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4413      	add	r3, r2
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008462:	f103 0314 	add.w	r3, r3, #20
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	015b      	lsls	r3, r3, #5
 800846c:	4413      	add	r3, r2
 800846e:	3b01      	subs	r3, #1
 8008470:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8008474:	f102 021c 	add.w	r2, r2, #28
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	4413      	add	r3, r2
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008482:	f103 031c 	add.w	r3, r3, #28
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	429a      	cmp	r2, r3
 800848c:	d133      	bne.n	80084f6 <make_map_find+0xa3e>
                 char)qY) {
              if ((unsigned int)idx > 255U) {
 800848e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008492:	f103 0308 	add.w	r3, r3, #8
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2bff      	cmp	r3, #255	; 0xff
 800849a:	d905      	bls.n	80084a8 <make_map_find+0x9f0>
                idx = 255;
 800849c:	23ff      	movs	r3, #255	; 0xff
 800849e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084a2:	f102 0208 	add.w	r2, r2, #8
 80084a6:	6013      	str	r3, [r2, #0]
              }

              contour_map[(row_data[q0] + ((idx - 1) << 5)) - 1] = (unsigned
 80084a8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80084ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084b0:	f103 0314 	add.w	r3, r3, #20
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4413      	add	r3, r2
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c0:	f103 0308 	add.w	r3, r3, #8
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	015b      	lsls	r3, r3, #5
 80084ca:	4413      	add	r3, r2
 80084cc:	3b01      	subs	r3, #1
 80084ce:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80084d2:	f102 021c 	add.w	r2, r2, #28
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	4413      	add	r3, r2
 80084da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084de:	f102 020e 	add.w	r2, r2, #14
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	3201      	adds	r2, #1
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
                char)(tempi + 1);
              change_flag = 1U;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084f0:	f102 020f 	add.w	r2, r2, #15
 80084f4:	7013      	strb	r3, [r2, #0]
            }
          }

          /* 南側 */
          k = g_direction->contents.South;
 80084f6:	f107 0320 	add.w	r3, r7, #32
 80084fa:	3b14      	subs	r3, #20
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	789b      	ldrb	r3, [r3, #2]
 8008500:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008504:	f102 0203 	add.w	r2, r2, #3
 8008508:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 800850a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800850e:	f103 0303 	add.w	r3, r3, #3
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b07      	cmp	r3, #7
 8008516:	d80e      	bhi.n	8008536 <make_map_find+0xa7e>
            d_k = (unsigned char)(1 << k);
 8008518:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800851c:	f103 0303 	add.w	r3, r3, #3
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800852e:	f102 0208 	add.w	r2, r2, #8
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	e005      	b.n	8008542 <make_map_find+0xa8a>
          } else {
            d_k = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800853c:	f102 0208 	add.w	r2, r2, #8
 8008540:	6013      	str	r3, [r2, #0]
          }

          if ((i3 & d_k) == wall->contents.nowall) {
 8008542:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008546:	f103 031c 	add.w	r3, r3, #28
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008550:	f103 0308 	add.w	r3, r3, #8
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	401a      	ands	r2, r3
 8008558:	f107 0320 	add.w	r3, r7, #32
 800855c:	3b18      	subs	r3, #24
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d135      	bne.n	80085d2 <make_map_find+0xb1a>
            /* 南側のMAPが更新されているか判断、されていなければ書き込み */
            idx = loop_ub - 2;
 8008566:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3b02      	subs	r3, #2
 800856e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008572:	f102 0208 	add.w	r2, r2, #8
 8008576:	6013      	str	r3, [r2, #0]
            if (contour_map[idx] == (unsigned char)qY) {
 8008578:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800857c:	f103 0308 	add.w	r3, r3, #8
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8008586:	f102 021c 	add.w	r2, r2, #28
 800858a:	6812      	ldr	r2, [r2, #0]
 800858c:	4413      	add	r3, r2
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008594:	f103 031c 	add.w	r3, r3, #28
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	429a      	cmp	r2, r3
 800859e:	d118      	bne.n	80085d2 <make_map_find+0xb1a>
              contour_map[idx] = (unsigned char)(tempi + 1);
 80085a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085a4:	f103 0308 	add.w	r3, r3, #8
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80085ae:	f102 021c 	add.w	r2, r2, #28
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085ba:	f102 020e 	add.w	r2, r2, #14
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	3201      	adds	r2, #1
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085cc:	f102 020f 	add.w	r2, r2, #15
 80085d0:	7013      	strb	r3, [r2, #0]
            }
          }

          /* 西側 */
          k = g_direction->contents.West;
 80085d2:	f107 0320 	add.w	r3, r7, #32
 80085d6:	3b14      	subs	r3, #20
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	78db      	ldrb	r3, [r3, #3]
 80085dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80085e0:	f102 0203 	add.w	r2, r2, #3
 80085e4:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 80085e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80085ea:	f103 0303 	add.w	r3, r3, #3
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b07      	cmp	r3, #7
 80085f2:	d80e      	bhi.n	8008612 <make_map_find+0xb5a>
            e_k = (unsigned char)(1 << k);
 80085f4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80085f8:	f103 0303 	add.w	r3, r3, #3
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2201      	movs	r2, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800860a:	f102 0204 	add.w	r2, r2, #4
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e005      	b.n	800861e <make_map_find+0xb66>
          } else {
            e_k = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008618:	f102 0204 	add.w	r2, r2, #4
 800861c:	6013      	str	r3, [r2, #0]
          }

          if ((i3 & e_k) == wall->contents.nowall) {
 800861e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008622:	f103 031c 	add.w	r3, r3, #28
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800862c:	f103 0304 	add.w	r3, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	401a      	ands	r2, r3
 8008634:	f107 0320 	add.w	r3, r7, #32
 8008638:	3b18      	subs	r3, #24
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d149      	bne.n	80086d6 <make_map_find+0xc1e>
            /* 西側のMAPが更新されているか判断、されていなければ書き込み */
            idx = (row_data[q0] + ((col_data[q0] - 2) << 5)) - 1;
 8008642:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8008646:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800864a:	f103 0314 	add.w	r3, r3, #20
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4413      	add	r3, r2
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4619      	mov	r1, r3
 8008656:	f107 0320 	add.w	r3, r7, #32
 800865a:	3b10      	subs	r3, #16
 800865c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008660:	f102 0214 	add.w	r2, r2, #20
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	4413      	add	r3, r2
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	3b02      	subs	r3, #2
 800866c:	015b      	lsls	r3, r3, #5
 800866e:	440b      	add	r3, r1
 8008670:	3b01      	subs	r3, #1
 8008672:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008676:	f102 0208 	add.w	r2, r2, #8
 800867a:	6013      	str	r3, [r2, #0]
            if (contour_map[idx] == (unsigned char)qY) {
 800867c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008680:	f103 0308 	add.w	r3, r3, #8
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800868a:	f102 021c 	add.w	r2, r2, #28
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	4413      	add	r3, r2
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008698:	f103 031c 	add.w	r3, r3, #28
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d118      	bne.n	80086d6 <make_map_find+0xc1e>
              contour_map[idx] = (unsigned char)(tempi + 1);
 80086a4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086a8:	f103 0308 	add.w	r3, r3, #8
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80086b2:	f102 021c 	add.w	r2, r2, #28
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	4413      	add	r3, r2
 80086ba:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086be:	f102 020e 	add.w	r2, r2, #14
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	3201      	adds	r2, #1
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086d0:	f102 020f 	add.w	r2, r2, #15
 80086d4:	7013      	strb	r3, [r2, #0]
        for (q0 = 0; q0 < i2; q0++) {
 80086d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086da:	f103 0314 	add.w	r3, r3, #20
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3301      	adds	r3, #1
 80086e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086e6:	f102 0214 	add.w	r2, r2, #20
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086f0:	f103 0314 	add.w	r3, r3, #20
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086fa:	f103 0310 	add.w	r3, r3, #16
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	f6ff ad69 	blt.w	80081d8 <make_map_find+0x720>
            }
          }
        }

        tempi++;
 8008706:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800870a:	f103 030e 	add.w	r3, r3, #14
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008716:	f102 020e 	add.w	r2, r2, #14
 800871a:	7013      	strb	r3, [r2, #0]
    while ((!exitg1) && (tempi <= (unsigned char)qY)) {
 800871c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008720:	f103 030d 	add.w	r3, r3, #13
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f083 0301 	eor.w	r3, r3, #1
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00d      	beq.n	800874c <make_map_find+0xc94>
 8008730:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008734:	f103 031c 	add.w	r3, r3, #28
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008740:	f102 020e 	add.w	r2, r2, #14
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	f67f aad6 	bls.w	8007cf8 <make_map_find+0x240>
      }
    }

    /* 更新がなければ終了     */
  } while (!(change_flag == 0));
 800874c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008750:	f103 030f 	add.w	r3, r3, #15
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f47f aaba 	bne.w	8007cd0 <make_map_find+0x218>
}
 800875c:	bf00      	nop
 800875e:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8008762:	3704      	adds	r7, #4
 8008764:	46bd      	mov	sp, r7
 8008766:	bd90      	pop	{r4, r7, pc}

08008768 <make_map_fustrun>:
  coder_internal_ref_4 *g_direction, const coder_internal_ref_2 *wall, const
  coder_internal_ref_1 *search, unsigned char maze_row_size, unsigned char
  maze_col_size, const unsigned char maze_goal[18], const unsigned char
  maze_wall[1024], const unsigned char maze_wall_search[1024], unsigned char
  contour_map[1024], unsigned char *max_length)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	f5ad 5dc3 	sub.w	sp, sp, #6240	; 0x1860
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	f107 0410 	add.w	r4, r7, #16
 8008776:	3c04      	subs	r4, #4
 8008778:	6020      	str	r0, [r4, #0]
 800877a:	f107 0010 	add.w	r0, r7, #16
 800877e:	3808      	subs	r0, #8
 8008780:	6001      	str	r1, [r0, #0]
 8008782:	f107 0110 	add.w	r1, r7, #16
 8008786:	390c      	subs	r1, #12
 8008788:	600a      	str	r2, [r1, #0]
 800878a:	f107 0210 	add.w	r2, r7, #16
 800878e:	3a10      	subs	r2, #16
 8008790:	6013      	str	r3, [r2, #0]
  int i_k;

  /*  make_map_fustrun 最短走行用等高線MAPを生成 */
  /* ローカル変数設定 */
  /*  迷路パラメータ設定 */
  qY = maze_col_size - 1U;
 8008792:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8008796:	f103 0304 	add.w	r3, r3, #4
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	3b01      	subs	r3, #1
 800879e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087a2:	f102 020c 	add.w	r2, r2, #12
 80087a6:	6013      	str	r3, [r2, #0]
  if (qY > maze_col_size) {
 80087a8:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80087ac:	f103 0304 	add.w	r3, r3, #4
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087b6:	f102 020c 	add.w	r2, r2, #12
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d905      	bls.n	80087cc <make_map_fustrun+0x64>
    qY = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087c6:	f102 020c 	add.w	r2, r2, #12
 80087ca:	6013      	str	r3, [r2, #0]
  }

  b_qY = maze_row_size - 1U;
 80087cc:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087d8:	f102 0208 	add.w	r2, r2, #8
 80087dc:	6013      	str	r3, [r2, #0]
  if (b_qY > maze_row_size) {
 80087de:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087e8:	f102 0208 	add.w	r2, r2, #8
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d905      	bls.n	80087fe <make_map_fustrun+0x96>
    b_qY = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80087f8:	f102 0208 	add.w	r2, r2, #8
 80087fc:	6013      	str	r3, [r2, #0]
  }

  q0 = (int)(qY * b_qY);
 80087fe:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008802:	f103 030c 	add.w	r3, r3, #12
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800880c:	f102 0208 	add.w	r2, r2, #8
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800881a:	f102 0204 	add.w	r2, r2, #4
 800881e:	6013      	str	r3, [r2, #0]
  if ((unsigned int)q0 > 255U) {
 8008820:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008824:	f103 0304 	add.w	r3, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2bff      	cmp	r3, #255	; 0xff
 800882c:	d905      	bls.n	800883a <make_map_fustrun+0xd2>
    q0 = 255;
 800882e:	23ff      	movs	r3, #255	; 0xff
 8008830:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008834:	f102 0204 	add.w	r2, r2, #4
 8008838:	6013      	str	r3, [r2, #0]
  }

  qY = q0 - 1U;
 800883a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800883e:	f103 0304 	add.w	r3, r3, #4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3b01      	subs	r3, #1
 8008846:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800884a:	f102 020c 	add.w	r2, r2, #12
 800884e:	6013      	str	r3, [r2, #0]
  if (qY > (unsigned int)q0) {
 8008850:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008854:	f103 0304 	add.w	r3, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800885e:	f102 020c 	add.w	r2, r2, #12
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d905      	bls.n	8008874 <make_map_fustrun+0x10c>
    qY = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800886e:	f102 020c 	add.w	r2, r2, #12
 8008872:	6013      	str	r3, [r2, #0]
  }

  *max_length = (unsigned char)qY;
 8008874:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008878:	f103 030c 	add.w	r3, r3, #12
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	b2da      	uxtb	r2, r3
 8008880:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8008884:	f103 0318 	add.w	r3, r3, #24
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	701a      	strb	r2, [r3, #0]

  /* MAPの初期化(すべての要素にmax_lengthを入力) */
  /* MAPの初期化(すべての要素にmax_lengthを入力) */
  /* 32マス分mapを保持 */
  for (i6 = 0; i6 < 1024; i6++) {
 800888c:	2300      	movs	r3, #0
 800888e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e016      	b.n	80088c4 <make_map_fustrun+0x15c>
    contour_map[i6] = (unsigned char)qY;
 8008896:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80088a0:	f102 0214 	add.w	r2, r2, #20
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	4413      	add	r3, r2
 80088a8:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80088ac:	f102 020c 	add.w	r2, r2, #12
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]
  for (i6 = 0; i6 < 1024; i6++) {
 80088b6:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ce:	dbe2      	blt.n	8008896 <make_map_fustrun+0x12e>
  }

  /* ゴール座標に0を入力 */
  change_flag = goal_size->contents;
 80088d0:	f107 0310 	add.w	r3, r7, #16
 80088d4:	3b04      	subs	r3, #4
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80088de:	f102 021f 	add.w	r2, r2, #31
 80088e2:	7013      	strb	r3, [r2, #0]
  i6 = change_flag;
 80088e4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80088e8:	f103 031f 	add.w	r3, r3, #31
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80088f2:	6013      	str	r3, [r2, #0]
  for (q0 = 0; q0 < i6; q0++) {
 80088f4:	2300      	movs	r3, #0
 80088f6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80088fa:	f102 0204 	add.w	r2, r2, #4
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	e030      	b.n	8008964 <make_map_fustrun+0x1fc>
    contour_map[(maze_goal[q0 + 9] + ((maze_goal[q0] - 1) << 5)) - 1] = 0U;
 8008902:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008906:	f103 0304 	add.w	r3, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3309      	adds	r3, #9
 800890e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008912:	f102 0208 	add.w	r2, r2, #8
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	4413      	add	r3, r2
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4619      	mov	r1, r3
 800891e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008922:	f103 0304 	add.w	r3, r3, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800892c:	f102 0208 	add.w	r2, r2, #8
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	4413      	add	r3, r2
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	3b01      	subs	r3, #1
 8008938:	015b      	lsls	r3, r3, #5
 800893a:	440b      	add	r3, r1
 800893c:	3b01      	subs	r3, #1
 800893e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008942:	f102 0214 	add.w	r2, r2, #20
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	4413      	add	r3, r2
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
  for (q0 = 0; q0 < i6; q0++) {
 800894e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008952:	f103 0304 	add.w	r3, r3, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3301      	adds	r3, #1
 800895a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800895e:	f102 0204 	add.w	r2, r2, #4
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008968:	f103 0304 	add.w	r3, r3, #4
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	dbc4      	blt.n	8008902 <make_map_fustrun+0x19a>
  }

  do {
    change_flag = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800897e:	f102 021f 	add.w	r2, r2, #31
 8008982:	7013      	strb	r3, [r2, #0]

    /* map更新確認用フラグ */
    for (tempi = 0; tempi <= *max_length; tempi++) {
 8008984:	2300      	movs	r3, #0
 8008986:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800898a:	f102 021e 	add.w	r2, r2, #30
 800898e:	7013      	strb	r3, [r2, #0]
 8008990:	f000 beae 	b.w	80096f0 <make_map_fustrun+0xf88>
      /* 歩数カウントは0~max_length */
      /* 歩数が確定している座標を検索 */
      /* 最初は0,更新され、増加したマスを次々検索していく */
      idx = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800899a:	f102 0218 	add.w	r2, r2, #24
 800899e:	6013      	str	r3, [r2, #0]
      q0 = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80089a6:	f102 0204 	add.w	r2, r2, #4
 80089aa:	6013      	str	r3, [r2, #0]
      exitg1 = false;
 80089ac:	2300      	movs	r3, #0
 80089ae:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80089b2:	f102 0217 	add.w	r2, r2, #23
 80089b6:	7013      	strb	r3, [r2, #0]
      while ((!exitg1) && (q0 < 1024)) {
 80089b8:	e055      	b.n	8008a66 <make_map_fustrun+0x2fe>
        if (contour_map[q0] == tempi) {
 80089ba:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80089be:	f103 0304 	add.w	r3, r3, #4
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80089c8:	f102 0214 	add.w	r2, r2, #20
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	4413      	add	r3, r2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80089d6:	f102 021e 	add.w	r2, r2, #30
 80089da:	7812      	ldrb	r2, [r2, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d137      	bne.n	8008a50 <make_map_fustrun+0x2e8>
          idx++;
 80089e0:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80089e4:	f103 0318 	add.w	r3, r3, #24
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80089f0:	f102 0218 	add.w	r2, r2, #24
 80089f4:	6013      	str	r3, [r2, #0]
          ii_data[idx - 1] = (short)(q0 + 1);
 80089f6:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80089fa:	f103 0304 	add.w	r3, r3, #4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3301      	adds	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008a0a:	f103 0318 	add.w	r3, r3, #24
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b211      	sxth	r1, r2
 8008a14:	4ab9      	ldr	r2, [pc, #740]	; (8008cfc <make_map_fustrun+0x594>)
 8008a16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
          if (idx >= 1024) {
 8008a1a:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008a1e:	f103 0318 	add.w	r3, r3, #24
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	db06      	blt.n	8008a38 <make_map_fustrun+0x2d0>
            exitg1 = true;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008a30:	f102 0217 	add.w	r2, r2, #23
 8008a34:	7013      	strb	r3, [r2, #0]
 8008a36:	e016      	b.n	8008a66 <make_map_fustrun+0x2fe>
          } else {
            q0++;
 8008a38:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008a3c:	f103 0304 	add.w	r3, r3, #4
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008a48:	f102 0204 	add.w	r2, r2, #4
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	e00a      	b.n	8008a66 <make_map_fustrun+0x2fe>
          }
        } else {
          q0++;
 8008a50:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008a54:	f103 0304 	add.w	r3, r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008a60:	f102 0204 	add.w	r2, r2, #4
 8008a64:	6013      	str	r3, [r2, #0]
      while ((!exitg1) && (q0 < 1024)) {
 8008a66:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008a6a:	f103 0317 	add.w	r3, r3, #23
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f083 0301 	eor.w	r3, r3, #1
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <make_map_fustrun+0x322>
 8008a7a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008a7e:	f103 0304 	add.w	r3, r3, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a88:	db97      	blt.n	80089ba <make_map_fustrun+0x252>
        }
      }

      if (1 > idx) {
 8008a8a:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008a8e:	f103 0318 	add.w	r3, r3, #24
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc0c      	bgt.n	8008ab2 <make_map_fustrun+0x34a>
        loop_ub = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008a9e:	f102 0210 	add.w	r2, r2, #16
 8008aa2:	6013      	str	r3, [r2, #0]
        q0 = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008aaa:	f102 0204 	add.w	r2, r2, #4
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	e013      	b.n	8008ada <make_map_fustrun+0x372>
      } else {
        loop_ub = idx;
 8008ab2:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008ab6:	f103 0318 	add.w	r3, r3, #24
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008ac0:	f102 0210 	add.w	r2, r2, #16
 8008ac4:	6013      	str	r3, [r2, #0]
        q0 = idx;
 8008ac6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008aca:	f103 0318 	add.w	r3, r3, #24
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008ad4:	f102 0204 	add.w	r2, r2, #4
 8008ad8:	6013      	str	r3, [r2, #0]
      }

      num_temp_size[0] = loop_ub;
 8008ada:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008ade:	f103 0310 	add.w	r3, r3, #16
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8008ae8:	f102 021c 	add.w	r2, r2, #28
 8008aec:	6013      	str	r3, [r2, #0]
      for (i6 = 0; i6 < loop_ub; i6++) {
 8008aee:	2300      	movs	r3, #0
 8008af0:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e013      	b.n	8008b20 <make_map_fustrun+0x3b8>
        num_temp_data[i6] = (unsigned short)ii_data[i6];
 8008af8:	4a80      	ldr	r2, [pc, #512]	; (8008cfc <make_map_fustrun+0x594>)
 8008afa:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008b04:	b299      	uxth	r1, r3
 8008b06:	4a7e      	ldr	r2, [pc, #504]	; (8008d00 <make_map_fustrun+0x598>)
 8008b08:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i6 = 0; i6 < loop_ub; i6++) {
 8008b12:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008b2a:	f103 0310 	add.w	r3, r3, #16
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	dbe1      	blt.n	8008af8 <make_map_fustrun+0x390>
      }

      /* 32行なので、行番号:32で割ったあまり */
      b_num_temp_size[0] = q0;
 8008b34:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b38:	f103 0304 	add.w	r3, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8008b42:	f102 0218 	add.w	r2, r2, #24
 8008b46:	6013      	str	r3, [r2, #0]
      for (i6 = 0; i6 < q0; i6++) {
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e017      	b.n	8008b82 <make_map_fustrun+0x41a>
        b_num_temp_data[i6] = (unsigned short)(num_temp_data[i6] - 1U);
 8008b52:	4a6b      	ldr	r2, [pc, #428]	; (8008d00 <make_map_fustrun+0x598>)
 8008b54:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b299      	uxth	r1, r3
 8008b62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008b66:	f103 0318 	add.w	r3, r3, #24
 8008b6a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for (i6 = 0; i6 < q0; i6++) {
 8008b74:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008b8c:	f103 0304 	add.w	r3, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	dbdd      	blt.n	8008b52 <make_map_fustrun+0x3ea>
      }

      b_rem(b_num_temp_data, b_num_temp_size, tmp_data, tmp_size);
 8008b96:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008b9a:	3b1c      	subs	r3, #28
 8008b9c:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 8008ba0:	3a18      	subs	r2, #24
 8008ba2:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 8008ba6:	f101 0118 	add.w	r1, r1, #24
 8008baa:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8008bae:	f100 0018 	add.w	r0, r0, #24
 8008bb2:	f003 fb73 	bl	800c29c <b_rem>
      loop_ub = tmp_size[0];
 8008bb6:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008bba:	3b1c      	subs	r3, #28
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008bc2:	f102 0210 	add.w	r2, r2, #16
 8008bc6:	6013      	str	r3, [r2, #0]
      for (i6 = 0; i6 < loop_ub; i6++) {
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	e04a      	b.n	8008c68 <make_map_fustrun+0x500>
        b_qY = tmp_data[i6] + 1U;
 8008bd2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008bd6:	3b18      	subs	r3, #24
 8008bd8:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008be2:	3301      	adds	r3, #1
 8008be4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008be8:	f102 0208 	add.w	r2, r2, #8
 8008bec:	6013      	str	r3, [r2, #0]
        if (b_qY > 65535U) {
 8008bee:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008bf2:	f103 0308 	add.w	r3, r3, #8
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfc:	d306      	bcc.n	8008c0c <make_map_fustrun+0x4a4>
          b_qY = 65535U;
 8008bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c02:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008c06:	f102 0208 	add.w	r2, r2, #8
 8008c0a:	6013      	str	r3, [r2, #0]
        }

        u1 = (unsigned short)b_qY;
 8008c0c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c10:	f103 0308 	add.w	r3, r3, #8
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008c1a:	f102 020e 	add.w	r2, r2, #14
 8008c1e:	8013      	strh	r3, [r2, #0]
        if ((unsigned short)b_qY > 255) {
 8008c20:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c24:	f103 0308 	add.w	r3, r3, #8
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2bff      	cmp	r3, #255	; 0xff
 8008c2e:	d905      	bls.n	8008c3c <make_map_fustrun+0x4d4>
          u1 = 255U;
 8008c30:	23ff      	movs	r3, #255	; 0xff
 8008c32:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008c36:	f102 020e 	add.w	r2, r2, #14
 8008c3a:	8013      	strh	r3, [r2, #0]
        }

        row_data[i6] = (unsigned char)u1;
 8008c3c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008c40:	f103 030e 	add.w	r3, r3, #14
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b2d9      	uxtb	r1, r3
 8008c48:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008c4c:	3b1c      	subs	r3, #28
 8008c4e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008c52:	6812      	ldr	r2, [r2, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	460a      	mov	r2, r1
 8008c58:	701a      	strb	r2, [r3, #0]
      for (i6 = 0; i6 < loop_ub; i6++) {
 8008c5a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008c72:	f103 0310 	add.w	r3, r3, #16
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	dbaa      	blt.n	8008bd2 <make_map_fustrun+0x46a>
      }

      /* 列番号:32で割ったときの商 */
      for (i6 = 0; i6 < q0; i6++) {
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	e014      	b.n	8008cb0 <make_map_fustrun+0x548>
        num_temp_data[i6]--;
 8008c86:	4a1e      	ldr	r2, [pc, #120]	; (8008d00 <make_map_fustrun+0x598>)
 8008c88:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b299      	uxth	r1, r3
 8008c96:	4a1a      	ldr	r2, [pc, #104]	; (8008d00 <make_map_fustrun+0x598>)
 8008c98:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i6 = 0; i6 < q0; i6++) {
 8008ca2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008cba:	f103 0304 	add.w	r3, r3, #4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	dbe0      	blt.n	8008c86 <make_map_fustrun+0x51e>
      }

      idivide(num_temp_data, num_temp_size, tmp_data, tmp_size);
 8008cc4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008cc8:	3b1c      	subs	r3, #28
 8008cca:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 8008cce:	3a18      	subs	r2, #24
 8008cd0:	f507 51c0 	add.w	r1, r7, #6144	; 0x1800
 8008cd4:	f101 011c 	add.w	r1, r1, #28
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <make_map_fustrun+0x598>)
 8008cda:	f7fd fb41 	bl	8006360 <idivide>
      q0 = tmp_size[0];
 8008cde:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008ce2:	3b1c      	subs	r3, #28
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008cea:	f102 0204 	add.w	r2, r2, #4
 8008cee:	6013      	str	r3, [r2, #0]
      for (i6 = 0; i6 < q0; i6++) {
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e04f      	b.n	8008d9a <make_map_fustrun+0x632>
 8008cfa:	bf00      	nop
 8008cfc:	20003b04 	.word	0x20003b04
 8008d00:	20004304 	.word	0x20004304
        b_qY = tmp_data[i6] + 1U;
 8008d04:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8008d08:	3b18      	subs	r3, #24
 8008d0a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008d14:	3301      	adds	r3, #1
 8008d16:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008d1a:	f102 0208 	add.w	r2, r2, #8
 8008d1e:	6013      	str	r3, [r2, #0]
        if (b_qY > 65535U) {
 8008d20:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008d24:	f103 0308 	add.w	r3, r3, #8
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d2e:	d306      	bcc.n	8008d3e <make_map_fustrun+0x5d6>
          b_qY = 65535U;
 8008d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d34:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008d38:	f102 0208 	add.w	r2, r2, #8
 8008d3c:	6013      	str	r3, [r2, #0]
        }

        u1 = (unsigned short)b_qY;
 8008d3e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008d42:	f103 0308 	add.w	r3, r3, #8
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008d4c:	f102 020e 	add.w	r2, r2, #14
 8008d50:	8013      	strh	r3, [r2, #0]
        if ((unsigned short)b_qY > 255) {
 8008d52:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008d56:	f103 0308 	add.w	r3, r3, #8
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2bff      	cmp	r3, #255	; 0xff
 8008d60:	d905      	bls.n	8008d6e <make_map_fustrun+0x606>
          u1 = 255U;
 8008d62:	23ff      	movs	r3, #255	; 0xff
 8008d64:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008d68:	f102 020e 	add.w	r2, r2, #14
 8008d6c:	8013      	strh	r3, [r2, #0]
        }

        col_data[i6] = (unsigned char)u1;
 8008d6e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008d72:	f103 030e 	add.w	r3, r3, #14
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b2d9      	uxtb	r1, r3
 8008d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d7e:	3b1c      	subs	r3, #28
 8008d80:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	4413      	add	r3, r2
 8008d88:	460a      	mov	r2, r1
 8008d8a:	701a      	strb	r2, [r3, #0]
      for (i6 = 0; i6 < q0; i6++) {
 8008d8c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3301      	adds	r3, #1
 8008d94:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008da4:	f103 0304 	add.w	r3, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	dbaa      	blt.n	8008d04 <make_map_fustrun+0x59c>
      }

      /* 見つかったマスの数 */
      /* 検索した座標に対し、歩数mapを更新 */
      for (q0 = 0; q0 < loop_ub; q0++) {
 8008dae:	2300      	movs	r3, #0
 8008db0:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008db4:	f102 0204 	add.w	r2, r2, #4
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	f000 bc81 	b.w	80096c0 <make_map_fustrun+0xf58>
        /* 北側 */
        /* 壁が無い & 探索済みであるとき */
        k = g_direction->contents.North;
 8008dbe:	f107 0310 	add.w	r3, r7, #16
 8008dc2:	3b08      	subs	r3, #8
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8008dcc:	f102 0203 	add.w	r2, r2, #3
 8008dd0:	7013      	strb	r3, [r2, #0]
        i6 = (unsigned short)(1 + q0) - 1;
 8008dd2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008dd6:	f103 0304 	add.w	r3, r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3301      	adds	r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008de8:	6013      	str	r3, [r2, #0]
        idx = (col_data[i6] - 1) << 5;
 8008dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dee:	3b1c      	subs	r3, #28
 8008df0:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008df4:	6812      	ldr	r2, [r2, #0]
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	015b      	lsls	r3, r3, #5
 8008dfe:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008e02:	f102 0218 	add.w	r2, r2, #24
 8008e06:	6013      	str	r3, [r2, #0]
        i6 = row_data[i6] + idx;
 8008e08:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008e0c:	3b1c      	subs	r3, #28
 8008e0e:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	4413      	add	r3, r2
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008e1e:	f103 0318 	add.w	r3, r3, #24
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8008e2a:	6013      	str	r3, [r2, #0]
        i7 = i6 - 1;
 8008e2c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008e38:	f102 0208 	add.w	r2, r2, #8
 8008e3c:	6013      	str	r3, [r2, #0]
        if (k <= 7) {
 8008e3e:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8008e42:	f103 0303 	add.w	r3, r3, #3
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b07      	cmp	r3, #7
 8008e4a:	d80e      	bhi.n	8008e6a <make_map_fustrun+0x702>
          b_k = (unsigned char)(1 << k);
 8008e4c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8008e50:	f103 0303 	add.w	r3, r3, #3
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2201      	movs	r2, #1
 8008e58:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008e62:	f102 0204 	add.w	r2, r2, #4
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	e005      	b.n	8008e76 <make_map_fustrun+0x70e>
        } else {
          b_k = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008e70:	f102 0204 	add.w	r2, r2, #4
 8008e74:	6013      	str	r3, [r2, #0]
        }

        if (((maze_wall[i7] & b_k) != 0) == wall->contents.nowall) {
 8008e76:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008e7a:	f103 0308 	add.w	r3, r3, #8
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008e84:	f102 020c 	add.w	r2, r2, #12
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008e94:	f103 0304 	add.w	r3, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bf14      	ite	ne
 8008ea0:	2301      	movne	r3, #1
 8008ea2:	2300      	moveq	r3, #0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f107 0310 	add.w	r3, r7, #16
 8008eac:	3b0c      	subs	r3, #12
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f040 80b2 	bne.w	800901c <make_map_fustrun+0x8b4>
          k = g_direction->contents.North;
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	3b08      	subs	r3, #8
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8008ec6:	f102 0203 	add.w	r2, r2, #3
 8008eca:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 8008ecc:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8008ed0:	f103 0303 	add.w	r3, r3, #3
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b07      	cmp	r3, #7
 8008ed8:	d80c      	bhi.n	8008ef4 <make_map_fustrun+0x78c>
            c_k = (unsigned char)(1 << k);
 8008eda:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8008ede:	f103 0303 	add.w	r3, r3, #3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	e003      	b.n	8008efc <make_map_fustrun+0x794>
          } else {
            c_k = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008efa:	6013      	str	r3, [r2, #0]
          }

          if (((maze_wall_search[i7] & c_k) != 0) == search->contents.known) {
 8008efc:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008f00:	f103 0308 	add.w	r3, r3, #8
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008f0a:	f102 0210 	add.w	r2, r2, #16
 8008f0e:	6812      	ldr	r2, [r2, #0]
 8008f10:	4413      	add	r3, r2
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f107 0310 	add.w	r3, r7, #16
 8008f2e:	3b10      	subs	r3, #16
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d171      	bne.n	800901c <make_map_fustrun+0x8b4>
            /* 北側のMAPが更新されているか判断、されていなければ書き込み */
            i7 = (int)(row_data[(unsigned short)(1 + q0) - 1] + 1U);
 8008f38:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008f3c:	f103 0304 	add.w	r3, r3, #4
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3301      	adds	r3, #1
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	1e5a      	subs	r2, r3, #1
 8008f4a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008f4e:	3b1c      	subs	r3, #28
 8008f50:	5c9b      	ldrb	r3, [r3, r2]
 8008f52:	3301      	adds	r3, #1
 8008f54:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008f58:	f102 0208 	add.w	r2, r2, #8
 8008f5c:	6013      	str	r3, [r2, #0]
            i8 = i7;
 8008f5e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008f62:	f103 0308 	add.w	r3, r3, #8
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8008f6c:	f102 0218 	add.w	r2, r2, #24
 8008f70:	6013      	str	r3, [r2, #0]
            if ((unsigned int)i7 > 255U) {
 8008f72:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008f76:	f103 0308 	add.w	r3, r3, #8
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2bff      	cmp	r3, #255	; 0xff
 8008f7e:	d905      	bls.n	8008f8c <make_map_fustrun+0x824>
              i8 = 255;
 8008f80:	23ff      	movs	r3, #255	; 0xff
 8008f82:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8008f86:	f102 0218 	add.w	r2, r2, #24
 8008f8a:	6013      	str	r3, [r2, #0]
            }

            if (contour_map[(i8 + idx) - 1] == (unsigned char)qY) {
 8008f8c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8008f90:	f103 0318 	add.w	r3, r3, #24
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008f9a:	f103 0318 	add.w	r3, r3, #24
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008fa8:	f102 0214 	add.w	r2, r2, #20
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	4413      	add	r3, r2
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8008fb6:	f103 030c 	add.w	r3, r3, #12
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d12c      	bne.n	800901c <make_map_fustrun+0x8b4>
              if ((unsigned int)i7 > 255U) {
 8008fc2:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008fc6:	f103 0308 	add.w	r3, r3, #8
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2bff      	cmp	r3, #255	; 0xff
 8008fce:	d905      	bls.n	8008fdc <make_map_fustrun+0x874>
                i7 = 255;
 8008fd0:	23ff      	movs	r3, #255	; 0xff
 8008fd2:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8008fd6:	f102 0208 	add.w	r2, r2, #8
 8008fda:	6013      	str	r3, [r2, #0]
              }

              contour_map[(i7 + idx) - 1] = (unsigned char)(tempi + 1);
 8008fdc:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008fe0:	f103 0308 	add.w	r3, r3, #8
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8008fea:	f103 0318 	add.w	r3, r3, #24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8008ff8:	f102 0214 	add.w	r2, r2, #20
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	4413      	add	r3, r2
 8009000:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009004:	f102 021e 	add.w	r2, r2, #30
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	3201      	adds	r2, #1
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 8009010:	2301      	movs	r3, #1
 8009012:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009016:	f102 021f 	add.w	r2, r2, #31
 800901a:	7013      	strb	r3, [r2, #0]
            }
          }
        }

        /* 東側 */
        k = g_direction->contents.East;
 800901c:	f107 0310 	add.w	r3, r7, #16
 8009020:	3b08      	subs	r3, #8
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800902a:	f102 0203 	add.w	r2, r2, #3
 800902e:	7013      	strb	r3, [r2, #0]
        if (k <= 7) {
 8009030:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009034:	f103 0303 	add.w	r3, r3, #3
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b07      	cmp	r3, #7
 800903c:	d80e      	bhi.n	800905c <make_map_fustrun+0x8f4>
          d_k = (unsigned char)(1 << k);
 800903e:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009042:	f103 0303 	add.w	r3, r3, #3
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2201      	movs	r2, #1
 800904a:	fa02 f303 	lsl.w	r3, r2, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009054:	f102 021c 	add.w	r2, r2, #28
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e005      	b.n	8009068 <make_map_fustrun+0x900>
        } else {
          d_k = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009062:	f102 021c 	add.w	r2, r2, #28
 8009066:	6013      	str	r3, [r2, #0]
        }

        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 8009068:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800906c:	f103 0304 	add.w	r3, r3, #4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	3301      	adds	r3, #1
 8009076:	b29b      	uxth	r3, r3
 8009078:	1e5a      	subs	r2, r3, #1
 800907a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800907e:	3b1c      	subs	r3, #28
 8009080:	5c9b      	ldrb	r3, [r3, r2]
 8009082:	4619      	mov	r1, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & d_k) != 0) ==
 8009084:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009088:	f103 0304 	add.w	r3, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	3301      	adds	r3, #1
 8009092:	b29b      	uxth	r3, r3
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800909a:	3b1c      	subs	r3, #28
 800909c:	5c9b      	ldrb	r3, [r3, r2]
 800909e:	3b01      	subs	r3, #1
 80090a0:	015b      	lsls	r3, r3, #5
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 80090a2:	440b      	add	r3, r1
 80090a4:	3b01      	subs	r3, #1
 80090a6:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80090aa:	f102 020c 	add.w	r2, r2, #12
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	4413      	add	r3, r2
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & d_k) != 0) ==
 80090b6:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80090ba:	f103 031c 	add.w	r3, r3, #28
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bf14      	ite	ne
 80090c6:	2301      	movne	r3, #1
 80090c8:	2300      	moveq	r3, #0
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	461a      	mov	r2, r3
            wall->contents.nowall) {
 80090ce:	f107 0310 	add.w	r3, r7, #16
 80090d2:	3b0c      	subs	r3, #12
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 80090d8:	429a      	cmp	r2, r3
 80090da:	f040 80e9 	bne.w	80092b0 <make_map_fustrun+0xb48>
          k = g_direction->contents.East;
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	3b08      	subs	r3, #8
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80090ec:	f102 0203 	add.w	r2, r2, #3
 80090f0:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 80090f2:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80090f6:	f103 0303 	add.w	r3, r3, #3
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b07      	cmp	r3, #7
 80090fe:	d80e      	bhi.n	800911e <make_map_fustrun+0x9b6>
            e_k = (unsigned char)(1 << k);
 8009100:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009104:	f103 0303 	add.w	r3, r3, #3
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2201      	movs	r2, #1
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009116:	f102 0214 	add.w	r2, r2, #20
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	e005      	b.n	800912a <make_map_fustrun+0x9c2>
          } else {
            e_k = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009124:	f102 0214 	add.w	r2, r2, #20
 8009128:	6013      	str	r3, [r2, #0]
          }

          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 800912a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800912e:	f103 0304 	add.w	r3, r3, #4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	3301      	adds	r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	1e5a      	subs	r2, r3, #1
 800913c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009140:	3b1c      	subs	r3, #28
 8009142:	5c9b      	ldrb	r3, [r3, r2]
 8009144:	4619      	mov	r1, r3
                                  ((col_data[(unsigned short)(1 + q0) - 1] - 1) <<
 8009146:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800914a:	f103 0304 	add.w	r3, r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	3301      	adds	r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	1e5a      	subs	r2, r3, #1
 8009158:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800915c:	3b1c      	subs	r3, #28
 800915e:	5c9b      	ldrb	r3, [r3, r2]
 8009160:	3b01      	subs	r3, #1
 8009162:	015b      	lsls	r3, r3, #5
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 8009164:	440b      	add	r3, r1
 8009166:	3b01      	subs	r3, #1
 8009168:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800916c:	f102 0210 	add.w	r2, r2, #16
 8009170:	6812      	ldr	r2, [r2, #0]
 8009172:	4413      	add	r3, r2
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
                  5)) - 1] & e_k) != 0) == search->contents.known) {
 8009178:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800917c:	f103 0314 	add.w	r3, r3, #20
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4013      	ands	r3, r2
 8009184:	2b00      	cmp	r3, #0
 8009186:	bf14      	ite	ne
 8009188:	2301      	movne	r3, #1
 800918a:	2300      	moveq	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	461a      	mov	r2, r3
 8009190:	f107 0310 	add.w	r3, r7, #16
 8009194:	3b10      	subs	r3, #16
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 800919a:	429a      	cmp	r2, r3
 800919c:	f040 8088 	bne.w	80092b0 <make_map_fustrun+0xb48>
            /* 東側のMAPが更新されているか判断、されていなければ書き込み */
            idx = (int)(col_data[(unsigned short)(1 + q0) - 1] + 1U);
 80091a0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80091a4:	f103 0304 	add.w	r3, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3301      	adds	r3, #1
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	1e5a      	subs	r2, r3, #1
 80091b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091b6:	3b1c      	subs	r3, #28
 80091b8:	5c9b      	ldrb	r3, [r3, r2]
 80091ba:	3301      	adds	r3, #1
 80091bc:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80091c0:	f102 0218 	add.w	r2, r2, #24
 80091c4:	6013      	str	r3, [r2, #0]
            i7 = idx;
 80091c6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80091ca:	f103 0318 	add.w	r3, r3, #24
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80091d4:	f102 0208 	add.w	r2, r2, #8
 80091d8:	6013      	str	r3, [r2, #0]
            if ((unsigned int)idx > 255U) {
 80091da:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80091de:	f103 0318 	add.w	r3, r3, #24
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2bff      	cmp	r3, #255	; 0xff
 80091e6:	d905      	bls.n	80091f4 <make_map_fustrun+0xa8c>
              i7 = 255;
 80091e8:	23ff      	movs	r3, #255	; 0xff
 80091ea:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80091ee:	f102 0208 	add.w	r2, r2, #8
 80091f2:	6013      	str	r3, [r2, #0]
            }

            if (contour_map[(row_data[(unsigned short)(1 + q0) - 1] + ((i7 - 1) <<
 80091f4:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80091f8:	f103 0304 	add.w	r3, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3301      	adds	r3, #1
 8009202:	b29b      	uxth	r3, r3
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800920a:	3b1c      	subs	r3, #28
 800920c:	5c9b      	ldrb	r3, [r3, r2]
 800920e:	461a      	mov	r2, r3
 8009210:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8009214:	f103 0308 	add.w	r3, r3, #8
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3b01      	subs	r3, #1
 800921c:	015b      	lsls	r3, r3, #5
 800921e:	4413      	add	r3, r2
 8009220:	3b01      	subs	r3, #1
 8009222:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8009226:	f102 0214 	add.w	r2, r2, #20
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	4413      	add	r3, r2
 800922e:	781a      	ldrb	r2, [r3, #0]
                  5)) - 1] == (unsigned char)qY) {
 8009230:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009234:	f103 030c 	add.w	r3, r3, #12
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	b2db      	uxtb	r3, r3
            if (contour_map[(row_data[(unsigned short)(1 + q0) - 1] + ((i7 - 1) <<
 800923c:	429a      	cmp	r2, r3
 800923e:	d137      	bne.n	80092b0 <make_map_fustrun+0xb48>
              if ((unsigned int)idx > 255U) {
 8009240:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8009244:	f103 0318 	add.w	r3, r3, #24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2bff      	cmp	r3, #255	; 0xff
 800924c:	d905      	bls.n	800925a <make_map_fustrun+0xaf2>
                idx = 255;
 800924e:	23ff      	movs	r3, #255	; 0xff
 8009250:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009254:	f102 0218 	add.w	r2, r2, #24
 8009258:	6013      	str	r3, [r2, #0]
              }

              contour_map[(row_data[(unsigned short)(1 + q0) - 1] + ((idx - 1) <<
 800925a:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800925e:	f103 0304 	add.w	r3, r3, #4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	3301      	adds	r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	1e5a      	subs	r2, r3, #1
 800926c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009270:	3b1c      	subs	r3, #28
 8009272:	5c9b      	ldrb	r3, [r3, r2]
 8009274:	461a      	mov	r2, r3
 8009276:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800927a:	f103 0318 	add.w	r3, r3, #24
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	015b      	lsls	r3, r3, #5
 8009284:	4413      	add	r3, r2
 8009286:	3b01      	subs	r3, #1
 8009288:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800928c:	f102 0214 	add.w	r2, r2, #20
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	4413      	add	r3, r2
                5)) - 1] = (unsigned char)(tempi + 1);
 8009294:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009298:	f102 021e 	add.w	r2, r2, #30
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	3201      	adds	r2, #1
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80092aa:	f102 021f 	add.w	r2, r2, #31
 80092ae:	7013      	strb	r3, [r2, #0]
            }
          }
        }

        /* 南側 */
        k = g_direction->contents.South;
 80092b0:	f107 0310 	add.w	r3, r7, #16
 80092b4:	3b08      	subs	r3, #8
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	789b      	ldrb	r3, [r3, #2]
 80092ba:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80092be:	f102 0203 	add.w	r2, r2, #3
 80092c2:	7013      	strb	r3, [r2, #0]
        if (k <= 7) {
 80092c4:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80092c8:	f103 0303 	add.w	r3, r3, #3
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b07      	cmp	r3, #7
 80092d0:	d80e      	bhi.n	80092f0 <make_map_fustrun+0xb88>
          f_k = (unsigned char)(1 << k);
 80092d2:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80092d6:	f103 0303 	add.w	r3, r3, #3
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2201      	movs	r2, #1
 80092de:	fa02 f303 	lsl.w	r3, r2, r3
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80092e8:	f102 0210 	add.w	r2, r2, #16
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	e005      	b.n	80092fc <make_map_fustrun+0xb94>
        } else {
          f_k = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80092f6:	f102 0210 	add.w	r2, r2, #16
 80092fa:	6013      	str	r3, [r2, #0]
        }

        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 80092fc:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009300:	f103 0304 	add.w	r3, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	3301      	adds	r3, #1
 800930a:	b29b      	uxth	r3, r3
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8009312:	3b1c      	subs	r3, #28
 8009314:	5c9b      	ldrb	r3, [r3, r2]
 8009316:	4619      	mov	r1, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & f_k) != 0) ==
 8009318:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800931c:	f103 0304 	add.w	r3, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	3301      	adds	r3, #1
 8009326:	b29b      	uxth	r3, r3
 8009328:	1e5a      	subs	r2, r3, #1
 800932a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800932e:	3b1c      	subs	r3, #28
 8009330:	5c9b      	ldrb	r3, [r3, r2]
 8009332:	3b01      	subs	r3, #1
 8009334:	015b      	lsls	r3, r3, #5
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 8009336:	440b      	add	r3, r1
 8009338:	3b01      	subs	r3, #1
 800933a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800933e:	f102 020c 	add.w	r2, r2, #12
 8009342:	6812      	ldr	r2, [r2, #0]
 8009344:	4413      	add	r3, r2
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & f_k) != 0) ==
 800934a:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800934e:	f103 0310 	add.w	r3, r3, #16
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4013      	ands	r3, r2
 8009356:	2b00      	cmp	r3, #0
 8009358:	bf14      	ite	ne
 800935a:	2301      	movne	r3, #1
 800935c:	2300      	moveq	r3, #0
 800935e:	b2db      	uxtb	r3, r3
 8009360:	461a      	mov	r2, r3
            wall->contents.nowall) {
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	3b0c      	subs	r3, #12
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 800936c:	429a      	cmp	r2, r3
 800936e:	f040 8090 	bne.w	8009492 <make_map_fustrun+0xd2a>
          k = g_direction->contents.South;
 8009372:	f107 0310 	add.w	r3, r7, #16
 8009376:	3b08      	subs	r3, #8
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	789b      	ldrb	r3, [r3, #2]
 800937c:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009380:	f102 0203 	add.w	r2, r2, #3
 8009384:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 8009386:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800938a:	f103 0303 	add.w	r3, r3, #3
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b07      	cmp	r3, #7
 8009392:	d80e      	bhi.n	80093b2 <make_map_fustrun+0xc4a>
            g_k = (unsigned char)(1 << k);
 8009394:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009398:	f103 0303 	add.w	r3, r3, #3
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2201      	movs	r2, #1
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80093aa:	f102 020c 	add.w	r2, r2, #12
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e005      	b.n	80093be <make_map_fustrun+0xc56>
          } else {
            g_k = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80093b8:	f102 020c 	add.w	r2, r2, #12
 80093bc:	6013      	str	r3, [r2, #0]
          }

          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 80093be:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80093c2:	f103 0304 	add.w	r3, r3, #4
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3301      	adds	r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80093d4:	3b1c      	subs	r3, #28
 80093d6:	5c9b      	ldrb	r3, [r3, r2]
 80093d8:	4619      	mov	r1, r3
                                  ((col_data[(unsigned short)(1 + q0) - 1] - 1) <<
 80093da:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80093de:	f103 0304 	add.w	r3, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3301      	adds	r3, #1
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	1e5a      	subs	r2, r3, #1
 80093ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093f0:	3b1c      	subs	r3, #28
 80093f2:	5c9b      	ldrb	r3, [r3, r2]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	015b      	lsls	r3, r3, #5
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 80093f8:	440b      	add	r3, r1
 80093fa:	3b01      	subs	r3, #1
 80093fc:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8009400:	f102 0210 	add.w	r2, r2, #16
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	4413      	add	r3, r2
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
                  5)) - 1] & g_k) != 0) == search->contents.known) {
 800940c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009410:	f103 030c 	add.w	r3, r3, #12
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4013      	ands	r3, r2
 8009418:	2b00      	cmp	r3, #0
 800941a:	bf14      	ite	ne
 800941c:	2301      	movne	r3, #1
 800941e:	2300      	moveq	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	3b10      	subs	r3, #16
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 800942e:	429a      	cmp	r2, r3
 8009430:	d12f      	bne.n	8009492 <make_map_fustrun+0xd2a>
            /* 南側のMAPが更新されているか判断、されていなければ書き込み */
            i6 -= 2;
 8009432:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3b02      	subs	r3, #2
 800943a:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 800943e:	6013      	str	r3, [r2, #0]
            if (contour_map[i6] == (unsigned char)qY) {
 8009440:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800944a:	f102 0214 	add.w	r2, r2, #20
 800944e:	6812      	ldr	r2, [r2, #0]
 8009450:	4413      	add	r3, r2
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009458:	f103 030c 	add.w	r3, r3, #12
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	429a      	cmp	r2, r3
 8009462:	d116      	bne.n	8009492 <make_map_fustrun+0xd2a>
              contour_map[i6] = (unsigned char)(tempi + 1);
 8009464:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800946e:	f102 0214 	add.w	r2, r2, #20
 8009472:	6812      	ldr	r2, [r2, #0]
 8009474:	4413      	add	r3, r2
 8009476:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800947a:	f102 021e 	add.w	r2, r2, #30
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	3201      	adds	r2, #1
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 8009486:	2301      	movs	r3, #1
 8009488:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800948c:	f102 021f 	add.w	r2, r2, #31
 8009490:	7013      	strb	r3, [r2, #0]
            }
          }
        }

        /* 西側 */
        k = g_direction->contents.West;
 8009492:	f107 0310 	add.w	r3, r7, #16
 8009496:	3b08      	subs	r3, #8
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	78db      	ldrb	r3, [r3, #3]
 800949c:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80094a0:	f102 0203 	add.w	r2, r2, #3
 80094a4:	7013      	strb	r3, [r2, #0]
        if (k <= 7) {
 80094a6:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80094aa:	f103 0303 	add.w	r3, r3, #3
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b07      	cmp	r3, #7
 80094b2:	d80e      	bhi.n	80094d2 <make_map_fustrun+0xd6a>
          h_k = (unsigned char)(1 << k);
 80094b4:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80094b8:	f103 0303 	add.w	r3, r3, #3
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2201      	movs	r2, #1
 80094c0:	fa02 f303 	lsl.w	r3, r2, r3
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80094ca:	f102 0208 	add.w	r2, r2, #8
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e005      	b.n	80094de <make_map_fustrun+0xd76>
        } else {
          h_k = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80094d8:	f102 0208 	add.w	r2, r2, #8
 80094dc:	6013      	str	r3, [r2, #0]
        }

        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 80094de:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80094e2:	f103 0304 	add.w	r3, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3301      	adds	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80094f4:	3b1c      	subs	r3, #28
 80094f6:	5c9b      	ldrb	r3, [r3, r2]
 80094f8:	4619      	mov	r1, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & h_k) != 0) ==
 80094fa:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80094fe:	f103 0304 	add.w	r3, r3, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	b29b      	uxth	r3, r3
 8009506:	3301      	adds	r3, #1
 8009508:	b29b      	uxth	r3, r3
 800950a:	1e5a      	subs	r2, r3, #1
 800950c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009510:	3b1c      	subs	r3, #28
 8009512:	5c9b      	ldrb	r3, [r3, r2]
 8009514:	3b01      	subs	r3, #1
 8009516:	015b      	lsls	r3, r3, #5
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 8009518:	440b      	add	r3, r1
 800951a:	3b01      	subs	r3, #1
 800951c:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8009520:	f102 020c 	add.w	r2, r2, #12
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	4413      	add	r3, r2
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
                 [(unsigned short)(1 + q0) - 1] - 1) << 5)) - 1] & h_k) != 0) ==
 800952c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8009530:	f103 0308 	add.w	r3, r3, #8
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	461a      	mov	r2, r3
            wall->contents.nowall) {
 8009544:	f107 0310 	add.w	r3, r7, #16
 8009548:	3b0c      	subs	r3, #12
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
        if (((maze_wall[(row_data[(unsigned short)(1 + q0) - 1] + ((col_data
 800954e:	429a      	cmp	r2, r3
 8009550:	f040 80ab 	bne.w	80096aa <make_map_fustrun+0xf42>
          k = g_direction->contents.West;
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	3b08      	subs	r3, #8
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	78db      	ldrb	r3, [r3, #3]
 800955e:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8009562:	f102 0203 	add.w	r2, r2, #3
 8009566:	7013      	strb	r3, [r2, #0]
          if (k <= 7) {
 8009568:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800956c:	f103 0303 	add.w	r3, r3, #3
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b07      	cmp	r3, #7
 8009574:	d80e      	bhi.n	8009594 <make_map_fustrun+0xe2c>
            i_k = (unsigned char)(1 << k);
 8009576:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800957a:	f103 0303 	add.w	r3, r3, #3
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2201      	movs	r2, #1
 8009582:	fa02 f303 	lsl.w	r3, r2, r3
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800958c:	f102 0204 	add.w	r2, r2, #4
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	e005      	b.n	80095a0 <make_map_fustrun+0xe38>
          } else {
            i_k = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800959a:	f102 0204 	add.w	r2, r2, #4
 800959e:	6013      	str	r3, [r2, #0]
          }

          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 80095a0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80095a4:	f103 0304 	add.w	r3, r3, #4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80095b6:	3b1c      	subs	r3, #28
 80095b8:	5c9b      	ldrb	r3, [r3, r2]
 80095ba:	4619      	mov	r1, r3
                                  ((col_data[(unsigned short)(1 + q0) - 1] - 1) <<
 80095bc:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80095c0:	f103 0304 	add.w	r3, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3301      	adds	r3, #1
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	1e5a      	subs	r2, r3, #1
 80095ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095d2:	3b1c      	subs	r3, #28
 80095d4:	5c9b      	ldrb	r3, [r3, r2]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	015b      	lsls	r3, r3, #5
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 80095da:	440b      	add	r3, r1
 80095dc:	3b01      	subs	r3, #1
 80095de:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80095e2:	f102 0210 	add.w	r2, r2, #16
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	4413      	add	r3, r2
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
                  5)) - 1] & i_k) != 0) == search->contents.known) {
 80095ee:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80095f2:	f103 0304 	add.w	r3, r3, #4
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2301      	movne	r3, #1
 8009600:	2300      	moveq	r3, #0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	461a      	mov	r2, r3
 8009606:	f107 0310 	add.w	r3, r7, #16
 800960a:	3b10      	subs	r3, #16
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
          if (((maze_wall_search[(row_data[(unsigned short)(1 + q0) - 1] +
 8009610:	429a      	cmp	r2, r3
 8009612:	d14a      	bne.n	80096aa <make_map_fustrun+0xf42>
            /* 西側のMAPが更新されているか判断、されていなければ書き込み */
            i6 = (row_data[(unsigned short)(1 + q0) - 1] + ((col_data[(unsigned
 8009614:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009618:	f103 0304 	add.w	r3, r3, #4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	3301      	adds	r3, #1
 8009622:	b29b      	uxth	r3, r3
 8009624:	1e5a      	subs	r2, r3, #1
 8009626:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800962a:	3b1c      	subs	r3, #28
 800962c:	5c9b      	ldrb	r3, [r3, r2]
 800962e:	4619      	mov	r1, r3
 8009630:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009634:	f103 0304 	add.w	r3, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	3301      	adds	r3, #1
 800963e:	b29b      	uxth	r3, r3
                     short)(1 + q0) - 1] - 2) << 5)) - 1;
 8009640:	1e5a      	subs	r2, r3, #1
            i6 = (row_data[(unsigned short)(1 + q0) - 1] + ((col_data[(unsigned
 8009642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009646:	3b1c      	subs	r3, #28
 8009648:	5c9b      	ldrb	r3, [r3, r2]
                     short)(1 + q0) - 1] - 2) << 5)) - 1;
 800964a:	3b02      	subs	r3, #2
 800964c:	015b      	lsls	r3, r3, #5
            i6 = (row_data[(unsigned short)(1 + q0) - 1] + ((col_data[(unsigned
 800964e:	440b      	add	r3, r1
 8009650:	3b01      	subs	r3, #1
 8009652:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 8009656:	6013      	str	r3, [r2, #0]
            if (contour_map[i6] == (unsigned char)qY) {
 8009658:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8009662:	f102 0214 	add.w	r2, r2, #20
 8009666:	6812      	ldr	r2, [r2, #0]
 8009668:	4413      	add	r3, r2
 800966a:	781a      	ldrb	r2, [r3, #0]
 800966c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009670:	f103 030c 	add.w	r3, r3, #12
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	429a      	cmp	r2, r3
 800967a:	d116      	bne.n	80096aa <make_map_fustrun+0xf42>
              contour_map[i6] = (unsigned char)(tempi + 1);
 800967c:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8009686:	f102 0214 	add.w	r2, r2, #20
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	4413      	add	r3, r2
 800968e:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009692:	f102 021e 	add.w	r2, r2, #30
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	3201      	adds	r2, #1
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	701a      	strb	r2, [r3, #0]
              change_flag = 1U;
 800969e:	2301      	movs	r3, #1
 80096a0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80096a4:	f102 021f 	add.w	r2, r2, #31
 80096a8:	7013      	strb	r3, [r2, #0]
      for (q0 = 0; q0 < loop_ub; q0++) {
 80096aa:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80096ae:	f103 0304 	add.w	r3, r3, #4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3301      	adds	r3, #1
 80096b6:	f507 52c3 	add.w	r2, r7, #6240	; 0x1860
 80096ba:	f102 0204 	add.w	r2, r2, #4
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80096c4:	f103 0304 	add.w	r3, r3, #4
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80096ce:	f103 0310 	add.w	r3, r3, #16
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	f6ff ab72 	blt.w	8008dbe <make_map_fustrun+0x656>
    for (tempi = 0; tempi <= *max_length; tempi++) {
 80096da:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80096de:	f103 031e 	add.w	r3, r3, #30
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80096ea:	f102 021e 	add.w	r2, r2, #30
 80096ee:	7013      	strb	r3, [r2, #0]
 80096f0:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80096f4:	f103 0318 	add.w	r3, r3, #24
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8009700:	f102 021e 	add.w	r2, r2, #30
 8009704:	7812      	ldrb	r2, [r2, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	f67f a944 	bls.w	8008994 <make_map_fustrun+0x22c>
        }
      }
    }

    /* 更新がなければ終了     */
  } while (!(change_flag == 0));
 800970c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8009710:	f103 031f 	add.w	r3, r3, #31
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	f47f a92e 	bne.w	8008978 <make_map_fustrun+0x210>
}
 800971c:	bf00      	nop
 800971e:	f507 57c3 	add.w	r7, r7, #6240	; 0x1860
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	bd90      	pop	{r4, r7, pc}

08009728 <move_step>:
 * Return Type  : void
 */
static void move_step(const coder_internal_ref_4 *g_direction, unsigned char
                      *current_x, unsigned char *current_y, unsigned char
                      current_dir)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	70fb      	strb	r3, [r7, #3]
  int q0;
  unsigned int qY;

  /*  move_step 一マス前進する関数 */
  /* 北に一マス */
  if (current_dir == g_direction->contents.North) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	429a      	cmp	r2, r3
 800973e:	d10c      	bne.n	800975a <move_step+0x32>
    q0 = (int)(*current_y + 1U);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
    if ((unsigned int)q0 > 255U) {
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2bff      	cmp	r3, #255	; 0xff
 800974c:	d901      	bls.n	8009752 <move_step+0x2a>
      q0 = 255;
 800974e:	23ff      	movs	r3, #255	; 0xff
 8009750:	617b      	str	r3, [r7, #20]
    }

    *current_y = (unsigned char)q0;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	701a      	strb	r2, [r3, #0]

    /* disp("north_step") */
  }

  /* 東に一マス */
  if (current_dir == g_direction->contents.East) {
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	429a      	cmp	r2, r3
 8009762:	d10c      	bne.n	800977e <move_step+0x56>
    q0 = (int)(*current_x + 1U);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	617b      	str	r3, [r7, #20]
    if ((unsigned int)q0 > 255U) {
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	d901      	bls.n	8009776 <move_step+0x4e>
      q0 = 255;
 8009772:	23ff      	movs	r3, #255	; 0xff
 8009774:	617b      	str	r3, [r7, #20]
    }

    *current_x = (unsigned char)q0;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	b2da      	uxtb	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	701a      	strb	r2, [r3, #0]

    /* disp("east_step") */
  }

  /* 南に一マス */
  if (current_dir == g_direction->contents.South) {
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	789b      	ldrb	r3, [r3, #2]
 8009782:	78fa      	ldrb	r2, [r7, #3]
 8009784:	429a      	cmp	r2, r3
 8009786:	d10f      	bne.n	80097a8 <move_step+0x80>
    q0 = *current_y;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	617b      	str	r3, [r7, #20]
    qY = q0 - 1U;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	3b01      	subs	r3, #1
 8009792:	613b      	str	r3, [r7, #16]
    if (qY > (unsigned int)q0) {
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	429a      	cmp	r2, r3
 800979a:	d901      	bls.n	80097a0 <move_step+0x78>
      qY = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	613b      	str	r3, [r7, #16]
    }

    *current_y = (unsigned char)qY;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	701a      	strb	r2, [r3, #0]

    /* disp("south_step") */
  }

  /* 西に一マス */
  if (current_dir == g_direction->contents.West) {
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10f      	bne.n	80097d2 <move_step+0xaa>
    q0 = *current_x;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	617b      	str	r3, [r7, #20]
    qY = q0 - 1U;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	613b      	str	r3, [r7, #16]
    if (qY > (unsigned int)q0) {
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d901      	bls.n	80097ca <move_step+0xa2>
      qY = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	613b      	str	r3, [r7, #16]
    }

    *current_x = (unsigned char)qY;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	701a      	strb	r2, [r3, #0]

    /* disp("west_step") */
  }
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <search_adachi>:
  coder_internal_ref_3 *l_direction, unsigned char *current_x, unsigned char
  *current_y, unsigned char *current_dir, unsigned char maze_row_size, unsigned
  char maze_col_size, unsigned char maze_wall[1024], unsigned char
  maze_wall_search[1024], const unsigned char maze_goal[18], unsigned char
  l_goal_size)
{
 80097e0:	b590      	push	{r4, r7, lr}
 80097e2:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 80097e6:	af06      	add	r7, sp, #24
 80097e8:	f107 040c 	add.w	r4, r7, #12
 80097ec:	6020      	str	r0, [r4, #0]
 80097ee:	f107 0008 	add.w	r0, r7, #8
 80097f2:	6001      	str	r1, [r0, #0]
 80097f4:	1d39      	adds	r1, r7, #4
 80097f6:	600a      	str	r2, [r1, #0]
 80097f8:	463a      	mov	r2, r7
 80097fa:	6013      	str	r3, [r2, #0]
  unsigned char varargin_3;
  unsigned char varargin_4;

  /*  search_adachi 足立法での探索 */
  /* local変数宣言 */
  goal_flag = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7

  /* 探索開始時x */
  /* 探索開始時y */
  /* for C gen */
  i9 = l_goal_size;
 8009802:	f897 34d8 	ldrb.w	r3, [r7, #1240]	; 0x4d8
 8009806:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
  do {
    exitg1 = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
    /* for C gen */
    /* 壁センサAD値格納変数 */
    /* 壁センサ閾値 */
    /* ローカル変数宣言 */
    /* 壁情報書き込み用バッファ(N,E,S,W) */
    wall_write[0] = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
    serch_write[0] = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	f887 3418 	strb.w	r3, [r7, #1048]	; 0x418
    wall_write[1] = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
    serch_write[1] = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	f887 3419 	strb.w	r3, [r7, #1049]	; 0x419
    wall_write[2] = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
    serch_write[2] = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
    wall_write[3] = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
    serch_write[3] = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
    /* 探索情報書き込み用バッファ(N,E,S,W) */
    /* マウスの方向に基づく壁情報取得 */
    /* マウスの方向と絶対方向の差=マウスの方向となることを利用し、 */
    /* 絶対角度と整合をとる。 */
    /*  実機はここをセンサ値に対応させる  */
    wall_sensor_front = (Sensor_GetValue(0) + Sensor_GetValue(3))/2;
 8009840:	2000      	movs	r0, #0
 8009842:	f7fd f98b 	bl	8006b5c <Sensor_GetValue>
 8009846:	4603      	mov	r3, r0
 8009848:	461c      	mov	r4, r3
 800984a:	2003      	movs	r0, #3
 800984c:	f7fd f986 	bl	8006b5c <Sensor_GetValue>
 8009850:	4603      	mov	r3, r0
 8009852:	4423      	add	r3, r4
 8009854:	0fda      	lsrs	r2, r3, #31
 8009856:	4413      	add	r3, r2
 8009858:	105b      	asrs	r3, r3, #1
 800985a:	b21a      	sxth	r2, r3
 800985c:	4bc5      	ldr	r3, [pc, #788]	; (8009b74 <search_adachi+0x394>)
 800985e:	801a      	strh	r2, [r3, #0]
    wall_sensor_right =  Sensor_GetValue(2);
 8009860:	2002      	movs	r0, #2
 8009862:	f7fd f97b 	bl	8006b5c <Sensor_GetValue>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	4bc3      	ldr	r3, [pc, #780]	; (8009b78 <search_adachi+0x398>)
 800986c:	801a      	strh	r2, [r3, #0]
    wall_sensor_left =  Sensor_GetValue(1);
 800986e:	2001      	movs	r0, #1
 8009870:	f7fd f974 	bl	8006b5c <Sensor_GetValue>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	4bc0      	ldr	r3, [pc, #768]	; (8009b7c <search_adachi+0x39c>)
 800987a:	801a      	strh	r2, [r3, #0]
    /* 前方の壁判定 */
    /* for Cgen */
    /* センサ値をもとに、壁の有無を判定 */


    if (wall_sensor_front > wall_sensor_front_th) {
 800987c:	4bbd      	ldr	r3, [pc, #756]	; (8009b74 <search_adachi+0x394>)
 800987e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009882:	4bbf      	ldr	r3, [pc, #764]	; (8009b80 <search_adachi+0x3a0>)
 8009884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009888:	429a      	cmp	r2, r3
 800988a:	dd10      	ble.n	80098ae <search_adachi+0xce>
      /* 壁情報取得 */
      wall_write[*current_dir % 4] = wall->contents.wall;
 800988c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	f107 020c 	add.w	r2, r7, #12
 800989a:	6812      	ldr	r2, [r2, #0]
 800989c:	7852      	ldrb	r2, [r2, #1]
 800989e:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80098a2:	440b      	add	r3, r1
 80098a4:	f803 2c8c 	strb.w	r2, [r3, #-140]
      front_calib_flg = 1; //m 前壁補正フラグを立てる
 80098a8:	4bb6      	ldr	r3, [pc, #728]	; (8009b84 <search_adachi+0x3a4>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	701a      	strb	r2, [r3, #0]
    }

    /* 探索情報取更新 */
    serch_write[*current_dir % 4] = search->contents.known;
 80098ae:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 0303 	and.w	r3, r3, #3
 80098b8:	f107 0208 	add.w	r2, r7, #8
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	7852      	ldrb	r2, [r2, #1]
 80098c0:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80098c4:	440b      	add	r3, r1
 80098c6:	f803 2c90 	strb.w	r2, [r3, #-144]

    /* 右壁判定 */
    /* for Cgen */
    /* センサ値をもとに、壁の有無を判定 */
    if (wall_sensor_right > wall_sensor_right_th) {
 80098ca:	4bab      	ldr	r3, [pc, #684]	; (8009b78 <search_adachi+0x398>)
 80098cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80098d0:	4bad      	ldr	r3, [pc, #692]	; (8009b88 <search_adachi+0x3a8>)
 80098d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	dd21      	ble.n	800991e <search_adachi+0x13e>
      /* 壁情報取得 */
      i10 = (int)(*current_dir + 1U);
 80098da:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 80098e6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80098ea:	2bff      	cmp	r3, #255	; 0xff
 80098ec:	d902      	bls.n	80098f4 <search_adachi+0x114>
        i10 = 255;
 80098ee:	23ff      	movs	r3, #255	; 0xff
 80098f0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      wall_write[i10 % 4] = wall->contents.wall;
 80098f4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80098f8:	425a      	negs	r2, r3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	f002 0203 	and.w	r2, r2, #3
 8009902:	bf58      	it	pl
 8009904:	4253      	negpl	r3, r2
 8009906:	f107 020c 	add.w	r2, r7, #12
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	7852      	ldrb	r2, [r2, #1]
 800990e:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8009912:	440b      	add	r3, r1
 8009914:	f803 2c8c 	strb.w	r2, [r3, #-140]
      right_calib_flg = 1; //m 前壁補正フラグを立てる
 8009918:	4b9c      	ldr	r3, [pc, #624]	; (8009b8c <search_adachi+0x3ac>)
 800991a:	2201      	movs	r2, #1
 800991c:	701a      	strb	r2, [r3, #0]
    }

    /* 探索情報取更新 */
    i10 = (int)(*current_dir + 1U);
 800991e:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 800992a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800992e:	2bff      	cmp	r3, #255	; 0xff
 8009930:	d902      	bls.n	8009938 <search_adachi+0x158>
      i10 = 255;
 8009932:	23ff      	movs	r3, #255	; 0xff
 8009934:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    serch_write[i10 % 4] = search->contents.known;
 8009938:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800993c:	425a      	negs	r2, r3
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	f002 0203 	and.w	r2, r2, #3
 8009946:	bf58      	it	pl
 8009948:	4253      	negpl	r3, r2
 800994a:	f107 0208 	add.w	r2, r7, #8
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	7852      	ldrb	r2, [r2, #1]
 8009952:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8009956:	440b      	add	r3, r1
 8009958:	f803 2c90 	strb.w	r2, [r3, #-144]

    /* 後方は情報を得ることができないので処理しない。 */
    /* 左壁判定 */
    /* for Cgen */
    /* センサ値をもとに、壁の有無を判定 */
    if (wall_sensor_left > wall_sensor_left_th) {
 800995c:	4b87      	ldr	r3, [pc, #540]	; (8009b7c <search_adachi+0x39c>)
 800995e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009962:	4b8b      	ldr	r3, [pc, #556]	; (8009b90 <search_adachi+0x3b0>)
 8009964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009968:	429a      	cmp	r2, r3
 800996a:	dd21      	ble.n	80099b0 <search_adachi+0x1d0>
      /* 壁情報取得 */
      i10 = (int)(*current_dir + 3U);
 800996c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	3303      	adds	r3, #3
 8009974:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 8009978:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800997c:	2bff      	cmp	r3, #255	; 0xff
 800997e:	d902      	bls.n	8009986 <search_adachi+0x1a6>
        i10 = 255;
 8009980:	23ff      	movs	r3, #255	; 0xff
 8009982:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      wall_write[i10 % 4] = wall->contents.wall;
 8009986:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800998a:	425a      	negs	r2, r3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	f002 0203 	and.w	r2, r2, #3
 8009994:	bf58      	it	pl
 8009996:	4253      	negpl	r3, r2
 8009998:	f107 020c 	add.w	r2, r7, #12
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	7852      	ldrb	r2, [r2, #1]
 80099a0:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80099a4:	440b      	add	r3, r1
 80099a6:	f803 2c8c 	strb.w	r2, [r3, #-140]
      left_calib_flg = 1; //m 前壁補正フラグを立てる
 80099aa:	4b7a      	ldr	r3, [pc, #488]	; (8009b94 <search_adachi+0x3b4>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]

    }

    /* 探索情報取更新 */
    i10 = (int)(*current_dir + 3U);
 80099b0:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	3303      	adds	r3, #3
 80099b8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 80099bc:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80099c0:	2bff      	cmp	r3, #255	; 0xff
 80099c2:	d902      	bls.n	80099ca <search_adachi+0x1ea>
      i10 = 255;
 80099c4:	23ff      	movs	r3, #255	; 0xff
 80099c6:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    serch_write[i10 % 4] = search->contents.known;
 80099ca:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 80099ce:	425a      	negs	r2, r3
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	f002 0203 	and.w	r2, r2, #3
 80099d8:	bf58      	it	pl
 80099da:	4253      	negpl	r3, r2
 80099dc:	f107 0208 	add.w	r2, r7, #8
 80099e0:	6812      	ldr	r2, [r2, #0]
 80099e2:	7852      	ldrb	r2, [r2, #1]
 80099e4:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80099e8:	440b      	add	r3, r1
 80099ea:	f803 2c90 	strb.w	r2, [r3, #-144]

    /* ここまで */
    /* 壁情報,探索情報を入力 */
    /* 北側 */
    k = g_direction->contents.North;
 80099ee:	1d3b      	adds	r3, r7, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.North + 1U);
 80099f8:	1d3b      	adds	r3, r7, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009a04:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009a08:	2bff      	cmp	r3, #255	; 0xff
 8009a0a:	d902      	bls.n	8009a12 <search_adachi+0x232>
      i10 = 255;
 8009a0c:	23ff      	movs	r3, #255	; 0xff
 8009a0e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009a12:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009a16:	2b07      	cmp	r3, #7
 8009a18:	d808      	bhi.n	8009a2c <search_adachi+0x24c>
      b_k = (unsigned char)(1 << k);
 8009a1a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009a1e:	2201      	movs	r2, #1
 8009a20:	fa02 f303 	lsl.w	r3, r2, r3
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8009a2a:	e002      	b.n	8009a32 <search_adachi+0x252>
    } else {
      b_k = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    }

    i10 = (int)((unsigned int)b_k * wall_write[i10 - 1]);
 8009a32:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009a36:	3b01      	subs	r3, #1
 8009a38:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8009a48:	fb03 f302 	mul.w	r3, r3, r2
 8009a4c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009a50:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009a54:	2bff      	cmp	r3, #255	; 0xff
 8009a56:	d902      	bls.n	8009a5e <search_adachi+0x27e>
      i10 = 255;
 8009a58:	23ff      	movs	r3, #255	; 0xff
 8009a5a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    i11 = (*current_x - 1) << 5;
 8009a5e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	015b      	lsls	r3, r3, #5
 8009a68:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    i12 = (*current_y + i11) - 1;
 8009a6c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8009a78:	4413      	add	r3, r2
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    maze_wall[i12] |= (unsigned char)i10;
 8009a80:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009a84:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8009a88:	4413      	add	r3, r2
 8009a8a:	7819      	ldrb	r1, [r3, #0]
 8009a8c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009a96:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8009a9a:	4403      	add	r3, r0
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
    k = g_direction->contents.North;
 8009aa2:	1d3b      	adds	r3, r7, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.North + 1U);
 8009aac:	1d3b      	adds	r3, r7, #4
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009ab8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009abc:	2bff      	cmp	r3, #255	; 0xff
 8009abe:	d902      	bls.n	8009ac6 <search_adachi+0x2e6>
      i10 = 255;
 8009ac0:	23ff      	movs	r3, #255	; 0xff
 8009ac2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009ac6:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009aca:	2b07      	cmp	r3, #7
 8009acc:	d808      	bhi.n	8009ae0 <search_adachi+0x300>
      c_k = (unsigned char)(1 << k);
 8009ace:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8009ade:	e002      	b.n	8009ae6 <search_adachi+0x306>
    } else {
      c_k = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
    }

    i10 = (int)((unsigned int)c_k * serch_write[i10 - 1]);
 8009ae6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009aea:	3b01      	subs	r3, #1
 8009aec:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009af0:	4413      	add	r3, r2
 8009af2:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8009afc:	fb03 f302 	mul.w	r3, r3, r2
 8009b00:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009b04:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009b08:	2bff      	cmp	r3, #255	; 0xff
 8009b0a:	d902      	bls.n	8009b12 <search_adachi+0x332>
      i10 = 255;
 8009b0c:	23ff      	movs	r3, #255	; 0xff
 8009b0e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall_search[i12] |= (unsigned char)i10;
 8009b12:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009b16:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8009b1a:	4413      	add	r3, r2
 8009b1c:	7819      	ldrb	r1, [r3, #0]
 8009b1e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009b28:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8009b2c:	4403      	add	r3, r0
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]

    /* 東側 */
    k = g_direction->contents.East;
 8009b34:	1d3b      	adds	r3, r7, #4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.East + 1U);
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	3301      	adds	r3, #1
 8009b46:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009b4a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009b4e:	2bff      	cmp	r3, #255	; 0xff
 8009b50:	d902      	bls.n	8009b58 <search_adachi+0x378>
      i10 = 255;
 8009b52:	23ff      	movs	r3, #255	; 0xff
 8009b54:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009b58:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009b5c:	2b07      	cmp	r3, #7
 8009b5e:	d81b      	bhi.n	8009b98 <search_adachi+0x3b8>
      d_k = (unsigned char)(1 << k);
 8009b60:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009b64:	2201      	movs	r2, #1
 8009b66:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8009b70:	e015      	b.n	8009b9e <search_adachi+0x3be>
 8009b72:	bf00      	nop
 8009b74:	200022fe 	.word	0x200022fe
 8009b78:	20002300 	.word	0x20002300
 8009b7c:	20002302 	.word	0x20002302
 8009b80:	2000001e 	.word	0x2000001e
 8009b84:	2001bbc4 	.word	0x2001bbc4
 8009b88:	20000020 	.word	0x20000020
 8009b8c:	2001bbc6 	.word	0x2001bbc6
 8009b90:	20000022 	.word	0x20000022
 8009b94:	2001bbc5 	.word	0x2001bbc5
    } else {
      d_k = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
    }

    i10 = (int)((unsigned int)d_k * wall_write[i10 - 1]);
 8009b9e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009ba8:	4413      	add	r3, r2
 8009baa:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8009bb4:	fb03 f302 	mul.w	r3, r3, r2
 8009bb8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009bbc:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009bc0:	2bff      	cmp	r3, #255	; 0xff
 8009bc2:	d902      	bls.n	8009bca <search_adachi+0x3ea>
      i10 = 255;
 8009bc4:	23ff      	movs	r3, #255	; 0xff
 8009bc6:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall[i12] |= (unsigned char)i10;
 8009bca:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009bce:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8009bd2:	4413      	add	r3, r2
 8009bd4:	7819      	ldrb	r1, [r3, #0]
 8009bd6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009be0:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8009be4:	4403      	add	r3, r0
 8009be6:	430a      	orrs	r2, r1
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	701a      	strb	r2, [r3, #0]
    k = g_direction->contents.East;
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.East + 1U);
 8009bf6:	1d3b      	adds	r3, r7, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009c02:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009c06:	2bff      	cmp	r3, #255	; 0xff
 8009c08:	d902      	bls.n	8009c10 <search_adachi+0x430>
      i10 = 255;
 8009c0a:	23ff      	movs	r3, #255	; 0xff
 8009c0c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009c10:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009c14:	2b07      	cmp	r3, #7
 8009c16:	d808      	bhi.n	8009c2a <search_adachi+0x44a>
      e_k = (unsigned char)(1 << k);
 8009c18:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8009c28:	e002      	b.n	8009c30 <search_adachi+0x450>
    } else {
      e_k = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
    }

    i10 = (int)((unsigned int)e_k * serch_write[i10 - 1]);
 8009c30:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8009c40:	461a      	mov	r2, r3
 8009c42:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8009c46:	fb03 f302 	mul.w	r3, r3, r2
 8009c4a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009c4e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009c52:	2bff      	cmp	r3, #255	; 0xff
 8009c54:	d902      	bls.n	8009c5c <search_adachi+0x47c>
      i10 = 255;
 8009c56:	23ff      	movs	r3, #255	; 0xff
 8009c58:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall_search[i12] |= (unsigned char)i10;
 8009c5c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009c60:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8009c64:	4413      	add	r3, r2
 8009c66:	7819      	ldrb	r1, [r3, #0]
 8009c68:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009c72:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8009c76:	4403      	add	r3, r0
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	701a      	strb	r2, [r3, #0]

    /* 南側 */
    k = g_direction->contents.South;
 8009c7e:	1d3b      	adds	r3, r7, #4
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	789b      	ldrb	r3, [r3, #2]
 8009c84:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.South + 1U);
 8009c88:	1d3b      	adds	r3, r7, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	789b      	ldrb	r3, [r3, #2]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009c94:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009c98:	2bff      	cmp	r3, #255	; 0xff
 8009c9a:	d902      	bls.n	8009ca2 <search_adachi+0x4c2>
      i10 = 255;
 8009c9c:	23ff      	movs	r3, #255	; 0xff
 8009c9e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009ca2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009ca6:	2b07      	cmp	r3, #7
 8009ca8:	d808      	bhi.n	8009cbc <search_adachi+0x4dc>
      f_k = (unsigned char)(1 << k);
 8009caa:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009cae:	2201      	movs	r2, #1
 8009cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8009cba:	e002      	b.n	8009cc2 <search_adachi+0x4e2>
    } else {
      f_k = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
    }

    i10 = (int)((unsigned int)f_k * wall_write[i10 - 1]);
 8009cc2:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009ccc:	4413      	add	r3, r2
 8009cce:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8009cd8:	fb03 f302 	mul.w	r3, r3, r2
 8009cdc:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009ce0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009ce4:	2bff      	cmp	r3, #255	; 0xff
 8009ce6:	d902      	bls.n	8009cee <search_adachi+0x50e>
      i10 = 255;
 8009ce8:	23ff      	movs	r3, #255	; 0xff
 8009cea:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall[i12] |= (unsigned char)i10;
 8009cee:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009cf2:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8009cf6:	4413      	add	r3, r2
 8009cf8:	7819      	ldrb	r1, [r3, #0]
 8009cfa:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009d04:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8009d08:	4403      	add	r3, r0
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
    k = g_direction->contents.South;
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	789b      	ldrb	r3, [r3, #2]
 8009d16:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.South + 1U);
 8009d1a:	1d3b      	adds	r3, r7, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	789b      	ldrb	r3, [r3, #2]
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009d26:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009d2a:	2bff      	cmp	r3, #255	; 0xff
 8009d2c:	d902      	bls.n	8009d34 <search_adachi+0x554>
      i10 = 255;
 8009d2e:	23ff      	movs	r3, #255	; 0xff
 8009d30:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009d34:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009d38:	2b07      	cmp	r3, #7
 8009d3a:	d808      	bhi.n	8009d4e <search_adachi+0x56e>
      g_k = (unsigned char)(1 << k);
 8009d3c:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009d40:	2201      	movs	r2, #1
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8009d4c:	e002      	b.n	8009d54 <search_adachi+0x574>
    } else {
      g_k = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
    }

    i10 = (int)((unsigned int)g_k * serch_write[i10 - 1]);
 8009d54:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009d5e:	4413      	add	r3, r2
 8009d60:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8009d64:	461a      	mov	r2, r3
 8009d66:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8009d6a:	fb03 f302 	mul.w	r3, r3, r2
 8009d6e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009d72:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009d76:	2bff      	cmp	r3, #255	; 0xff
 8009d78:	d902      	bls.n	8009d80 <search_adachi+0x5a0>
      i10 = 255;
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall_search[i12] |= (unsigned char)i10;
 8009d80:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009d84:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8009d88:	4413      	add	r3, r2
 8009d8a:	7819      	ldrb	r1, [r3, #0]
 8009d8c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009d96:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8009d9a:	4403      	add	r3, r0
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]

    /* 西側 */
    k = g_direction->contents.West;
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	78db      	ldrb	r3, [r3, #3]
 8009da8:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.West + 1U);
 8009dac:	1d3b      	adds	r3, r7, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	78db      	ldrb	r3, [r3, #3]
 8009db2:	3301      	adds	r3, #1
 8009db4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009db8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009dbc:	2bff      	cmp	r3, #255	; 0xff
 8009dbe:	d902      	bls.n	8009dc6 <search_adachi+0x5e6>
      i10 = 255;
 8009dc0:	23ff      	movs	r3, #255	; 0xff
 8009dc2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009dc6:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009dca:	2b07      	cmp	r3, #7
 8009dcc:	d808      	bhi.n	8009de0 <search_adachi+0x600>
      h_k = (unsigned char)(1 << k);
 8009dce:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8009dde:	e002      	b.n	8009de6 <search_adachi+0x606>
    } else {
      h_k = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
    }

    i10 = (int)((unsigned int)h_k * wall_write[i10 - 1]);
 8009de6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009dea:	3b01      	subs	r3, #1
 8009dec:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009df0:	4413      	add	r3, r2
 8009df2:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8009dfc:	fb03 f302 	mul.w	r3, r3, r2
 8009e00:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009e04:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009e08:	2bff      	cmp	r3, #255	; 0xff
 8009e0a:	d902      	bls.n	8009e12 <search_adachi+0x632>
      i10 = 255;
 8009e0c:	23ff      	movs	r3, #255	; 0xff
 8009e0e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall[i12] |= (unsigned char)i10;
 8009e12:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009e16:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8009e1a:	4413      	add	r3, r2
 8009e1c:	7819      	ldrb	r1, [r3, #0]
 8009e1e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009e28:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8009e2c:	4403      	add	r3, r0
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	b2d2      	uxtb	r2, r2
 8009e32:	701a      	strb	r2, [r3, #0]
    k = g_direction->contents.West;
 8009e34:	1d3b      	adds	r3, r7, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	78db      	ldrb	r3, [r3, #3]
 8009e3a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
    i10 = (int)(g_direction->contents.West + 1U);
 8009e3e:	1d3b      	adds	r3, r7, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	78db      	ldrb	r3, [r3, #3]
 8009e44:	3301      	adds	r3, #1
 8009e46:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009e4a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009e4e:	2bff      	cmp	r3, #255	; 0xff
 8009e50:	d902      	bls.n	8009e58 <search_adachi+0x678>
      i10 = 255;
 8009e52:	23ff      	movs	r3, #255	; 0xff
 8009e54:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    if (k <= 7) {
 8009e58:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009e5c:	2b07      	cmp	r3, #7
 8009e5e:	d808      	bhi.n	8009e72 <search_adachi+0x692>
      i_k = (unsigned char)(1 << k);
 8009e60:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009e64:	2201      	movs	r2, #1
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8009e70:	e002      	b.n	8009e78 <search_adachi+0x698>
    } else {
      i_k = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
    }

    i10 = (int)((unsigned int)i_k * serch_write[i10 - 1]);
 8009e78:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009e82:	4413      	add	r3, r2
 8009e84:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8009e8e:	fb03 f302 	mul.w	r3, r3, r2
 8009e92:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    if ((unsigned int)i10 > 255U) {
 8009e96:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009e9a:	2bff      	cmp	r3, #255	; 0xff
 8009e9c:	d902      	bls.n	8009ea4 <search_adachi+0x6c4>
      i10 = 255;
 8009e9e:	23ff      	movs	r3, #255	; 0xff
 8009ea0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
    }

    maze_wall_search[i12] |= (unsigned char)i10;
 8009ea4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009ea8:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8009eac:	4413      	add	r3, r2
 8009eae:	7819      	ldrb	r1, [r3, #0]
 8009eb0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8009eba:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 8009ebe:	4403      	add	r3, r0
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]

    /* 隣り合うマスの情報にも入力 */
    /* 北側のマスの南側の壁情報 */
    qY = maze_row_size - 1U;
 8009ec6:	f897 34c4 	ldrb.w	r3, [r7, #1220]	; 0x4c4
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
    if (qY > maze_row_size) {
 8009ed0:	f897 34c4 	ldrb.w	r3, [r7, #1220]	; 0x4c4
 8009ed4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d902      	bls.n	8009ee2 <search_adachi+0x702>
      qY = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
    }

    if (*current_y < (int)qY) {
 8009ee2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	f280 80cc 	bge.w	800a08c <search_adachi+0x8ac>
      k = g_direction->contents.South;
 8009ef4:	1d3b      	adds	r3, r7, #4
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	789b      	ldrb	r3, [r3, #2]
 8009efa:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.North + 1U);
 8009efe:	1d3b      	adds	r3, r7, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 8009f0a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009f0e:	2bff      	cmp	r3, #255	; 0xff
 8009f10:	d902      	bls.n	8009f18 <search_adachi+0x738>
        i10 = 255;
 8009f12:	23ff      	movs	r3, #255	; 0xff
 8009f14:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 8009f18:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009f1c:	2b07      	cmp	r3, #7
 8009f1e:	d808      	bhi.n	8009f32 <search_adachi+0x752>
        j_k = (unsigned char)(1 << k);
 8009f20:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009f24:	2201      	movs	r2, #1
 8009f26:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8009f30:	e002      	b.n	8009f38 <search_adachi+0x758>
      } else {
        j_k = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
      }

      i10 = (int)((unsigned int)j_k * wall_write[i10 - 1]);
 8009f38:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8009f42:	4413      	add	r3, r2
 8009f44:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8009f4e:	fb03 f302 	mul.w	r3, r3, r2
 8009f52:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 8009f56:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009f5a:	2bff      	cmp	r3, #255	; 0xff
 8009f5c:	d902      	bls.n	8009f64 <search_adachi+0x784>
        i10 = 255;
 8009f5e:	23ff      	movs	r3, #255	; 0xff
 8009f60:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = (int)(*current_y + 1U);
 8009f64:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      i13 = q0;
 8009f70:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8009f74:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      if ((unsigned int)q0 > 255U) {
 8009f78:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8009f7c:	2bff      	cmp	r3, #255	; 0xff
 8009f7e:	d902      	bls.n	8009f86 <search_adachi+0x7a6>
        i13 = 255;
 8009f80:	23ff      	movs	r3, #255	; 0xff
 8009f82:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      }

      i14 = q0;
 8009f86:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8009f8a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
      if ((unsigned int)q0 > 255U) {
 8009f8e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8009f92:	2bff      	cmp	r3, #255	; 0xff
 8009f94:	d902      	bls.n	8009f9c <search_adachi+0x7bc>
        i14 = 255;
 8009f96:	23ff      	movs	r3, #255	; 0xff
 8009f98:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
      }

      maze_wall[(i13 + i11) - 1] = (unsigned char)(maze_wall[(i14 + i11) - 1] |
 8009f9c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8009fa0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8009fac:	4413      	add	r3, r2
 8009fae:	7819      	ldrb	r1, [r3, #0]
        (unsigned char)i10);
 8009fb0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009fb4:	b2da      	uxtb	r2, r3
      maze_wall[(i13 + i11) - 1] = (unsigned char)(maze_wall[(i14 + i11) - 1] |
 8009fb6:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8009fba:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8009fbe:	4403      	add	r3, r0
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 8009fc6:	4403      	add	r3, r0
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	701a      	strb	r2, [r3, #0]
      k = g_direction->contents.South;
 8009fce:	1d3b      	adds	r3, r7, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.North + 1U);
 8009fd8:	1d3b      	adds	r3, r7, #4
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 8009fe4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8009fe8:	2bff      	cmp	r3, #255	; 0xff
 8009fea:	d902      	bls.n	8009ff2 <search_adachi+0x812>
        i10 = 255;
 8009fec:	23ff      	movs	r3, #255	; 0xff
 8009fee:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 8009ff2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009ff6:	2b07      	cmp	r3, #7
 8009ff8:	d808      	bhi.n	800a00c <search_adachi+0x82c>
        n_k = (unsigned char)(1 << k);
 8009ffa:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 8009ffe:	2201      	movs	r2, #1
 800a000:	fa02 f303 	lsl.w	r3, r2, r3
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800a00a:	e002      	b.n	800a012 <search_adachi+0x832>
      } else {
        n_k = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
      }

      i10 = (int)((unsigned int)n_k * serch_write[i10 - 1]);
 800a012:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a016:	3b01      	subs	r3, #1
 800a018:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a01c:	4413      	add	r3, r2
 800a01e:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800a022:	461a      	mov	r2, r3
 800a024:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800a028:	fb03 f302 	mul.w	r3, r3, r2
 800a02c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a030:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a034:	2bff      	cmp	r3, #255	; 0xff
 800a036:	d902      	bls.n	800a03e <search_adachi+0x85e>
        i10 = 255;
 800a038:	23ff      	movs	r3, #255	; 0xff
 800a03a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      i13 = q0;
 800a03e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a042:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      if ((unsigned int)q0 > 255U) {
 800a046:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a04a:	2bff      	cmp	r3, #255	; 0xff
 800a04c:	d905      	bls.n	800a05a <search_adachi+0x87a>
        i13 = 255;
 800a04e:	23ff      	movs	r3, #255	; 0xff
 800a050:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        q0 = 255;
 800a054:	23ff      	movs	r3, #255	; 0xff
 800a056:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      }

      maze_wall_search[(i13 + i11) - 1] = (unsigned char)(maze_wall_search[(q0 +
 800a05a:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 800a05e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a062:	4413      	add	r3, r2
 800a064:	3b01      	subs	r3, #1
 800a066:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800a06a:	4413      	add	r3, r2
 800a06c:	7819      	ldrb	r1, [r3, #0]
        i11) - 1] | (unsigned char)i10);
 800a06e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a072:	b2da      	uxtb	r2, r3
      maze_wall_search[(i13 + i11) - 1] = (unsigned char)(maze_wall_search[(q0 +
 800a074:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800a078:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a07c:	4403      	add	r3, r0
 800a07e:	3b01      	subs	r3, #1
 800a080:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800a084:	4403      	add	r3, r0
 800a086:	430a      	orrs	r2, r1
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
    }

    /* 東側のマスの西側の壁情報 */
    qY = maze_col_size - 1U;
 800a08c:	f897 34c8 	ldrb.w	r3, [r7, #1224]	; 0x4c8
 800a090:	3b01      	subs	r3, #1
 800a092:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
    if (qY > maze_col_size) {
 800a096:	f897 34c8 	ldrb.w	r3, [r7, #1224]	; 0x4c8
 800a09a:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d902      	bls.n	800a0a8 <search_adachi+0x8c8>
      qY = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
    }

    if (*current_x < (int)qY) {
 800a0a8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	f280 80dc 	bge.w	800a272 <search_adachi+0xa92>
      k = g_direction->contents.West;
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	78db      	ldrb	r3, [r3, #3]
 800a0c0:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.East + 1U);
 800a0c4:	1d3b      	adds	r3, r7, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a0d0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a0d4:	2bff      	cmp	r3, #255	; 0xff
 800a0d6:	d902      	bls.n	800a0de <search_adachi+0x8fe>
        i10 = 255;
 800a0d8:	23ff      	movs	r3, #255	; 0xff
 800a0da:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a0de:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a0e2:	2b07      	cmp	r3, #7
 800a0e4:	d808      	bhi.n	800a0f8 <search_adachi+0x918>
        k_k = (unsigned char)(1 << k);
 800a0e6:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800a0f6:	e002      	b.n	800a0fe <search_adachi+0x91e>
      } else {
        k_k = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
      }

      i10 = (int)((unsigned int)k_k * wall_write[i10 - 1]);
 800a0fe:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a102:	3b01      	subs	r3, #1
 800a104:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a108:	4413      	add	r3, r2
 800a10a:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800a10e:	461a      	mov	r2, r3
 800a110:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800a114:	fb03 f302 	mul.w	r3, r3, r2
 800a118:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a11c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a120:	2bff      	cmp	r3, #255	; 0xff
 800a122:	d902      	bls.n	800a12a <search_adachi+0x94a>
        i10 = 255;
 800a124:	23ff      	movs	r3, #255	; 0xff
 800a126:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = (int)(*current_x + 1U);
 800a12a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      i13 = q0;
 800a136:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a13a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      if ((unsigned int)q0 > 255U) {
 800a13e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a142:	2bff      	cmp	r3, #255	; 0xff
 800a144:	d902      	bls.n	800a14c <search_adachi+0x96c>
        i13 = 255;
 800a146:	23ff      	movs	r3, #255	; 0xff
 800a148:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      }

      i14 = q0;
 800a14c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a150:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
      if ((unsigned int)q0 > 255U) {
 800a154:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a158:	2bff      	cmp	r3, #255	; 0xff
 800a15a:	d902      	bls.n	800a162 <search_adachi+0x982>
        i14 = 255;
 800a15c:	23ff      	movs	r3, #255	; 0xff
 800a15e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
      }

      maze_wall[(*current_y + ((i13 - 1) << 5)) - 1] = (unsigned char)
        (maze_wall[(*current_y + ((i14 - 1) << 5)) - 1] | (unsigned char)i10);
 800a162:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800a16e:	3b01      	subs	r3, #1
 800a170:	015b      	lsls	r3, r3, #5
 800a172:	4413      	add	r3, r2
 800a174:	3b01      	subs	r3, #1
 800a176:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a17a:	4413      	add	r3, r2
 800a17c:	7819      	ldrb	r1, [r3, #0]
 800a17e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a182:	b2da      	uxtb	r2, r3
      maze_wall[(*current_y + ((i13 - 1) << 5)) - 1] = (unsigned char)
 800a184:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800a190:	3b01      	subs	r3, #1
 800a192:	015b      	lsls	r3, r3, #5
 800a194:	4403      	add	r3, r0
 800a196:	3b01      	subs	r3, #1
 800a198:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 800a19c:	4403      	add	r3, r0
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	b2d2      	uxtb	r2, r2
 800a1a2:	701a      	strb	r2, [r3, #0]
      k = g_direction->contents.West;
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	78db      	ldrb	r3, [r3, #3]
 800a1aa:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.East + 1U);
 800a1ae:	1d3b      	adds	r3, r7, #4
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	785b      	ldrb	r3, [r3, #1]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a1ba:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a1be:	2bff      	cmp	r3, #255	; 0xff
 800a1c0:	d902      	bls.n	800a1c8 <search_adachi+0x9e8>
        i10 = 255;
 800a1c2:	23ff      	movs	r3, #255	; 0xff
 800a1c4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a1c8:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a1cc:	2b07      	cmp	r3, #7
 800a1ce:	d808      	bhi.n	800a1e2 <search_adachi+0xa02>
        o_k = (unsigned char)(1 << k);
 800a1d0:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800a1e0:	e002      	b.n	800a1e8 <search_adachi+0xa08>
      } else {
        o_k = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
      }

      i10 = (int)((unsigned int)o_k * serch_write[i10 - 1]);
 800a1e8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800a1fe:	fb03 f302 	mul.w	r3, r3, r2
 800a202:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a206:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d902      	bls.n	800a214 <search_adachi+0xa34>
        i10 = 255;
 800a20e:	23ff      	movs	r3, #255	; 0xff
 800a210:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      i13 = q0;
 800a214:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a218:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
      if ((unsigned int)q0 > 255U) {
 800a21c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a220:	2bff      	cmp	r3, #255	; 0xff
 800a222:	d905      	bls.n	800a230 <search_adachi+0xa50>
        i13 = 255;
 800a224:	23ff      	movs	r3, #255	; 0xff
 800a226:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
        q0 = 255;
 800a22a:	23ff      	movs	r3, #255	; 0xff
 800a22c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      }

      maze_wall_search[(*current_y + ((i13 - 1) << 5)) - 1] = (unsigned char)
        (maze_wall_search[(*current_y + ((q0 - 1) << 5)) - 1] | (unsigned char)
 800a230:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a23c:	3b01      	subs	r3, #1
 800a23e:	015b      	lsls	r3, r3, #5
 800a240:	4413      	add	r3, r2
 800a242:	3b01      	subs	r3, #1
 800a244:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800a248:	4413      	add	r3, r2
 800a24a:	7819      	ldrb	r1, [r3, #0]
 800a24c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a250:	b2da      	uxtb	r2, r3
      maze_wall_search[(*current_y + ((i13 - 1) << 5)) - 1] = (unsigned char)
 800a252:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800a25e:	3b01      	subs	r3, #1
 800a260:	015b      	lsls	r3, r3, #5
 800a262:	4403      	add	r3, r0
 800a264:	3b01      	subs	r3, #1
 800a266:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800a26a:	4403      	add	r3, r0
 800a26c:	430a      	orrs	r2, r1
 800a26e:	b2d2      	uxtb	r2, r2
 800a270:	701a      	strb	r2, [r3, #0]
         i10);
    }

    /* 南側のマスの北側の壁情報 */
    if (*current_y > 1) {
 800a272:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	f240 80ee 	bls.w	800a45a <search_adachi+0xc7a>
      k = g_direction->contents.North;
 800a27e:	1d3b      	adds	r3, r7, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.South + 1U);
 800a288:	1d3b      	adds	r3, r7, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	789b      	ldrb	r3, [r3, #2]
 800a28e:	3301      	adds	r3, #1
 800a290:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a294:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a298:	2bff      	cmp	r3, #255	; 0xff
 800a29a:	d902      	bls.n	800a2a2 <search_adachi+0xac2>
        i10 = 255;
 800a29c:	23ff      	movs	r3, #255	; 0xff
 800a29e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a2a2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a2a6:	2b07      	cmp	r3, #7
 800a2a8:	d808      	bhi.n	800a2bc <search_adachi+0xadc>
        l_k = (unsigned char)(1 << k);
 800a2aa:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800a2ba:	e002      	b.n	800a2c2 <search_adachi+0xae2>
      } else {
        l_k = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
      }

      i10 = (int)((unsigned int)l_k * wall_write[i10 - 1]);
 800a2c2:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800a2d8:	fb03 f302 	mul.w	r3, r3, r2
 800a2dc:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a2e0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a2e4:	2bff      	cmp	r3, #255	; 0xff
 800a2e6:	d902      	bls.n	800a2ee <search_adachi+0xb0e>
        i10 = 255;
 800a2e8:	23ff      	movs	r3, #255	; 0xff
 800a2ea:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = *current_y;
 800a2ee:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      qY = q0 - 1U;
 800a2f8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      if (qY > (unsigned int)q0) {
 800a302:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a306:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d902      	bls.n	800a314 <search_adachi+0xb34>
        qY = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      }

      q0 = *current_y;
 800a314:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      b_qY = q0 - 1U;
 800a31e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a322:	3b01      	subs	r3, #1
 800a324:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      if (b_qY > (unsigned int)q0) {
 800a328:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a32c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a330:	429a      	cmp	r2, r3
 800a332:	d902      	bls.n	800a33a <search_adachi+0xb5a>
        b_qY = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      }

      maze_wall[((int)qY + i11) - 1] = (unsigned char)(maze_wall[((int)b_qY +
 800a33a:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a33e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a342:	4413      	add	r3, r2
 800a344:	3b01      	subs	r3, #1
 800a346:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a34a:	4413      	add	r3, r2
 800a34c:	7819      	ldrb	r1, [r3, #0]
        i11) - 1] | (unsigned char)i10);
 800a34e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a352:	b2da      	uxtb	r2, r3
      maze_wall[((int)qY + i11) - 1] = (unsigned char)(maze_wall[((int)b_qY +
 800a354:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800a358:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a35c:	4403      	add	r3, r0
 800a35e:	3b01      	subs	r3, #1
 800a360:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 800a364:	4403      	add	r3, r0
 800a366:	430a      	orrs	r2, r1
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	701a      	strb	r2, [r3, #0]
      k = g_direction->contents.North;
 800a36c:	1d3b      	adds	r3, r7, #4
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.South + 1U);
 800a376:	1d3b      	adds	r3, r7, #4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	789b      	ldrb	r3, [r3, #2]
 800a37c:	3301      	adds	r3, #1
 800a37e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a382:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a386:	2bff      	cmp	r3, #255	; 0xff
 800a388:	d902      	bls.n	800a390 <search_adachi+0xbb0>
        i10 = 255;
 800a38a:	23ff      	movs	r3, #255	; 0xff
 800a38c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a390:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a394:	2b07      	cmp	r3, #7
 800a396:	d808      	bhi.n	800a3aa <search_adachi+0xbca>
        q_k = (unsigned char)(1 << k);
 800a398:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a39c:	2201      	movs	r2, #1
 800a39e:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800a3a8:	e002      	b.n	800a3b0 <search_adachi+0xbd0>
      } else {
        q_k = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
      }

      i10 = (int)((unsigned int)q_k * serch_write[i10 - 1]);
 800a3b0:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800a3c6:	fb03 f302 	mul.w	r3, r3, r2
 800a3ca:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a3ce:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a3d2:	2bff      	cmp	r3, #255	; 0xff
 800a3d4:	d902      	bls.n	800a3dc <search_adachi+0xbfc>
        i10 = 255;
 800a3d6:	23ff      	movs	r3, #255	; 0xff
 800a3d8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = *current_y;
 800a3dc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      qY = q0 - 1U;
 800a3e6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      if (qY > (unsigned int)q0) {
 800a3f0:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a3f4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d902      	bls.n	800a402 <search_adachi+0xc22>
        qY = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      }

      q0 = *current_y;
 800a402:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      b_qY = q0 - 1U;
 800a40c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a410:	3b01      	subs	r3, #1
 800a412:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      if (b_qY > (unsigned int)q0) {
 800a416:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a41a:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a41e:	429a      	cmp	r2, r3
 800a420:	d902      	bls.n	800a428 <search_adachi+0xc48>
        b_qY = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      }

      maze_wall_search[((int)qY + i11) - 1] = (unsigned char)(maze_wall_search
        [((int)b_qY + i11) - 1] | (unsigned char)i10);
 800a428:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a42c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a430:	4413      	add	r3, r2
 800a432:	3b01      	subs	r3, #1
 800a434:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800a438:	4413      	add	r3, r2
 800a43a:	7819      	ldrb	r1, [r3, #0]
 800a43c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a440:	b2da      	uxtb	r2, r3
      maze_wall_search[((int)qY + i11) - 1] = (unsigned char)(maze_wall_search
 800a442:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800a446:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a44a:	4403      	add	r3, r0
 800a44c:	3b01      	subs	r3, #1
 800a44e:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800a452:	4403      	add	r3, r0
 800a454:	430a      	orrs	r2, r1
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]
    }

    /* 西側のマスの東側の壁情報 */
    if (*current_x > 1) {
 800a45a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	f240 80fe 	bls.w	800a662 <search_adachi+0xe82>
      k = g_direction->contents.East;
 800a466:	1d3b      	adds	r3, r7, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	785b      	ldrb	r3, [r3, #1]
 800a46c:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.West + 1U);
 800a470:	1d3b      	adds	r3, r7, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	78db      	ldrb	r3, [r3, #3]
 800a476:	3301      	adds	r3, #1
 800a478:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a47c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a480:	2bff      	cmp	r3, #255	; 0xff
 800a482:	d902      	bls.n	800a48a <search_adachi+0xcaa>
        i10 = 255;
 800a484:	23ff      	movs	r3, #255	; 0xff
 800a486:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a48a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a48e:	2b07      	cmp	r3, #7
 800a490:	d808      	bhi.n	800a4a4 <search_adachi+0xcc4>
        m_k = (unsigned char)(1 << k);
 800a492:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a496:	2201      	movs	r2, #1
 800a498:	fa02 f303 	lsl.w	r3, r2, r3
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800a4a2:	e002      	b.n	800a4aa <search_adachi+0xcca>
      } else {
        m_k = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
      }

      i10 = (int)((unsigned int)m_k * wall_write[i10 - 1]);
 800a4aa:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800a4c0:	fb03 f302 	mul.w	r3, r3, r2
 800a4c4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a4c8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a4cc:	2bff      	cmp	r3, #255	; 0xff
 800a4ce:	d902      	bls.n	800a4d6 <search_adachi+0xcf6>
        i10 = 255;
 800a4d0:	23ff      	movs	r3, #255	; 0xff
 800a4d2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = *current_x;
 800a4d6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      qY = q0 - 1U;
 800a4e0:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      if (qY > (unsigned int)q0) {
 800a4ea:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a4ee:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d902      	bls.n	800a4fc <search_adachi+0xd1c>
        qY = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      }

      q0 = *current_x;
 800a4fc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      b_qY = q0 - 1U;
 800a506:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a50a:	3b01      	subs	r3, #1
 800a50c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      if (b_qY > (unsigned int)q0) {
 800a510:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a514:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a518:	429a      	cmp	r2, r3
 800a51a:	d902      	bls.n	800a522 <search_adachi+0xd42>
        b_qY = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      }

      maze_wall[(*current_y + (((int)qY - 1) << 5)) - 1] = (unsigned char)
        (maze_wall[(*current_y + (((int)b_qY - 1) << 5)) - 1] | (unsigned char)
 800a522:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800a52e:	3b01      	subs	r3, #1
 800a530:	015b      	lsls	r3, r3, #5
 800a532:	4413      	add	r3, r2
 800a534:	3b01      	subs	r3, #1
 800a536:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a53a:	4413      	add	r3, r2
 800a53c:	7819      	ldrb	r1, [r3, #0]
 800a53e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a542:	b2da      	uxtb	r2, r3
      maze_wall[(*current_y + (((int)qY - 1) << 5)) - 1] = (unsigned char)
 800a544:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800a550:	3b01      	subs	r3, #1
 800a552:	015b      	lsls	r3, r3, #5
 800a554:	4403      	add	r3, r0
 800a556:	3b01      	subs	r3, #1
 800a558:	f8d7 04cc 	ldr.w	r0, [r7, #1228]	; 0x4cc
 800a55c:	4403      	add	r3, r0
 800a55e:	430a      	orrs	r2, r1
 800a560:	b2d2      	uxtb	r2, r2
 800a562:	701a      	strb	r2, [r3, #0]
         i10);
      k = g_direction->contents.East;
 800a564:	1d3b      	adds	r3, r7, #4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      i10 = (int)(g_direction->contents.West + 1U);
 800a56e:	1d3b      	adds	r3, r7, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	78db      	ldrb	r3, [r3, #3]
 800a574:	3301      	adds	r3, #1
 800a576:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a57a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a57e:	2bff      	cmp	r3, #255	; 0xff
 800a580:	d902      	bls.n	800a588 <search_adachi+0xda8>
        i10 = 255;
 800a582:	23ff      	movs	r3, #255	; 0xff
 800a584:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      if (k <= 7) {
 800a588:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a58c:	2b07      	cmp	r3, #7
 800a58e:	d808      	bhi.n	800a5a2 <search_adachi+0xdc2>
        r_k = (unsigned char)(1 << k);
 800a590:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a594:	2201      	movs	r2, #1
 800a596:	fa02 f303 	lsl.w	r3, r2, r3
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800a5a0:	e002      	b.n	800a5a8 <search_adachi+0xdc8>
      } else {
        r_k = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
      }

      i10 = (int)((unsigned int)r_k * serch_write[i10 - 1]);
 800a5a8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800a5be:	fb03 f302 	mul.w	r3, r3, r2
 800a5c2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      if ((unsigned int)i10 > 255U) {
 800a5c6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a5ca:	2bff      	cmp	r3, #255	; 0xff
 800a5cc:	d902      	bls.n	800a5d4 <search_adachi+0xdf4>
        i10 = 255;
 800a5ce:	23ff      	movs	r3, #255	; 0xff
 800a5d0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      }

      q0 = *current_x;
 800a5d4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      qY = q0 - 1U;
 800a5de:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      if (qY > (unsigned int)q0) {
 800a5e8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a5ec:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d902      	bls.n	800a5fa <search_adachi+0xe1a>
        qY = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      }

      q0 = *current_x;
 800a5fa:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      b_qY = q0 - 1U;
 800a604:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a608:	3b01      	subs	r3, #1
 800a60a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      if (b_qY > (unsigned int)q0) {
 800a60e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a612:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 800a616:	429a      	cmp	r2, r3
 800a618:	d902      	bls.n	800a620 <search_adachi+0xe40>
        b_qY = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
      }

      maze_wall_search[(*current_y + (((int)qY - 1) << 5)) - 1] = (unsigned char)
        (maze_wall_search[(*current_y + (((int)b_qY - 1) << 5)) - 1] | (unsigned
 800a620:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800a62c:	3b01      	subs	r3, #1
 800a62e:	015b      	lsls	r3, r3, #5
 800a630:	4413      	add	r3, r2
 800a632:	3b01      	subs	r3, #1
 800a634:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800a638:	4413      	add	r3, r2
 800a63a:	7819      	ldrb	r1, [r3, #0]
 800a63c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a640:	b2da      	uxtb	r2, r3
      maze_wall_search[(*current_y + (((int)qY - 1) << 5)) - 1] = (unsigned char)
 800a642:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4618      	mov	r0, r3
 800a64a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800a64e:	3b01      	subs	r3, #1
 800a650:	015b      	lsls	r3, r3, #5
 800a652:	4403      	add	r3, r0
 800a654:	3b01      	subs	r3, #1
 800a656:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 800a65a:	4403      	add	r3, r0
 800a65c:	430a      	orrs	r2, r1
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]
          char)i10);
    }

    /* m現在位置がゴールか判定 */
    for (q0 = 0; q0 < i9; q0++) {
 800a662:	2300      	movs	r3, #0
 800a664:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800a668:	e01e      	b.n	800a6a8 <search_adachi+0xec8>
      if ((*current_x == maze_goal[q0]) && (*current_y == maze_goal[q0 + 9])) {
 800a66a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a674:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800a678:	440b      	add	r3, r1
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d10e      	bne.n	800a69e <search_adachi+0xebe>
 800a680:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a68a:	3309      	adds	r3, #9
 800a68c:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800a690:	440b      	add	r3, r1
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d102      	bne.n	800a69e <search_adachi+0xebe>
        goal_flag = 1U;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
    for (q0 = 0; q0 < i9; q0++) {
 800a69e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800a6a8:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 800a6ac:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	dbda      	blt.n	800a66a <search_adachi+0xe8a>
      }
    }

    if (goal_flag == 1) {
 800a6b4:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d106      	bne.n	800a6ca <search_adachi+0xeea>
      exitg1 = 1;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
      half_deceleration();
 800a6c2:	f002 ffc1 	bl	800d648 <half_deceleration>
 800a6c6:	f000 bc63 	b.w	800af90 <search_adachi+0x17b0>


    } else {
      /*  等高線MAP生成 */
      /*  [contour_map,max_length] = make_map2(maze_row_size,maze_col_size,maze_goal,maze_wall); */
      make_map_find(g_direction, wall, maze_row_size, maze_col_size, maze_goal,
 800a6ca:	f897 44c8 	ldrb.w	r4, [r7, #1224]	; 0x4c8
 800a6ce:	f897 24c4 	ldrb.w	r2, [r7, #1220]	; 0x4c4
 800a6d2:	f107 010c 	add.w	r1, r7, #12
 800a6d6:	1d38      	adds	r0, r7, #4
 800a6d8:	f107 0317 	add.w	r3, r7, #23
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	f107 0318 	add.w	r3, r7, #24
 800a6e2:	9303      	str	r3, [sp, #12]
 800a6e4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800a6e8:	9302      	str	r3, [sp, #8]
 800a6ea:	f897 34d8 	ldrb.w	r3, [r7, #1240]	; 0x4d8
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	6809      	ldr	r1, [r1, #0]
 800a6fa:	6800      	ldr	r0, [r0, #0]
 800a6fc:	f7fd f9dc 	bl	8007ab8 <make_map_find>
      /* 優先順位　北⇒東⇒南⇒西 */
      /*  入力 現在地x,y,壁情報,等高線map,最大経路長 */
      /*  出力 次の進行方角 */
      /*  get_nextdir2 等高線mapから次に向かう方向を選択 */
      /* 出力の初期化 */
      next_dir = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453

      /*             %%進行方向選定 */
      /* 優先順位　北⇒東⇒南⇒西 */
      /* 北側の壁のありなし判定 */
      k = g_direction->contents.North;
 800a706:	1d3b      	adds	r3, r7, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      if (k <= 7) {
 800a710:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a714:	2b07      	cmp	r3, #7
 800a716:	d808      	bhi.n	800a72a <search_adachi+0xf4a>
        p_k = (unsigned char)(1 << k);
 800a718:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a71c:	2201      	movs	r2, #1
 800a71e:	fa02 f303 	lsl.w	r3, r2, r3
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800a728:	e002      	b.n	800a730 <search_adachi+0xf50>
      } else {
        p_k = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
      }

      if ((maze_wall[i12] & p_k) == 0) {
 800a730:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800a734:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a738:	4413      	add	r3, r2
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	461a      	mov	r2, r3
 800a73e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a742:	4013      	ands	r3, r2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d138      	bne.n	800a7ba <search_adachi+0xfda>
        /* 北側の等高線mapが閾値より低ければ、 */
        i10 = (int)(*current_y + 1U);
 800a748:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	3301      	adds	r3, #1
 800a750:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800a754:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a758:	2bff      	cmp	r3, #255	; 0xff
 800a75a:	d902      	bls.n	800a762 <search_adachi+0xf82>
          i10 = 255;
 800a75c:	23ff      	movs	r3, #255	; 0xff
 800a75e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        if (cmap[(i10 + i11) - 1] < little) {
 800a762:	f8d7 249c 	ldr.w	r2, [r7, #1180]	; 0x49c
 800a766:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a76a:	4413      	add	r3, r2
 800a76c:	3b01      	subs	r3, #1
 800a76e:	f107 0218 	add.w	r2, r7, #24
 800a772:	5cd2      	ldrb	r2, [r2, r3]
 800a774:	f107 0317 	add.w	r3, r7, #23
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d21d      	bcs.n	800a7ba <search_adachi+0xfda>
          /* 閾値を北側の等高map値に変更 */
          i10 = (int)(*current_y + 1U);
 800a77e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800a78a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a78e:	2bff      	cmp	r3, #255	; 0xff
 800a790:	d902      	bls.n	800a798 <search_adachi+0xfb8>
            i10 = 255;
 800a792:	23ff      	movs	r3, #255	; 0xff
 800a794:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          little = cmap[(i10 + i11) - 1];
 800a798:	f8d7 249c 	ldr.w	r2, [r7, #1180]	; 0x49c
 800a79c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a7a0:	4413      	add	r3, r2
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	f107 0218 	add.w	r2, r7, #24
 800a7a8:	5cd2      	ldrb	r2, [r2, r3]
 800a7aa:	f107 0317 	add.w	r3, r7, #23
 800a7ae:	701a      	strb	r2, [r3, #0]

          /* 北側を進行方向に変更y */
          next_dir = g_direction->contents.North;
 800a7b0:	1d3b      	adds	r3, r7, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
        }
      }

      /* 東側 */
      k = g_direction->contents.East;
 800a7ba:	1d3b      	adds	r3, r7, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      if (k <= 7) {
 800a7c4:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a7c8:	2b07      	cmp	r3, #7
 800a7ca:	d808      	bhi.n	800a7de <search_adachi+0xffe>
        s_k = (unsigned char)(1 << k);
 800a7cc:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800a7dc:	e002      	b.n	800a7e4 <search_adachi+0x1004>
      } else {
        s_k = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
      }

      if ((maze_wall[(*current_y + ((*current_x - 1) << 5)) - 1] & s_k) == 0) {
 800a7e4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	015b      	lsls	r3, r3, #5
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d140      	bne.n	800a890 <search_adachi+0x10b0>
        i10 = (int)(*current_x + 1U);
 800a80e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	3301      	adds	r3, #1
 800a816:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800a81a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a81e:	2bff      	cmp	r3, #255	; 0xff
 800a820:	d902      	bls.n	800a828 <search_adachi+0x1048>
          i10 = 255;
 800a822:	23ff      	movs	r3, #255	; 0xff
 800a824:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        if (cmap[(*current_y + ((i10 - 1) << 5)) - 1] < little) {
 800a828:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a834:	3b01      	subs	r3, #1
 800a836:	015b      	lsls	r3, r3, #5
 800a838:	4413      	add	r3, r2
 800a83a:	3b01      	subs	r3, #1
 800a83c:	f107 0218 	add.w	r2, r7, #24
 800a840:	5cd2      	ldrb	r2, [r2, r3]
 800a842:	f107 0317 	add.w	r3, r7, #23
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d221      	bcs.n	800a890 <search_adachi+0x10b0>
          i10 = (int)(*current_x + 1U);
 800a84c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800a858:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a85c:	2bff      	cmp	r3, #255	; 0xff
 800a85e:	d902      	bls.n	800a866 <search_adachi+0x1086>
            i10 = 255;
 800a860:	23ff      	movs	r3, #255	; 0xff
 800a862:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          little = cmap[(*current_y + ((i10 - 1) << 5)) - 1];
 800a866:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	461a      	mov	r2, r3
 800a86e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800a872:	3b01      	subs	r3, #1
 800a874:	015b      	lsls	r3, r3, #5
 800a876:	4413      	add	r3, r2
 800a878:	3b01      	subs	r3, #1
 800a87a:	f107 0218 	add.w	r2, r7, #24
 800a87e:	5cd2      	ldrb	r2, [r2, r3]
 800a880:	f107 0317 	add.w	r3, r7, #23
 800a884:	701a      	strb	r2, [r3, #0]
          next_dir = g_direction->contents.East;
 800a886:	1d3b      	adds	r3, r7, #4
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	785b      	ldrb	r3, [r3, #1]
 800a88c:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
        }
      }

      /* 南側 */
      k = g_direction->contents.South;
 800a890:	1d3b      	adds	r3, r7, #4
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	789b      	ldrb	r3, [r3, #2]
 800a896:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      if (k <= 7) {
 800a89a:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a89e:	2b07      	cmp	r3, #7
 800a8a0:	d808      	bhi.n	800a8b4 <search_adachi+0x10d4>
        t_k = (unsigned char)(1 << k);
 800a8a2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800a8b2:	e002      	b.n	800a8ba <search_adachi+0x10da>
      } else {
        t_k = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      }

      if ((maze_wall[(*current_y + ((*current_x - 1) << 5)) - 1] & t_k) == 0) {
 800a8ba:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	015b      	lsls	r3, r3, #5
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800a8de:	4013      	ands	r3, r2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d144      	bne.n	800a96e <search_adachi+0x118e>
        q0 = *current_y;
 800a8e4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
        qY = q0 - 1U;
 800a8ee:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        if (qY > (unsigned int)q0) {
 800a8f8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a8fc:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a900:	429a      	cmp	r2, r3
 800a902:	d902      	bls.n	800a90a <search_adachi+0x112a>
          qY = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        }

        if (cmap[((int)qY + i11) - 1] < little) {
 800a90a:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a90e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a912:	4413      	add	r3, r2
 800a914:	3b01      	subs	r3, #1
 800a916:	f107 0218 	add.w	r2, r7, #24
 800a91a:	5cd2      	ldrb	r2, [r2, r3]
 800a91c:	f107 0317 	add.w	r3, r7, #23
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d223      	bcs.n	800a96e <search_adachi+0x118e>
          q0 = *current_y;
 800a926:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
          qY = q0 - 1U;
 800a930:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a934:	3b01      	subs	r3, #1
 800a936:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > (unsigned int)q0) {
 800a93a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a93e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a942:	429a      	cmp	r2, r3
 800a944:	d902      	bls.n	800a94c <search_adachi+0x116c>
            qY = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          little = cmap[((int)qY + i11) - 1];
 800a94c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a950:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800a954:	4413      	add	r3, r2
 800a956:	3b01      	subs	r3, #1
 800a958:	f107 0218 	add.w	r2, r7, #24
 800a95c:	5cd2      	ldrb	r2, [r2, r3]
 800a95e:	f107 0317 	add.w	r3, r7, #23
 800a962:	701a      	strb	r2, [r3, #0]
          next_dir = g_direction->contents.South;
 800a964:	1d3b      	adds	r3, r7, #4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	789b      	ldrb	r3, [r3, #2]
 800a96a:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
        }
      }

      /* 西側 */
      k = g_direction->contents.West;
 800a96e:	1d3b      	adds	r3, r7, #4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	78db      	ldrb	r3, [r3, #3]
 800a974:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      if (k <= 7) {
 800a978:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	d808      	bhi.n	800a992 <search_adachi+0x11b2>
        u_k = (unsigned char)(1 << k);
 800a980:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800a984:	2201      	movs	r2, #1
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800a990:	e002      	b.n	800a998 <search_adachi+0x11b8>
      } else {
        u_k = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }

      if ((maze_wall[(*current_y + ((*current_x - 1) << 5)) - 1] & u_k) == 0) {
 800a998:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	015b      	lsls	r3, r3, #5
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d129      	bne.n	800aa16 <search_adachi+0x1236>
        q0 = *current_x;
 800a9c2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
        qY = q0 - 1U;
 800a9cc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        if (qY > (unsigned int)q0) {
 800a9d6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800a9da:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d902      	bls.n	800a9e8 <search_adachi+0x1208>
          qY = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
        }

        if (cmap[(*current_y + (((int)qY - 1) << 5)) - 1] < little) {
 800a9e8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	015b      	lsls	r3, r3, #5
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	f107 0218 	add.w	r2, r7, #24
 800aa00:	5cd2      	ldrb	r2, [r2, r3]
 800aa02:	f107 0317 	add.w	r3, r7, #23
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d204      	bcs.n	800aa16 <search_adachi+0x1236>
          /*  little = contour_map(current_y,current_x-1); */
          next_dir = g_direction->contents.West;
 800aa0c:	1d3b      	adds	r3, r7, #4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	78db      	ldrb	r3, [r3, #3]
 800aa12:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
        }
      }

      /*  現在方向と進行方向に応じた処理 */
      q0 = (int)(4U + next_dir);
 800aa16:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      if ((unsigned int)q0 > 255U) {
 800aa20:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800aa24:	2bff      	cmp	r3, #255	; 0xff
 800aa26:	d902      	bls.n	800aa2e <search_adachi+0x124e>
        q0 = 255;
 800aa28:	23ff      	movs	r3, #255	; 0xff
 800aa2a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      }

      qY = (unsigned int)q0 - *current_dir;
 800aa2e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800aa32:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800aa36:	7812      	ldrb	r2, [r2, #0]
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      if (qY > (unsigned int)q0) {
 800aa3e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800aa42:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d902      	bls.n	800aa50 <search_adachi+0x1270>
        qY = 0U;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
      }

      k = (unsigned char)((int)qY % 4);
 800aa50:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800aa54:	425a      	negs	r2, r3
 800aa56:	f003 0303 	and.w	r3, r3, #3
 800aa5a:	f002 0203 	and.w	r2, r2, #3
 800aa5e:	bf58      	it	pl
 800aa60:	4253      	negpl	r3, r2
 800aa62:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
      next_dir = l_direction->contents.front;
 800aa66:	463b      	mov	r3, r7
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
      little = l_direction->contents.right;
 800aa70:	463b      	mov	r3, r7
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	785a      	ldrb	r2, [r3, #1]
 800aa76:	f107 0317 	add.w	r3, r7, #23
 800aa7a:	701a      	strb	r2, [r3, #0]
      varargin_3 = l_direction->contents.back;
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	789b      	ldrb	r3, [r3, #2]
 800aa82:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
      varargin_4 = l_direction->contents.left;
 800aa86:	463b      	mov	r3, r7
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	78db      	ldrb	r3, [r3, #3]
 800aa8c:	f887 3422 	strb.w	r3, [r7, #1058]	; 0x422
      if (next_dir == k) {
 800aa90:	f897 2453 	ldrb.w	r2, [r7, #1107]	; 0x453
 800aa94:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d103      	bne.n	800aaa4 <search_adachi+0x12c4>
        q0 = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800aaa2:	e022      	b.n	800aaea <search_adachi+0x130a>
      } else if (little == k) {
 800aaa4:	f107 0317 	add.w	r3, r7, #23
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f897 242f 	ldrb.w	r2, [r7, #1071]	; 0x42f
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d103      	bne.n	800aaba <search_adachi+0x12da>
        q0 = 1;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800aab8:	e017      	b.n	800aaea <search_adachi+0x130a>
      } else if (varargin_3 == k) {
 800aaba:	f897 2423 	ldrb.w	r2, [r7, #1059]	; 0x423
 800aabe:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d103      	bne.n	800aace <search_adachi+0x12ee>
        q0 = 2;
 800aac6:	2302      	movs	r3, #2
 800aac8:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800aacc:	e00d      	b.n	800aaea <search_adachi+0x130a>
      } else if (varargin_4 == k) {
 800aace:	f897 2422 	ldrb.w	r2, [r7, #1058]	; 0x422
 800aad2:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d103      	bne.n	800aae2 <search_adachi+0x1302>
        q0 = 3;
 800aada:	2303      	movs	r3, #3
 800aadc:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800aae0:	e003      	b.n	800aaea <search_adachi+0x130a>
      } else {
        q0 = -1;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
 800aae6:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
      }

      switch (q0) {
 800aaea:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	f200 824e 	bhi.w	800af90 <search_adachi+0x17b0>
 800aaf4:	a201      	add	r2, pc, #4	; (adr r2, 800aafc <search_adachi+0x131c>)
 800aaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafa:	bf00      	nop
 800aafc:	0800ab0d 	.word	0x0800ab0d
 800ab00:	0800abfd 	.word	0x0800abfd
 800ab04:	0800ad39 	.word	0x0800ad39
 800ab08:	0800ae5f 	.word	0x0800ae5f
       case 0:	//前進時
    	move_front();
 800ab0c:	f002 ff0c 	bl	800d928 <move_front>
        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (*current_dir == g_direction->contents.North) {
 800ab10:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	1d3b      	adds	r3, r7, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d112      	bne.n	800ab46 <search_adachi+0x1366>
          i10 = (int)(*current_y + 1U);
 800ab20:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	3301      	adds	r3, #1
 800ab28:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800ab2c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ab30:	2bff      	cmp	r3, #255	; 0xff
 800ab32:	d902      	bls.n	800ab3a <search_adachi+0x135a>
            i10 = 255;
 800ab34:	23ff      	movs	r3, #255	; 0xff
 800ab36:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_y = (unsigned char)i10;
 800ab3a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ab44:	701a      	strb	r2, [r3, #0]

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (*current_dir == g_direction->contents.East) {
 800ab46:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ab4a:	781a      	ldrb	r2, [r3, #0]
 800ab4c:	1d3b      	adds	r3, r7, #4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d112      	bne.n	800ab7c <search_adachi+0x139c>
          i10 = (int)(*current_x + 1U);
 800ab56:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800ab62:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ab66:	2bff      	cmp	r3, #255	; 0xff
 800ab68:	d902      	bls.n	800ab70 <search_adachi+0x1390>
            i10 = 255;
 800ab6a:	23ff      	movs	r3, #255	; 0xff
 800ab6c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_x = (unsigned char)i10;
 800ab70:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ab7a:	701a      	strb	r2, [r3, #0]

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (*current_dir == g_direction->contents.South) {
 800ab7c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	1d3b      	adds	r3, r7, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	789b      	ldrb	r3, [r3, #2]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d116      	bne.n	800abba <search_adachi+0x13da>
          qY = *current_y - 1U;
 800ab8c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_y) {
 800ab98:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d902      	bls.n	800abae <search_adachi+0x13ce>
            qY = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_y = (unsigned char)qY;
 800abae:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800abb8:	701a      	strb	r2, [r3, #0]

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (*current_dir == g_direction->contents.West) {
 800abba:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	1d3b      	adds	r3, r7, #4
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	78db      	ldrb	r3, [r3, #3]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	f040 81db 	bne.w	800af82 <search_adachi+0x17a2>
          qY = *current_x - 1U;
 800abcc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	3b01      	subs	r3, #1
 800abd4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_x) {
 800abd8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d902      	bls.n	800abee <search_adachi+0x140e>
            qY = 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_x = (unsigned char)qY;
 800abee:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800abf8:	701a      	strb	r2, [r3, #0]

          /* disp("west_step") */
        }

        /* disp("front") */
        break;
 800abfa:	e1c2      	b.n	800af82 <search_adachi+0x17a2>

       case 1: //右折時
    	move_right();
 800abfc:	f002 feac 	bl	800d958 <move_right>
        /* 入力 現在方向 */
        /* 出力 現在方向 */
        /*  turn_clk_90deg 時計周りに90度ターンする関数  */
        i10 = (int)(4U + *current_dir);
 800ac00:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	3304      	adds	r3, #4
 800ac08:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800ac0c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac10:	2bff      	cmp	r3, #255	; 0xff
 800ac12:	d902      	bls.n	800ac1a <search_adachi+0x143a>
          i10 = 255;
 800ac14:	23ff      	movs	r3, #255	; 0xff
 800ac16:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        i10++;
 800ac1a:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac1e:	3301      	adds	r3, #1
 800ac20:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800ac24:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac28:	2bff      	cmp	r3, #255	; 0xff
 800ac2a:	d902      	bls.n	800ac32 <search_adachi+0x1452>
          i10 = 255;
 800ac2c:	23ff      	movs	r3, #255	; 0xff
 800ac2e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        *current_dir = (unsigned char)(i10 % 4);
 800ac32:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac36:	425a      	negs	r2, r3
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	f002 0203 	and.w	r2, r2, #3
 800ac40:	bf58      	it	pl
 800ac42:	4253      	negpl	r3, r2
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ac4a:	701a      	strb	r2, [r3, #0]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (*current_dir == g_direction->contents.North) {
 800ac4c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	1d3b      	adds	r3, r7, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d112      	bne.n	800ac82 <search_adachi+0x14a2>
          i10 = (int)(*current_y + 1U);
 800ac5c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800ac68:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac6c:	2bff      	cmp	r3, #255	; 0xff
 800ac6e:	d902      	bls.n	800ac76 <search_adachi+0x1496>
            i10 = 255;
 800ac70:	23ff      	movs	r3, #255	; 0xff
 800ac72:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_y = (unsigned char)i10;
 800ac76:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ac80:	701a      	strb	r2, [r3, #0]

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (*current_dir == g_direction->contents.East) {
 800ac82:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	1d3b      	adds	r3, r7, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d112      	bne.n	800acb8 <search_adachi+0x14d8>
          i10 = (int)(*current_x + 1U);
 800ac92:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800ac9e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800aca2:	2bff      	cmp	r3, #255	; 0xff
 800aca4:	d902      	bls.n	800acac <search_adachi+0x14cc>
            i10 = 255;
 800aca6:	23ff      	movs	r3, #255	; 0xff
 800aca8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_x = (unsigned char)i10;
 800acac:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800acb6:	701a      	strb	r2, [r3, #0]

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (*current_dir == g_direction->contents.South) {
 800acb8:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	1d3b      	adds	r3, r7, #4
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	789b      	ldrb	r3, [r3, #2]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d116      	bne.n	800acf6 <search_adachi+0x1516>
          qY = *current_y - 1U;
 800acc8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	3b01      	subs	r3, #1
 800acd0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_y) {
 800acd4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d902      	bls.n	800acea <search_adachi+0x150a>
            qY = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_y = (unsigned char)qY;
 800acea:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800acf4:	701a      	strb	r2, [r3, #0]

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (*current_dir == g_direction->contents.West) {
 800acf6:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	1d3b      	adds	r3, r7, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	78db      	ldrb	r3, [r3, #3]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	f040 813f 	bne.w	800af86 <search_adachi+0x17a6>
          qY = *current_x - 1U;
 800ad08:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_x) {
 800ad14:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d902      	bls.n	800ad2a <search_adachi+0x154a>
            qY = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_x = (unsigned char)qY;
 800ad2a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ad34:	701a      	strb	r2, [r3, #0]

          /* disp("west_step") */
        }

        /* disp("right") */
        break;
 800ad36:	e126      	b.n	800af86 <search_adachi+0x17a6>

       case 2:	//バック
    	move_back();
 800ad38:	f002 fe66 	bl	800da08 <move_back>
        /* 入力 現在方向 */
        /* 出力 現在方向 */
        /*  turn_180deg 180度ターンする関数 */
        i10 = (int)(4U + *current_dir);
 800ad3c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	3304      	adds	r3, #4
 800ad44:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800ad48:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ad4c:	2bff      	cmp	r3, #255	; 0xff
 800ad4e:	d902      	bls.n	800ad56 <search_adachi+0x1576>
          i10 = 255;
 800ad50:	23ff      	movs	r3, #255	; 0xff
 800ad52:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        *current_dir = (unsigned char)((i10 - 2) % 4);
 800ad56:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ad5a:	3b02      	subs	r3, #2
 800ad5c:	425a      	negs	r2, r3
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	f002 0203 	and.w	r2, r2, #3
 800ad66:	bf58      	it	pl
 800ad68:	4253      	negpl	r3, r2
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ad70:	701a      	strb	r2, [r3, #0]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (*current_dir == g_direction->contents.North) {
 800ad72:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	1d3b      	adds	r3, r7, #4
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d112      	bne.n	800ada8 <search_adachi+0x15c8>
          i10 = (int)(*current_y + 1U);
 800ad82:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800ad8e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ad92:	2bff      	cmp	r3, #255	; 0xff
 800ad94:	d902      	bls.n	800ad9c <search_adachi+0x15bc>
            i10 = 255;
 800ad96:	23ff      	movs	r3, #255	; 0xff
 800ad98:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_y = (unsigned char)i10;
 800ad9c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ada6:	701a      	strb	r2, [r3, #0]

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (*current_dir == g_direction->contents.East) {
 800ada8:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800adac:	781a      	ldrb	r2, [r3, #0]
 800adae:	1d3b      	adds	r3, r7, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	785b      	ldrb	r3, [r3, #1]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d112      	bne.n	800adde <search_adachi+0x15fe>
          i10 = (int)(*current_x + 1U);
 800adb8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800adc4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800adc8:	2bff      	cmp	r3, #255	; 0xff
 800adca:	d902      	bls.n	800add2 <search_adachi+0x15f2>
            i10 = 255;
 800adcc:	23ff      	movs	r3, #255	; 0xff
 800adce:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_x = (unsigned char)i10;
 800add2:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800add6:	b2da      	uxtb	r2, r3
 800add8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800addc:	701a      	strb	r2, [r3, #0]

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (*current_dir == g_direction->contents.South) {
 800adde:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ade2:	781a      	ldrb	r2, [r3, #0]
 800ade4:	1d3b      	adds	r3, r7, #4
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	789b      	ldrb	r3, [r3, #2]
 800adea:	429a      	cmp	r2, r3
 800adec:	d116      	bne.n	800ae1c <search_adachi+0x163c>
          qY = *current_y - 1U;
 800adee:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_y) {
 800adfa:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	461a      	mov	r2, r3
 800ae02:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d902      	bls.n	800ae10 <search_adachi+0x1630>
            qY = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_y = (unsigned char)qY;
 800ae10:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800ae1a:	701a      	strb	r2, [r3, #0]

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (*current_dir == g_direction->contents.West) {
 800ae1c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	1d3b      	adds	r3, r7, #4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	78db      	ldrb	r3, [r3, #3]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	f040 80ae 	bne.w	800af8a <search_adachi+0x17aa>
          qY = *current_x - 1U;
 800ae2e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_x) {
 800ae3a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d902      	bls.n	800ae50 <search_adachi+0x1670>
            qY = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_x = (unsigned char)qY;
 800ae50:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800ae5a:	701a      	strb	r2, [r3, #0]

          /* disp("west_step") */
        }

        /* disp("back") */
        break;
 800ae5c:	e095      	b.n	800af8a <search_adachi+0x17aa>

       case 3://左折時
    	move_left();
 800ae5e:	f002 fda7 	bl	800d9b0 <move_left>
        /* 入力　現在方向 */
        /* 出力　現在方向 */
        /*  turn_conclk_90deg 反時計周りに90度回る関数  */
        i10 = (int)(4U + *current_dir);
 800ae62:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        if ((unsigned int)i10 > 255U) {
 800ae6e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ae72:	2bff      	cmp	r3, #255	; 0xff
 800ae74:	d902      	bls.n	800ae7c <search_adachi+0x169c>
          i10 = 255;
 800ae76:	23ff      	movs	r3, #255	; 0xff
 800ae78:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
        }

        *current_dir = (unsigned char)((i10 - 1) % 4);
 800ae7c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800ae80:	3b01      	subs	r3, #1
 800ae82:	425a      	negs	r2, r3
 800ae84:	f003 0303 	and.w	r3, r3, #3
 800ae88:	f002 0203 	and.w	r2, r2, #3
 800ae8c:	bf58      	it	pl
 800ae8e:	4253      	negpl	r3, r2
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ae96:	701a      	strb	r2, [r3, #0]

        /* 入力 現在位置x,y,現在方向 */
        /* 出力 現在位置x,y */
        /*  move_step 一マス前進する関数 */
        /* 北に一マス */
        if (*current_dir == g_direction->contents.North) {
 800ae98:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800ae9c:	781a      	ldrb	r2, [r3, #0]
 800ae9e:	1d3b      	adds	r3, r7, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d112      	bne.n	800aece <search_adachi+0x16ee>
          i10 = (int)(*current_y + 1U);
 800aea8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800aeb4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800aeb8:	2bff      	cmp	r3, #255	; 0xff
 800aeba:	d902      	bls.n	800aec2 <search_adachi+0x16e2>
            i10 = 255;
 800aebc:	23ff      	movs	r3, #255	; 0xff
 800aebe:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_y = (unsigned char)i10;
 800aec2:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800aecc:	701a      	strb	r2, [r3, #0]

          /* disp("north_step") */
        }

        /* 東に一マス */
        if (*current_dir == g_direction->contents.East) {
 800aece:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800aed2:	781a      	ldrb	r2, [r3, #0]
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d112      	bne.n	800af04 <search_adachi+0x1724>
          i10 = (int)(*current_x + 1U);
 800aede:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	3301      	adds	r3, #1
 800aee6:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          if ((unsigned int)i10 > 255U) {
 800aeea:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800aeee:	2bff      	cmp	r3, #255	; 0xff
 800aef0:	d902      	bls.n	800aef8 <search_adachi+0x1718>
            i10 = 255;
 800aef2:	23ff      	movs	r3, #255	; 0xff
 800aef4:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
          }

          *current_x = (unsigned char)i10;
 800aef8:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800aefc:	b2da      	uxtb	r2, r3
 800aefe:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800af02:	701a      	strb	r2, [r3, #0]

          /* disp("east_step") */
        }

        /* 南に一マス */
        if (*current_dir == g_direction->contents.South) {
 800af04:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	1d3b      	adds	r3, r7, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	789b      	ldrb	r3, [r3, #2]
 800af10:	429a      	cmp	r2, r3
 800af12:	d116      	bne.n	800af42 <search_adachi+0x1762>
          qY = *current_y - 1U;
 800af14:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_y) {
 800af20:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d902      	bls.n	800af36 <search_adachi+0x1756>
            qY = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_y = (unsigned char)qY;
 800af36:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800af40:	701a      	strb	r2, [r3, #0]

          /* disp("south_step") */
        }

        /* 西に一マス */
        if (*current_dir == g_direction->contents.West) {
 800af42:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800af46:	781a      	ldrb	r2, [r3, #0]
 800af48:	1d3b      	adds	r3, r7, #4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	78db      	ldrb	r3, [r3, #3]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d11d      	bne.n	800af8e <search_adachi+0x17ae>
          qY = *current_x - 1U;
 800af52:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	3b01      	subs	r3, #1
 800af5a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          if (qY > *current_x) {
 800af5e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d902      	bls.n	800af74 <search_adachi+0x1794>
            qY = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
          }

          *current_x = (unsigned char)qY;
 800af74:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800af7e:	701a      	strb	r2, [r3, #0]

          /* disp("west_step") */
        }

        /* disp("left") */
        break;
 800af80:	e005      	b.n	800af8e <search_adachi+0x17ae>
        break;
 800af82:	bf00      	nop
 800af84:	e004      	b.n	800af90 <search_adachi+0x17b0>
        break;
 800af86:	bf00      	nop
 800af88:	e002      	b.n	800af90 <search_adachi+0x17b0>
        break;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <search_adachi+0x17b0>
        break;
 800af8e:	bf00      	nop
      }

      /* for code generation */
    }
  } while (exitg1 == 0);
 800af90:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800af94:	2b00      	cmp	r3, #0
 800af96:	f43e ac38 	beq.w	800980a <search_adachi+0x2a>

  /* for code generation */
}
 800af9a:	bf00      	nop
 800af9c:	f207 47ac 	addw	r7, r7, #1196	; 0x4ac
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd90      	pop	{r4, r7, pc}

0800afa4 <maze_solve>:
 */
void maze_solve(unsigned char maze_wall[1024], unsigned char maze_wall_search
                [1024], unsigned char maze_row_size, unsigned char maze_col_size,
                const unsigned char maze_goal[18], unsigned char goal_size,
                unsigned char run_mode)
{
 800afa4:	b590      	push	{r4, r7, lr}
 800afa6:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 800afaa:	af0a      	add	r7, sp, #40	; 0x28
 800afac:	f107 040c 	add.w	r4, r7, #12
 800afb0:	6020      	str	r0, [r4, #0]
 800afb2:	f107 0008 	add.w	r0, r7, #8
 800afb6:	6001      	str	r1, [r0, #0]
 800afb8:	4619      	mov	r1, r3
 800afba:	1dfb      	adds	r3, r7, #7
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	1dbb      	adds	r3, r7, #6
 800afc0:	460a      	mov	r2, r1
 800afc2:	701a      	strb	r2, [r3, #0]
  coder_internal_ref current_y;
  coder_internal_ref current_dir;
  int exitg1;
  bool exitg2;
  unsigned char u2;
  b_goal_size.contents = goal_size;
 800afc4:	f897 3464 	ldrb.w	r3, [r7, #1124]	; 0x464
 800afc8:	f887 3444 	strb.w	r3, [r7, #1092]	; 0x444

  /*original parameter*/
  front_calib_flg = 0; //m　前壁補正フラグの初期化
 800afcc:	4bce      	ldr	r3, [pc, #824]	; (800b308 <maze_solve+0x364>)
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
  right_calib_flg = 0; //m　前壁補正フラグの初期化
 800afd2:	4bce      	ldr	r3, [pc, #824]	; (800b30c <maze_solve+0x368>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	701a      	strb	r2, [r3, #0]
  left_calib_flg = 0; //m　前壁補正フラグの初期化
 800afd8:	4bcd      	ldr	r3, [pc, #820]	; (800b310 <maze_solve+0x36c>)
 800afda:	2200      	movs	r2, #0
 800afdc:	701a      	strb	r2, [r3, #0]

  /* ローカル変数宣言 */
  for (N = 0; N < 18; N++) {
 800afde:	2300      	movs	r3, #0
 800afe0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800afe4:	e00b      	b.n	800affe <maze_solve+0x5a>
    new_goal[N] = 0U;
 800afe6:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800afea:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800afee:	4413      	add	r3, r2
 800aff0:	2200      	movs	r2, #0
 800aff2:	701a      	strb	r2, [r3, #0]
  for (N = 0; N < 18; N++) {
 800aff4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800aff8:	3301      	adds	r3, #1
 800affa:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800affe:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b002:	2b11      	cmp	r3, #17
 800b004:	ddef      	ble.n	800afe6 <maze_solve+0x42>
  }

  /* 絶対方角定義 */
  g_direction.contents.North = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	f887 342c 	strb.w	r3, [r7, #1068]	; 0x42c
  g_direction.contents.East = 1U;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
  g_direction.contents.South = 2U;
 800b012:	2302      	movs	r3, #2
 800b014:	f887 342e 	strb.w	r3, [r7, #1070]	; 0x42e
  g_direction.contents.West = 3U;
 800b018:	2303      	movs	r3, #3
 800b01a:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f

  /* マウス方向定義 */
  l_direction.contents.front = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	f887 3428 	strb.w	r3, [r7, #1064]	; 0x428
  l_direction.contents.right = 1U;
 800b024:	2301      	movs	r3, #1
 800b026:	f887 3429 	strb.w	r3, [r7, #1065]	; 0x429
  l_direction.contents.back = 2U;
 800b02a:	2302      	movs	r3, #2
 800b02c:	f887 342a 	strb.w	r3, [r7, #1066]	; 0x42a
  l_direction.contents.left = 3U;
 800b030:	2303      	movs	r3, #3
 800b032:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

  /* 壁情報定義 */
  wall.contents.nowall = 0U;
 800b036:	2300      	movs	r3, #0
 800b038:	f887 3424 	strb.w	r3, [r7, #1060]	; 0x424
  wall.contents.wall = 1U;
 800b03c:	2301      	movs	r3, #1
 800b03e:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425

  /* 探索情報定義 */
  search.contents.unknown = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	f887 3420 	strb.w	r3, [r7, #1056]	; 0x420
  search.contents.known = 1U;
 800b048:	2301      	movs	r3, #1
 800b04a:	f887 3421 	strb.w	r3, [r7, #1057]	; 0x421

  /* m走行モード定義 */
  /* m探索時 */
  if (run_mode == 0) {
 800b04e:	f897 3468 	ldrb.w	r3, [r7, #1128]	; 0x468
 800b052:	2b00      	cmp	r3, #0
 800b054:	f040 810a 	bne.w	800b26c <maze_solve+0x2c8>
    /* mマウスの初期位置設定 */
    /* m一マス前進 */

	start_acceleration(  );//mスタート時の加速
 800b058:	f002 fa5e 	bl	800d518 <start_acceleration>

    current_x.contents = 1U;
 800b05c:	2301      	movs	r3, #1
 800b05e:	f887 341c 	strb.w	r3, [r7, #1052]	; 0x41c
    current_y.contents = 1U;
 800b062:	f107 0318 	add.w	r3, r7, #24
 800b066:	2201      	movs	r2, #1
 800b068:	701a      	strb	r2, [r3, #0]
    move_step(&g_direction, &current_x.contents, &current_y.contents, 0U);
 800b06a:	f107 0218 	add.w	r2, r7, #24
 800b06e:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 800b072:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 800b076:	2300      	movs	r3, #0
 800b078:	f7fe fb56 	bl	8009728 <move_step>
    move_front();
 800b07c:	f002 fc54 	bl	800d928 <move_front>

    /* m足立法による探索 */
    current_dir.contents = g_direction.contents.North;
 800b080:	f897 242c 	ldrb.w	r2, [r7, #1068]	; 0x42c
 800b084:	f107 0314 	add.w	r3, r7, #20
 800b088:	701a      	strb	r2, [r3, #0]
    search_adachi(&wall, &search, &g_direction, &l_direction,
 800b08a:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800b08e:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800b092:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800b096:	f207 4024 	addw	r0, r7, #1060	; 0x424
 800b09a:	f897 3464 	ldrb.w	r3, [r7, #1124]	; 0x464
 800b09e:	9308      	str	r3, [sp, #32]
 800b0a0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800b0a4:	9307      	str	r3, [sp, #28]
 800b0a6:	f107 0308 	add.w	r3, r7, #8
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	9306      	str	r3, [sp, #24]
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	1dbb      	adds	r3, r7, #6
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	1dfb      	adds	r3, r7, #7
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	9303      	str	r3, [sp, #12]
 800b0c2:	f107 0314 	add.w	r3, r7, #20
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	f107 0318 	add.w	r3, r7, #24
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	4623      	mov	r3, r4
 800b0d6:	f7fe fb83 	bl	80097e0 <search_adachi>
                  &current_x.contents, &current_y.contents,
                  &current_dir.contents, maze_row_size, maze_col_size, maze_wall,
                  maze_wall_search, maze_goal, goal_size);

    HAL_Delay(1000);
 800b0da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b0de:	f7f6 f8fb 	bl	80012d8 <HAL_Delay>

    /* mゴールをすべて探索 */
    do {
      exitg1 = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
      search_flag = 0U;
 800b0e8:	f107 031b 	add.w	r3, r7, #27
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]
      N = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
      exitg2 = false;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
      while ((!exitg2) && (N <= goal_size - 1)) {
 800b0fc:	e034      	b.n	800b168 <maze_solve+0x1c4>
        u2 = maze_goal[N + 9];
 800b0fe:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b102:	3309      	adds	r3, #9
 800b104:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800b108:	4413      	add	r3, r2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	f887 3446 	strb.w	r3, [r7, #1094]	; 0x446
        if (maze_wall_search[(u2 + ((maze_goal[N] - 1) << 5)) - 1] != 15) {
 800b110:	f897 2446 	ldrb.w	r2, [r7, #1094]	; 0x446
 800b114:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b118:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 800b11c:	440b      	add	r3, r1
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	015b      	lsls	r3, r3, #5
 800b124:	4413      	add	r3, r2
 800b126:	3b01      	subs	r3, #1
 800b128:	f107 0208 	add.w	r2, r7, #8
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	4413      	add	r3, r2
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b0f      	cmp	r3, #15
 800b134:	d013      	beq.n	800b15e <maze_solve+0x1ba>
          new_goal[0] = maze_goal[N];
 800b136:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b13a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800b13e:	4413      	add	r3, r2
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	f887 3430 	strb.w	r3, [r7, #1072]	; 0x430
          new_goal[9] = u2;
 800b146:	f897 3446 	ldrb.w	r3, [r7, #1094]	; 0x446
 800b14a:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
          search_flag = 1U;
 800b14e:	f107 031b 	add.w	r3, r7, #27
 800b152:	2201      	movs	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
          exitg2 = true;
 800b156:	2301      	movs	r3, #1
 800b158:	f887 3447 	strb.w	r3, [r7, #1095]	; 0x447
 800b15c:	e004      	b.n	800b168 <maze_solve+0x1c4>
        } else {
          N++;
 800b15e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800b162:	3301      	adds	r3, #1
 800b164:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
      while ((!exitg2) && (N <= goal_size - 1)) {
 800b168:	f897 3447 	ldrb.w	r3, [r7, #1095]	; 0x447
 800b16c:	f083 0301 	eor.w	r3, r3, #1
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d006      	beq.n	800b184 <maze_solve+0x1e0>
 800b176:	f897 3464 	ldrb.w	r3, [r7, #1124]	; 0x464
 800b17a:	3b01      	subs	r3, #1
 800b17c:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800b180:	429a      	cmp	r2, r3
 800b182:	ddbc      	ble.n	800b0fe <maze_solve+0x15a>
        }
      }

      if (search_flag == 1) {
 800b184:	f107 031b 	add.w	r3, r7, #27
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d12a      	bne.n	800b1e4 <maze_solve+0x240>
    	run_first_flg = 0; //m走行開始フラグのクリア
 800b18e:	4b61      	ldr	r3, [pc, #388]	; (800b314 <maze_solve+0x370>)
 800b190:	2200      	movs	r2, #0
 800b192:	701a      	strb	r2, [r3, #0]
        search_adachi(&wall, &search, &g_direction, &l_direction,
 800b194:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800b198:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800b19c:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800b1a0:	f207 4024 	addw	r0, r7, #1060	; 0x424
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	9308      	str	r3, [sp, #32]
 800b1a8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800b1ac:	9307      	str	r3, [sp, #28]
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9306      	str	r3, [sp, #24]
 800b1b6:	f107 030c 	add.w	r3, r7, #12
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	1dbb      	adds	r3, r7, #6
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	1dfb      	adds	r3, r7, #7
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	9303      	str	r3, [sp, #12]
 800b1ca:	f107 0314 	add.w	r3, r7, #20
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	f107 0318 	add.w	r3, r7, #24
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	4623      	mov	r3, r4
 800b1de:	f7fe faff 	bl	80097e0 <search_adachi>
 800b1e2:	e002      	b.n	800b1ea <maze_solve+0x246>
                      &current_x.contents, &current_y.contents,
                      &current_dir.contents, maze_row_size, maze_col_size,
                      maze_wall, maze_wall_search, new_goal, 1U);
      } else {
        exitg1 = 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
      }
    } while (exitg1 == 0);
 800b1ea:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f43f af77 	beq.w	800b0e2 <maze_solve+0x13e>

    HAL_Delay(1000);
 800b1f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b1f8:	f7f6 f86e 	bl	80012d8 <HAL_Delay>

    /* mスタートを目的地として足立法で再探索 */
    new_goal[0] = 1U;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	f887 3430 	strb.w	r3, [r7, #1072]	; 0x430
    new_goal[9] = 1U;
 800b202:	2301      	movs	r3, #1
 800b204:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
    run_first_flg = 0; //m走行開始フラグのクリア
 800b208:	4b42      	ldr	r3, [pc, #264]	; (800b314 <maze_solve+0x370>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
    search_adachi(&wall, &search, &g_direction, &l_direction,
 800b20e:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800b212:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800b216:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800b21a:	f207 4024 	addw	r0, r7, #1060	; 0x424
 800b21e:	2301      	movs	r3, #1
 800b220:	9308      	str	r3, [sp, #32]
 800b222:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800b226:	9307      	str	r3, [sp, #28]
 800b228:	f107 0308 	add.w	r3, r7, #8
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	9306      	str	r3, [sp, #24]
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	1dbb      	adds	r3, r7, #6
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	1dfb      	adds	r3, r7, #7
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	f107 0314 	add.w	r3, r7, #20
 800b248:	9302      	str	r3, [sp, #8]
 800b24a:	f107 0318 	add.w	r3, r7, #24
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4623      	mov	r3, r4
 800b258:	f7fe fac2 	bl	80097e0 <search_adachi>
                  &current_x.contents, &current_y.contents,
                  &current_dir.contents, maze_row_size, maze_col_size, maze_wall,
                  maze_wall_search, new_goal, 1U);

    fornt_wall_calibrate();
 800b25c:	f002 fc30 	bl	800dac0 <fornt_wall_calibrate>
    turn_conclk_180();
 800b260:	f002 fb1a 	bl	800d898 <turn_conclk_180>
    target_distance_m_set(-0.5);
 800b264:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800b268:	f002 f8d8 	bl	800d41c <target_distance_m_set>
    /* for code generation */
  }

  if (run_mode == 1) {
 800b26c:	f897 3468 	ldrb.w	r3, [r7, #1128]	; 0x468
 800b270:	2b01      	cmp	r3, #1
 800b272:	d143      	bne.n	800b2fc <maze_solve+0x358>
    /* 探索情報をもとに等高線MAPを生成 */
    make_map_fustrun(&b_goal_size, &g_direction, &wall, &search, maze_row_size,
 800b274:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 800b278:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800b27c:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 800b280:	f207 4044 	addw	r0, r7, #1092	; 0x444
 800b284:	f107 031b 	add.w	r3, r7, #27
 800b288:	9306      	str	r3, [sp, #24]
 800b28a:	f107 031c 	add.w	r3, r7, #28
 800b28e:	9305      	str	r3, [sp, #20]
 800b290:	f107 0308 	add.w	r3, r7, #8
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	9304      	str	r3, [sp, #16]
 800b298:	f107 030c 	add.w	r3, r7, #12
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	9303      	str	r3, [sp, #12]
 800b2a0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800b2a4:	9302      	str	r3, [sp, #8]
 800b2a6:	1dbb      	adds	r3, r7, #6
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	1dfb      	adds	r3, r7, #7
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4623      	mov	r3, r4
 800b2b4:	f7fd fa58 	bl	8008768 <make_map_fustrun>
                     maze_col_size, maze_goal, maze_wall, maze_wall_search,
                     contour_map, &search_flag);

    /* 最短距離走行 */
    fust_run(&g_direction, &current_x, &current_y, &current_dir, &b_goal_size,
 800b2b8:	f107 031b 	add.w	r3, r7, #27
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f107 0414 	add.w	r4, r7, #20
 800b2c2:	f107 0218 	add.w	r2, r7, #24
 800b2c6:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 800b2ca:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 800b2ce:	9306      	str	r3, [sp, #24]
 800b2d0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	f107 031c 	add.w	r3, r7, #28
 800b2da:	9304      	str	r3, [sp, #16]
 800b2dc:	f107 030c 	add.w	r3, r7, #12
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	9303      	str	r3, [sp, #12]
 800b2e4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4623      	mov	r3, r4
 800b2f8:	f7fb fffe 	bl	80072f8 <fust_run>
             &wall, &l_direction, maze_wall, contour_map, maze_goal, search_flag);
  }
}
 800b2fc:	bf00      	nop
 800b2fe:	f207 4754 	addw	r7, r7, #1108	; 0x454
 800b302:	46bd      	mov	sp, r7
 800b304:	bd90      	pop	{r4, r7, pc}
 800b306:	bf00      	nop
 800b308:	2001bbc4 	.word	0x2001bbc4
 800b30c:	2001bbc6 	.word	0x2001bbc6
 800b310:	2001bbc5 	.word	0x2001bbc5
 800b314:	2001b2a7 	.word	0x2001b2a7

0800b318 <mode_select>:
uint8_t mode_number = 0; //mode番号
uint8_t stanby_mode = 0; //1=stanby 0:not_stanby
uint8_t mode_count = 0;  //modeカウンタ

void mode_select (void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0


	static uint8_t mode_number_old = 0;

	while(speed_r != 0); //m いったんタイヤ停止するまで待ち
 800b31c:	bf00      	nop
 800b31e:	4b9f      	ldr	r3, [pc, #636]	; (800b59c <mode_select+0x284>)
 800b320:	edd3 7a00 	vldr	s15, [r3]
 800b324:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32c:	d1f7      	bne.n	800b31e <mode_select+0x6>

	speed_r_max = 0;//m右タイヤ速度max初期化
 800b32e:	4b9c      	ldr	r3, [pc, #624]	; (800b5a0 <mode_select+0x288>)
 800b330:	f04f 0200 	mov.w	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
	speed_r_min = 0;//m右タイヤ速度	min初期化
 800b336:	4b9b      	ldr	r3, [pc, #620]	; (800b5a4 <mode_select+0x28c>)
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
	speed_l_max = 0;//m左タイヤ速度max初期化
 800b33e:	4b9a      	ldr	r3, [pc, #616]	; (800b5a8 <mode_select+0x290>)
 800b340:	f04f 0200 	mov.w	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
	speed_l_min = 0;//m左タイヤ速度	min初期化
 800b346:	4b99      	ldr	r3, [pc, #612]	; (800b5ac <mode_select+0x294>)
 800b348:	f04f 0200 	mov.w	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]

	HAL_Delay(200);	//m タイヤ最大値更新時間
 800b34e:	20c8      	movs	r0, #200	; 0xc8
 800b350:	f7f5 ffc2 	bl	80012d8 <HAL_Delay>

//	 printf("speed_r_max =%5.3f,speed_r_min =%5.3f \r\n",speed_r_max, speed_r_min);
	if (speed_r_max > mode_count_up_th) //m右タイヤ速度＞正の閾値の時の処理
 800b354:	4b92      	ldr	r3, [pc, #584]	; (800b5a0 <mode_select+0x288>)
 800b356:	edd3 7a00 	vldr	s15, [r3]
 800b35a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800b5b0 <mode_select+0x298>
 800b35e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b366:	dd05      	ble.n	800b374 <mode_select+0x5c>
	{
		mode_count	+= 1;
 800b368:	4b92      	ldr	r3, [pc, #584]	; (800b5b4 <mode_select+0x29c>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	4b90      	ldr	r3, [pc, #576]	; (800b5b4 <mode_select+0x29c>)
 800b372:	701a      	strb	r2, [r3, #0]
	}

	if (speed_r_min < mode_count_down_th) //m右タイヤ速度＜負の閾値の時の処理
 800b374:	4b8b      	ldr	r3, [pc, #556]	; (800b5a4 <mode_select+0x28c>)
 800b376:	edd3 7a00 	vldr	s15, [r3]
 800b37a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800b5b8 <mode_select+0x2a0>
 800b37e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b386:	d505      	bpl.n	800b394 <mode_select+0x7c>
	{
		mode_count -= 1;
 800b388:	4b8a      	ldr	r3, [pc, #552]	; (800b5b4 <mode_select+0x29c>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	4b88      	ldr	r3, [pc, #544]	; (800b5b4 <mode_select+0x29c>)
 800b392:	701a      	strb	r2, [r3, #0]
	}

	mode_count &= 0b00001111;	//8bit->4bit
 800b394:	4b87      	ldr	r3, [pc, #540]	; (800b5b4 <mode_select+0x29c>)
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	f003 030f 	and.w	r3, r3, #15
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	4b85      	ldr	r3, [pc, #532]	; (800b5b4 <mode_select+0x29c>)
 800b3a0:	701a      	strb	r2, [r3, #0]
	mode_number = mode_count;
 800b3a2:	4b84      	ldr	r3, [pc, #528]	; (800b5b4 <mode_select+0x29c>)
 800b3a4:	781a      	ldrb	r2, [r3, #0]
 800b3a6:	4b85      	ldr	r3, [pc, #532]	; (800b5bc <mode_select+0x2a4>)
 800b3a8:	701a      	strb	r2, [r3, #0]

	if (mode_number != mode_number_old){
 800b3aa:	4b84      	ldr	r3, [pc, #528]	; (800b5bc <mode_select+0x2a4>)
 800b3ac:	781a      	ldrb	r2, [r3, #0]
 800b3ae:	4b84      	ldr	r3, [pc, #528]	; (800b5c0 <mode_select+0x2a8>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	f000 80ec 	beq.w	800b590 <mode_select+0x278>
		switch(mode_number){
 800b3b8:	4b80      	ldr	r3, [pc, #512]	; (800b5bc <mode_select+0x2a4>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b0f      	cmp	r3, #15
 800b3be:	f200 80e7 	bhi.w	800b590 <mode_select+0x278>
 800b3c2:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <mode_select+0xb0>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b409 	.word	0x0800b409
 800b3cc:	0800b417 	.word	0x0800b417
 800b3d0:	0800b431 	.word	0x0800b431
 800b3d4:	0800b44b 	.word	0x0800b44b
 800b3d8:	0800b465 	.word	0x0800b465
 800b3dc:	0800b47f 	.word	0x0800b47f
 800b3e0:	0800b499 	.word	0x0800b499
 800b3e4:	0800b4b3 	.word	0x0800b4b3
 800b3e8:	0800b4cd 	.word	0x0800b4cd
 800b3ec:	0800b4e7 	.word	0x0800b4e7
 800b3f0:	0800b501 	.word	0x0800b501
 800b3f4:	0800b51b 	.word	0x0800b51b
 800b3f8:	0800b535 	.word	0x0800b535
 800b3fc:	0800b54f 	.word	0x0800b54f
 800b400:	0800b569 	.word	0x0800b569
 800b404:	0800b583 	.word	0x0800b583
		/*mode_numberに応じてLED点灯処理*/
			case 0:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);//m 無点灯
 800b408:	2200      	movs	r2, #0
 800b40a:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800b40e:	486d      	ldr	r0, [pc, #436]	; (800b5c4 <mode_select+0x2ac>)
 800b410:	f7f7 f9f0 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b414:	e0bc      	b.n	800b590 <mode_select+0x278>

			case 1:
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b416:	2200      	movs	r2, #0
 800b418:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800b41c:	4869      	ldr	r0, [pc, #420]	; (800b5c4 <mode_select+0x2ac>)
 800b41e:	f7f7 f9e9 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin, GPIO_PIN_SET);
 800b422:	2201      	movs	r2, #1
 800b424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b428:	4866      	ldr	r0, [pc, #408]	; (800b5c4 <mode_select+0x2ac>)
 800b42a:	f7f7 f9e3 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b42e:	e0af      	b.n	800b590 <mode_select+0x278>

			case 2:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b430:	2200      	movs	r2, #0
 800b432:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 800b436:	4863      	ldr	r0, [pc, #396]	; (800b5c4 <mode_select+0x2ac>)
 800b438:	f7f7 f9dc 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED3_Pin, GPIO_PIN_SET);
 800b43c:	2201      	movs	r2, #1
 800b43e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b442:	4860      	ldr	r0, [pc, #384]	; (800b5c4 <mode_select+0x2ac>)
 800b444:	f7f7 f9d6 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b448:	e0a2      	b.n	800b590 <mode_select+0x278>

			case 3:
				HAL_GPIO_WritePin(GPIOA,LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b44a:	2200      	movs	r2, #0
 800b44c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800b450:	485c      	ldr	r0, [pc, #368]	; (800b5c4 <mode_select+0x2ac>)
 800b452:	f7f7 f9cf 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800b456:	2201      	movs	r2, #1
 800b458:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b45c:	4859      	ldr	r0, [pc, #356]	; (800b5c4 <mode_select+0x2ac>)
 800b45e:	f7f7 f9c9 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b462:	e095      	b.n	800b590 <mode_select+0x278>

			case 4:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b464:	2200      	movs	r2, #0
 800b466:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800b46a:	4856      	ldr	r0, [pc, #344]	; (800b5c4 <mode_select+0x2ac>)
 800b46c:	f7f7 f9c2 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED4_Pin, GPIO_PIN_SET);
 800b470:	2201      	movs	r2, #1
 800b472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b476:	4853      	ldr	r0, [pc, #332]	; (800b5c4 <mode_select+0x2ac>)
 800b478:	f7f7 f9bc 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b47c:	e088      	b.n	800b590 <mode_select+0x278>

			case 5:
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b47e:	2200      	movs	r2, #0
 800b480:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800b484:	484f      	ldr	r0, [pc, #316]	; (800b5c4 <mode_select+0x2ac>)
 800b486:	f7f7 f9b5 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED4_Pin, GPIO_PIN_SET);
 800b48a:	2201      	movs	r2, #1
 800b48c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800b490:	484c      	ldr	r0, [pc, #304]	; (800b5c4 <mode_select+0x2ac>)
 800b492:	f7f7 f9af 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b496:	e07b      	b.n	800b590 <mode_select+0x278>

			case 6:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED5_Pin, GPIO_PIN_RESET);
 800b498:	2200      	movs	r2, #0
 800b49a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800b49e:	4849      	ldr	r0, [pc, #292]	; (800b5c4 <mode_select+0x2ac>)
 800b4a0:	f7f7 f9a8 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b4aa:	4846      	ldr	r0, [pc, #280]	; (800b5c4 <mode_select+0x2ac>)
 800b4ac:	f7f7 f9a2 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b4b0:	e06e      	b.n	800b590 <mode_select+0x278>

			case 7:
				HAL_GPIO_WritePin(GPIOA,LED5_Pin, GPIO_PIN_RESET);
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4b8:	4842      	ldr	r0, [pc, #264]	; (800b5c4 <mode_select+0x2ac>)
 800b4ba:	f7f7 f99b 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_SET);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800b4c4:	483f      	ldr	r0, [pc, #252]	; (800b5c4 <mode_select+0x2ac>)
 800b4c6:	f7f7 f995 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b4ca:	e061      	b.n	800b590 <mode_select+0x278>

			case 8:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800b4d2:	483c      	ldr	r0, [pc, #240]	; (800b5c4 <mode_select+0x2ac>)
 800b4d4:	f7f7 f98e 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED5_Pin, GPIO_PIN_SET);
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4de:	4839      	ldr	r0, [pc, #228]	; (800b5c4 <mode_select+0x2ac>)
 800b4e0:	f7f7 f988 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b4e4:	e054      	b.n	800b590 <mode_select+0x278>

			case 9:
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b4ec:	4835      	ldr	r0, [pc, #212]	; (800b5c4 <mode_select+0x2ac>)
 800b4ee:	f7f7 f981 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED5_Pin, GPIO_PIN_SET);
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800b4f8:	4832      	ldr	r0, [pc, #200]	; (800b5c4 <mode_select+0x2ac>)
 800b4fa:	f7f7 f97b 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b4fe:	e047      	b.n	800b590 <mode_select+0x278>

			case 10:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED4_Pin, GPIO_PIN_RESET);
 800b500:	2200      	movs	r2, #0
 800b502:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800b506:	482f      	ldr	r0, [pc, #188]	; (800b5c4 <mode_select+0x2ac>)
 800b508:	f7f7 f974 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED5_Pin, GPIO_PIN_SET);
 800b50c:	2201      	movs	r2, #1
 800b50e:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800b512:	482c      	ldr	r0, [pc, #176]	; (800b5c4 <mode_select+0x2ac>)
 800b514:	f7f7 f96e 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b518:	e03a      	b.n	800b590 <mode_select+0x278>

			case 11:
				HAL_GPIO_WritePin(GPIOA,LED4_Pin, GPIO_PIN_RESET);
 800b51a:	2200      	movs	r2, #0
 800b51c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b520:	4828      	ldr	r0, [pc, #160]	; (800b5c4 <mode_select+0x2ac>)
 800b522:	f7f7 f967 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED5_Pin, GPIO_PIN_SET);
 800b526:	2201      	movs	r2, #1
 800b528:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 800b52c:	4825      	ldr	r0, [pc, #148]	; (800b5c4 <mode_select+0x2ac>)
 800b52e:	f7f7 f961 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b532:	e02d      	b.n	800b590 <mode_select+0x278>

			case 12:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800b534:	2200      	movs	r2, #0
 800b536:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b53a:	4822      	ldr	r0, [pc, #136]	; (800b5c4 <mode_select+0x2ac>)
 800b53c:	f7f7 f95a 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 800b540:	2201      	movs	r2, #1
 800b542:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800b546:	481f      	ldr	r0, [pc, #124]	; (800b5c4 <mode_select+0x2ac>)
 800b548:	f7f7 f954 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b54c:	e020      	b.n	800b590 <mode_select+0x278>

			case 13:
				HAL_GPIO_WritePin(GPIOA,LED3_Pin, GPIO_PIN_RESET);
 800b54e:	2200      	movs	r2, #0
 800b550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b554:	481b      	ldr	r0, [pc, #108]	; (800b5c4 <mode_select+0x2ac>)
 800b556:	f7f7 f94d 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 800b55a:	2201      	movs	r2, #1
 800b55c:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 800b560:	4818      	ldr	r0, [pc, #96]	; (800b5c4 <mode_select+0x2ac>)
 800b562:	f7f7 f947 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b566:	e013      	b.n	800b590 <mode_select+0x278>

			case 14:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin, GPIO_PIN_RESET);
 800b568:	2200      	movs	r2, #0
 800b56a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b56e:	4815      	ldr	r0, [pc, #84]	; (800b5c4 <mode_select+0x2ac>)
 800b570:	f7f7 f940 	bl	80027f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 800b574:	2201      	movs	r2, #1
 800b576:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800b57a:	4812      	ldr	r0, [pc, #72]	; (800b5c4 <mode_select+0x2ac>)
 800b57c:	f7f7 f93a 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b580:	e006      	b.n	800b590 <mode_select+0x278>

			case 15:
				HAL_GPIO_WritePin(GPIOA,LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 800b582:	2201      	movs	r2, #1
 800b584:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800b588:	480e      	ldr	r0, [pc, #56]	; (800b5c4 <mode_select+0x2ac>)
 800b58a:	f7f7 f933 	bl	80027f4 <HAL_GPIO_WritePin>
			break;
 800b58e:	bf00      	nop
			}
		}

	mode_number_old = mode_number;
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <mode_select+0x2a4>)
 800b592:	781a      	ldrb	r2, [r3, #0]
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <mode_select+0x2a8>)
 800b596:	701a      	strb	r2, [r3, #0]

}
 800b598:	bf00      	nop
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000224 	.word	0x20000224
 800b5a0:	20000228 	.word	0x20000228
 800b5a4:	2000022c 	.word	0x2000022c
 800b5a8:	20000234 	.word	0x20000234
 800b5ac:	20000238 	.word	0x20000238
 800b5b0:	3dcccccd 	.word	0x3dcccccd
 800b5b4:	20004b06 	.word	0x20004b06
 800b5b8:	bdcccccd 	.word	0xbdcccccd
 800b5bc:	20004b04 	.word	0x20004b04
 800b5c0:	20004b07 	.word	0x20004b07
 800b5c4:	40020000 	.word	0x40020000

0800b5c8 <modechangejud_stanby>:

uint8_t modechangejud_stanby(void) //stanbyモード移行判定関数
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
	if(mode_stanby_th < speed_l_max )
 800b5cc:	4b08      	ldr	r3, [pc, #32]	; (800b5f0 <modechangejud_stanby+0x28>)
 800b5ce:	edd3 7a00 	vldr	s15, [r3]
 800b5d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800b5f4 <modechangejud_stanby+0x2c>
 800b5d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5de:	dd01      	ble.n	800b5e4 <modechangejud_stanby+0x1c>
	{
//		printf ("ready \r\n");
		return 1;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e000      	b.n	800b5e6 <modechangejud_stanby+0x1e>
	}
	else {
		return 0;
 800b5e4:	2300      	movs	r3, #0
	}
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	20000234 	.word	0x20000234
 800b5f4:	3dcccccd 	.word	0x3dcccccd

0800b5f8 <log_init>:

/* ---------------------------------------------------------------
	ログ取得カウンタ初期化関数
--------------------------------------------------------------- */
void log_init (void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
	log_counter = 0; //m ログカウンタの初期化
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <log_init+0x14>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	801a      	strh	r2, [r3, #0]
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20004b08 	.word	0x20004b08

0800b610 <data_get>:

/* ---------------------------------------------------------------
	ログ取得用関数（1msタスク）
--------------------------------------------------------------- */
void data_get (void)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0

	uint16_t i = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	80fb      	strh	r3, [r7, #6]
	i = log_counter / log_count_step;
 800b61a:	4ba8      	ldr	r3, [pc, #672]	; (800b8bc <data_get+0x2ac>)
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	4aa8      	ldr	r2, [pc, #672]	; (800b8c0 <data_get+0x2b0>)
 800b620:	fba2 2303 	umull	r2, r3, r2, r3
 800b624:	089b      	lsrs	r3, r3, #2
 800b626:	80fb      	strh	r3, [r7, #6]

	if(log_counter < log_count_lim)
 800b628:	4ba4      	ldr	r3, [pc, #656]	; (800b8bc <data_get+0x2ac>)
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	f241 3287 	movw	r2, #4999	; 0x1387
 800b630:	4293      	cmp	r3, r2
 800b632:	f200 813f 	bhi.w	800b8b4 <data_get+0x2a4>
	{
		if( (log_counter % log_count_step) == 0)
 800b636:	4ba1      	ldr	r3, [pc, #644]	; (800b8bc <data_get+0x2ac>)
 800b638:	881a      	ldrh	r2, [r3, #0]
 800b63a:	4ba1      	ldr	r3, [pc, #644]	; (800b8c0 <data_get+0x2b0>)
 800b63c:	fba3 1302 	umull	r1, r3, r3, r2
 800b640:	0899      	lsrs	r1, r3, #2
 800b642:	460b      	mov	r3, r1
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	440b      	add	r3, r1
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 812b 	bne.w	800b8a8 <data_get+0x298>
		{
			log_store[i].time = (float)log_counter;
 800b652:	4b9a      	ldr	r3, [pc, #616]	; (800b8bc <data_get+0x2ac>)
 800b654:	881a      	ldrh	r2, [r3, #0]
 800b656:	88fb      	ldrh	r3, [r7, #6]
 800b658:	ee07 2a90 	vmov	s15, r2
 800b65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b660:	4a98      	ldr	r2, [pc, #608]	; (800b8c4 <data_get+0x2b4>)
 800b662:	215c      	movs	r1, #92	; 0x5c
 800b664:	fb01 f303 	mul.w	r3, r1, r3
 800b668:	4413      	add	r3, r2
 800b66a:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].target_d_m = (float)target_distance_m;
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	4a95      	ldr	r2, [pc, #596]	; (800b8c8 <data_get+0x2b8>)
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	4993      	ldr	r1, [pc, #588]	; (800b8c4 <data_get+0x2b4>)
 800b676:	205c      	movs	r0, #92	; 0x5c
 800b678:	fb00 f303 	mul.w	r3, r0, r3
 800b67c:	440b      	add	r3, r1
 800b67e:	3304      	adds	r3, #4
 800b680:	601a      	str	r2, [r3, #0]
			log_store[i].ideal_d_m = (float)ideal_distance_m;
 800b682:	88fb      	ldrh	r3, [r7, #6]
 800b684:	4a91      	ldr	r2, [pc, #580]	; (800b8cc <data_get+0x2bc>)
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	498e      	ldr	r1, [pc, #568]	; (800b8c4 <data_get+0x2b4>)
 800b68a:	205c      	movs	r0, #92	; 0x5c
 800b68c:	fb00 f303 	mul.w	r3, r0, r3
 800b690:	440b      	add	r3, r1
 800b692:	3308      	adds	r3, #8
 800b694:	601a      	str	r2, [r3, #0]
			log_store[i].real_d_m = (float)real_distance_m;
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	4a8d      	ldr	r2, [pc, #564]	; (800b8d0 <data_get+0x2c0>)
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	4989      	ldr	r1, [pc, #548]	; (800b8c4 <data_get+0x2b4>)
 800b69e:	205c      	movs	r0, #92	; 0x5c
 800b6a0:	fb00 f303 	mul.w	r3, r0, r3
 800b6a4:	440b      	add	r3, r1
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	601a      	str	r2, [r3, #0]
			log_store[i].target_speed_m =  (float)target_speed_m;
 800b6aa:	88fb      	ldrh	r3, [r7, #6]
 800b6ac:	4a89      	ldr	r2, [pc, #548]	; (800b8d4 <data_get+0x2c4>)
 800b6ae:	6812      	ldr	r2, [r2, #0]
 800b6b0:	4984      	ldr	r1, [pc, #528]	; (800b8c4 <data_get+0x2b4>)
 800b6b2:	205c      	movs	r0, #92	; 0x5c
 800b6b4:	fb00 f303 	mul.w	r3, r0, r3
 800b6b8:	440b      	add	r3, r1
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	601a      	str	r2, [r3, #0]
			log_store[i].speed_m = (float)speed_m;
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	4a85      	ldr	r2, [pc, #532]	; (800b8d8 <data_get+0x2c8>)
 800b6c2:	6812      	ldr	r2, [r2, #0]
 800b6c4:	497f      	ldr	r1, [pc, #508]	; (800b8c4 <data_get+0x2b4>)
 800b6c6:	205c      	movs	r0, #92	; 0x5c
 800b6c8:	fb00 f303 	mul.w	r3, r0, r3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	601a      	str	r2, [r3, #0]
			log_store[i].speed_m_ave = (float)g_ave_speed_m;
 800b6d2:	88fb      	ldrh	r3, [r7, #6]
 800b6d4:	4a81      	ldr	r2, [pc, #516]	; (800b8dc <data_get+0x2cc>)
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	497a      	ldr	r1, [pc, #488]	; (800b8c4 <data_get+0x2b4>)
 800b6da:	205c      	movs	r0, #92	; 0x5c
 800b6dc:	fb00 f303 	mul.w	r3, r0, r3
 800b6e0:	440b      	add	r3, r1
 800b6e2:	3318      	adds	r3, #24
 800b6e4:	601a      	str	r2, [r3, #0]
			log_store[i].accel_m = (float)IMU_GetAccel_X();
 800b6e6:	88fc      	ldrh	r4, [r7, #6]
 800b6e8:	f7fa ffb0 	bl	800664c <IMU_GetAccel_X>
 800b6ec:	eef0 7a40 	vmov.f32	s15, s0
 800b6f0:	4a74      	ldr	r2, [pc, #464]	; (800b8c4 <data_get+0x2b4>)
 800b6f2:	235c      	movs	r3, #92	; 0x5c
 800b6f4:	fb03 f304 	mul.w	r3, r3, r4
 800b6f8:	4413      	add	r3, r2
 800b6fa:	331c      	adds	r3, #28
 800b6fc:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].accel_m_ave = (float)g_ave_accel_m;
 800b700:	88fb      	ldrh	r3, [r7, #6]
 800b702:	4a77      	ldr	r2, [pc, #476]	; (800b8e0 <data_get+0x2d0>)
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	496f      	ldr	r1, [pc, #444]	; (800b8c4 <data_get+0x2b4>)
 800b708:	205c      	movs	r0, #92	; 0x5c
 800b70a:	fb00 f303 	mul.w	r3, r0, r3
 800b70e:	440b      	add	r3, r1
 800b710:	3320      	adds	r3, #32
 800b712:	601a      	str	r2, [r3, #0]
			log_store[i].target_d_w = (float)target_distance_w;
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	4a73      	ldr	r2, [pc, #460]	; (800b8e4 <data_get+0x2d4>)
 800b718:	6812      	ldr	r2, [r2, #0]
 800b71a:	496a      	ldr	r1, [pc, #424]	; (800b8c4 <data_get+0x2b4>)
 800b71c:	205c      	movs	r0, #92	; 0x5c
 800b71e:	fb00 f303 	mul.w	r3, r0, r3
 800b722:	440b      	add	r3, r1
 800b724:	3324      	adds	r3, #36	; 0x24
 800b726:	601a      	str	r2, [r3, #0]
			log_store[i].ideal_d_w = (float)ideal_distance_w;
 800b728:	88fb      	ldrh	r3, [r7, #6]
 800b72a:	4a6f      	ldr	r2, [pc, #444]	; (800b8e8 <data_get+0x2d8>)
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	4965      	ldr	r1, [pc, #404]	; (800b8c4 <data_get+0x2b4>)
 800b730:	205c      	movs	r0, #92	; 0x5c
 800b732:	fb00 f303 	mul.w	r3, r0, r3
 800b736:	440b      	add	r3, r1
 800b738:	3328      	adds	r3, #40	; 0x28
 800b73a:	601a      	str	r2, [r3, #0]
			log_store[i].real_d_w = (float)real_distance_w;
 800b73c:	88fb      	ldrh	r3, [r7, #6]
 800b73e:	4a6b      	ldr	r2, [pc, #428]	; (800b8ec <data_get+0x2dc>)
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	4960      	ldr	r1, [pc, #384]	; (800b8c4 <data_get+0x2b4>)
 800b744:	205c      	movs	r0, #92	; 0x5c
 800b746:	fb00 f303 	mul.w	r3, r0, r3
 800b74a:	440b      	add	r3, r1
 800b74c:	332c      	adds	r3, #44	; 0x2c
 800b74e:	601a      	str	r2, [r3, #0]
			log_store[i].target_speed_w = (float)target_speed_w;
 800b750:	88fb      	ldrh	r3, [r7, #6]
 800b752:	4a67      	ldr	r2, [pc, #412]	; (800b8f0 <data_get+0x2e0>)
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	495b      	ldr	r1, [pc, #364]	; (800b8c4 <data_get+0x2b4>)
 800b758:	205c      	movs	r0, #92	; 0x5c
 800b75a:	fb00 f303 	mul.w	r3, r0, r3
 800b75e:	440b      	add	r3, r1
 800b760:	3330      	adds	r3, #48	; 0x30
 800b762:	601a      	str	r2, [r3, #0]
			log_store[i].speed_w = (float)IMU_GetGyro_Z();
 800b764:	88fc      	ldrh	r4, [r7, #6]
 800b766:	f7fa ff97 	bl	8006698 <IMU_GetGyro_Z>
 800b76a:	eef0 7a40 	vmov.f32	s15, s0
 800b76e:	4a55      	ldr	r2, [pc, #340]	; (800b8c4 <data_get+0x2b4>)
 800b770:	235c      	movs	r3, #92	; 0x5c
 800b772:	fb03 f304 	mul.w	r3, r3, r4
 800b776:	4413      	add	r3, r2
 800b778:	3334      	adds	r3, #52	; 0x34
 800b77a:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].duty_r = (float)g_duty_r;
 800b77e:	4b5d      	ldr	r3, [pc, #372]	; (800b8f4 <data_get+0x2e4>)
 800b780:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b784:	88fb      	ldrh	r3, [r7, #6]
 800b786:	ee07 2a90 	vmov	s15, r2
 800b78a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b78e:	4a4d      	ldr	r2, [pc, #308]	; (800b8c4 <data_get+0x2b4>)
 800b790:	215c      	movs	r1, #92	; 0x5c
 800b792:	fb01 f303 	mul.w	r3, r1, r3
 800b796:	4413      	add	r3, r2
 800b798:	3338      	adds	r3, #56	; 0x38
 800b79a:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].duty_l = (float)g_duty_l;
 800b79e:	4b56      	ldr	r3, [pc, #344]	; (800b8f8 <data_get+0x2e8>)
 800b7a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7a4:	88fb      	ldrh	r3, [r7, #6]
 800b7a6:	ee07 2a90 	vmov	s15, r2
 800b7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7ae:	4a45      	ldr	r2, [pc, #276]	; (800b8c4 <data_get+0x2b4>)
 800b7b0:	215c      	movs	r1, #92	; 0x5c
 800b7b2:	fb01 f303 	mul.w	r3, r1, r3
 800b7b6:	4413      	add	r3, r2
 800b7b8:	333c      	adds	r3, #60	; 0x3c
 800b7ba:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].front_sensor_r = (float)Sensor_GetValue(3);
 800b7be:	2003      	movs	r0, #3
 800b7c0:	f7fb f9cc 	bl	8006b5c <Sensor_GetValue>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	88fb      	ldrh	r3, [r7, #6]
 800b7cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7d0:	4a3c      	ldr	r2, [pc, #240]	; (800b8c4 <data_get+0x2b4>)
 800b7d2:	215c      	movs	r1, #92	; 0x5c
 800b7d4:	fb01 f303 	mul.w	r3, r1, r3
 800b7d8:	4413      	add	r3, r2
 800b7da:	3340      	adds	r3, #64	; 0x40
 800b7dc:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].front_sensor_l = (float)Sensor_GetValue(0);
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f7fb f9bb 	bl	8006b5c <Sensor_GetValue>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f2:	4a34      	ldr	r2, [pc, #208]	; (800b8c4 <data_get+0x2b4>)
 800b7f4:	215c      	movs	r1, #92	; 0x5c
 800b7f6:	fb01 f303 	mul.w	r3, r1, r3
 800b7fa:	4413      	add	r3, r2
 800b7fc:	3344      	adds	r3, #68	; 0x44
 800b7fe:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].side_sensor_r = (float)Sensor_GetValue(2);
 800b802:	2002      	movs	r0, #2
 800b804:	f7fb f9aa 	bl	8006b5c <Sensor_GetValue>
 800b808:	4603      	mov	r3, r0
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <data_get+0x2b4>)
 800b816:	215c      	movs	r1, #92	; 0x5c
 800b818:	fb01 f303 	mul.w	r3, r1, r3
 800b81c:	4413      	add	r3, r2
 800b81e:	3348      	adds	r3, #72	; 0x48
 800b820:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].side_sensor_l = (float)Sensor_GetValue(1);
 800b824:	2001      	movs	r0, #1
 800b826:	f7fb f999 	bl	8006b5c <Sensor_GetValue>
 800b82a:	4603      	mov	r3, r0
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b836:	4a23      	ldr	r2, [pc, #140]	; (800b8c4 <data_get+0x2b4>)
 800b838:	215c      	movs	r1, #92	; 0x5c
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	4413      	add	r3, r2
 800b840:	334c      	adds	r3, #76	; 0x4c
 800b842:	edc3 7a00 	vstr	s15, [r3]
			log_store[i].front_r = (float)SensorValue2length(3);
 800b846:	2003      	movs	r0, #3
 800b848:	f7fb f9a2 	bl	8006b90 <SensorValue2length>
 800b84c:	ec53 2b10 	vmov	r2, r3, d0
 800b850:	88fc      	ldrh	r4, [r7, #6]
 800b852:	4610      	mov	r0, r2
 800b854:	4619      	mov	r1, r3
 800b856:	f7f5 f9ef 	bl	8000c38 <__aeabi_d2f>
 800b85a:	4601      	mov	r1, r0
 800b85c:	4a19      	ldr	r2, [pc, #100]	; (800b8c4 <data_get+0x2b4>)
 800b85e:	235c      	movs	r3, #92	; 0x5c
 800b860:	fb03 f304 	mul.w	r3, r3, r4
 800b864:	4413      	add	r3, r2
 800b866:	3350      	adds	r3, #80	; 0x50
 800b868:	6019      	str	r1, [r3, #0]
			log_store[i].front_l = (float)SensorValue2length(0);
 800b86a:	2000      	movs	r0, #0
 800b86c:	f7fb f990 	bl	8006b90 <SensorValue2length>
 800b870:	ec53 2b10 	vmov	r2, r3, d0
 800b874:	88fc      	ldrh	r4, [r7, #6]
 800b876:	4610      	mov	r0, r2
 800b878:	4619      	mov	r1, r3
 800b87a:	f7f5 f9dd 	bl	8000c38 <__aeabi_d2f>
 800b87e:	4601      	mov	r1, r0
 800b880:	4a10      	ldr	r2, [pc, #64]	; (800b8c4 <data_get+0x2b4>)
 800b882:	235c      	movs	r3, #92	; 0x5c
 800b884:	fb03 f304 	mul.w	r3, r3, r4
 800b888:	4413      	add	r3, r2
 800b88a:	3354      	adds	r3, #84	; 0x54
 800b88c:	6019      	str	r1, [r3, #0]
			log_store[i].V_battery =(float) Battery_GetVoltage();
 800b88e:	88fc      	ldrh	r4, [r7, #6]
 800b890:	f7fa f942 	bl	8005b18 <Battery_GetVoltage>
 800b894:	eef0 7a40 	vmov.f32	s15, s0
 800b898:	4a0a      	ldr	r2, [pc, #40]	; (800b8c4 <data_get+0x2b4>)
 800b89a:	235c      	movs	r3, #92	; 0x5c
 800b89c:	fb03 f304 	mul.w	r3, r3, r4
 800b8a0:	4413      	add	r3, r2
 800b8a2:	3358      	adds	r3, #88	; 0x58
 800b8a4:	edc3 7a00 	vstr	s15, [r3]
		}
		log_counter += 1; //logカウンタ更新
 800b8a8:	4b04      	ldr	r3, [pc, #16]	; (800b8bc <data_get+0x2ac>)
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	4b02      	ldr	r3, [pc, #8]	; (800b8bc <data_get+0x2ac>)
 800b8b2:	801a      	strh	r2, [r3, #0]
	}
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd90      	pop	{r4, r7, pc}
 800b8bc:	20004b08 	.word	0x20004b08
 800b8c0:	cccccccd 	.word	0xcccccccd
 800b8c4:	20004b0c 	.word	0x20004b0c
 800b8c8:	2001b284 	.word	0x2001b284
 800b8cc:	2001b28c 	.word	0x2001b28c
 800b8d0:	2001b29c 	.word	0x2001b29c
 800b8d4:	2001b270 	.word	0x2001b270
 800b8d8:	2000023c 	.word	0x2000023c
 800b8dc:	20000240 	.word	0x20000240
 800b8e0:	20000244 	.word	0x20000244
 800b8e4:	2001b288 	.word	0x2001b288
 800b8e8:	2001b290 	.word	0x2001b290
 800b8ec:	2001b2a0 	.word	0x2001b2a0
 800b8f0:	2001b278 	.word	0x2001b278
 800b8f4:	2001bbca 	.word	0x2001bbca
 800b8f8:	2001bbc8 	.word	0x2001bbc8

0800b8fc <data_read>:

/* ---------------------------------------------------------------
	ログ吐き出し用関数
--------------------------------------------------------------- */
void data_read(void)
{
 800b8fc:	b590      	push	{r4, r7, lr}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0

	uint16_t i = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	80fb      	strh	r3, [r7, #6]
	uint16_t j = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	80bb      	strh	r3, [r7, #4]

	j =  log_count_lim / log_count_step - 1 ;
 800b90a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b90e:	80bb      	strh	r3, [r7, #4]

	//printfで一行づつ書き出していく。
	//m 一行目はパラメータ名

//	printf ("TIME[ms],target_distance[m],ideal_distance[m],current_distance[m],TARGET_SPEED_m[m/s],SPEED_m[m/s],SPEED_m_ave[m/s],accel_m[m/s2],accel_m_ave[m/s2],current_angle[rad],DUTY_R[%%],Duty_L[%%],V_battery[V]\r\n");	//mパラメータ名を記述
	printf ("TIME[ms],target_distance[m],ideal_distance[m],current_distance[m],TARGET_SPEED_m[m/s],SPEED_m[m/s],SPEED_m_ave[m/s],"
 800b910:	4802      	ldr	r0, [pc, #8]	; (800b91c <data_read+0x20>)
 800b912:	f003 fed5 	bl	800f6c0 <iprintf>
			"accel_m[m/s2],accel_m_ave[m/s2],target_angle[rad],ideal_angle[rad],current_angle[rad],target_speed_w[rad/s],"
			"speed_w[rad/s],DUTY_R[%%],Duty_L[%%],front_r,front_l,side_r,side_l,front_r[m],front_l[m],V_battery[V]\r\n");	//mパラメータ名を記述

	for(i = 0; i <= j ; i++)
 800b916:	2300      	movs	r3, #0
 800b918:	80fb      	strh	r3, [r7, #6]
 800b91a:	e1aa      	b.n	800bc72 <data_read+0x376>
 800b91c:	08013334 	.word	0x08013334
	{
		printf("%f,",log_store[i].time);
 800b920:	88fb      	ldrh	r3, [r7, #6]
 800b922:	4ac6      	ldr	r2, [pc, #792]	; (800bc3c <data_read+0x340>)
 800b924:	215c      	movs	r1, #92	; 0x5c
 800b926:	fb01 f303 	mul.w	r3, r1, r3
 800b92a:	4413      	add	r3, r2
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f4 fe32 	bl	8000598 <__aeabi_f2d>
 800b934:	4603      	mov	r3, r0
 800b936:	460c      	mov	r4, r1
 800b938:	461a      	mov	r2, r3
 800b93a:	4623      	mov	r3, r4
 800b93c:	48c0      	ldr	r0, [pc, #768]	; (800bc40 <data_read+0x344>)
 800b93e:	f003 febf 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].target_d_m);
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	4abd      	ldr	r2, [pc, #756]	; (800bc3c <data_read+0x340>)
 800b946:	215c      	movs	r1, #92	; 0x5c
 800b948:	fb01 f303 	mul.w	r3, r1, r3
 800b94c:	4413      	add	r3, r2
 800b94e:	3304      	adds	r3, #4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4618      	mov	r0, r3
 800b954:	f7f4 fe20 	bl	8000598 <__aeabi_f2d>
 800b958:	4603      	mov	r3, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	461a      	mov	r2, r3
 800b95e:	4623      	mov	r3, r4
 800b960:	48b7      	ldr	r0, [pc, #732]	; (800bc40 <data_read+0x344>)
 800b962:	f003 fead 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].ideal_d_m);
 800b966:	88fb      	ldrh	r3, [r7, #6]
 800b968:	4ab4      	ldr	r2, [pc, #720]	; (800bc3c <data_read+0x340>)
 800b96a:	215c      	movs	r1, #92	; 0x5c
 800b96c:	fb01 f303 	mul.w	r3, r1, r3
 800b970:	4413      	add	r3, r2
 800b972:	3308      	adds	r3, #8
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4618      	mov	r0, r3
 800b978:	f7f4 fe0e 	bl	8000598 <__aeabi_f2d>
 800b97c:	4603      	mov	r3, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	461a      	mov	r2, r3
 800b982:	4623      	mov	r3, r4
 800b984:	48ae      	ldr	r0, [pc, #696]	; (800bc40 <data_read+0x344>)
 800b986:	f003 fe9b 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].real_d_m);
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	4aab      	ldr	r2, [pc, #684]	; (800bc3c <data_read+0x340>)
 800b98e:	215c      	movs	r1, #92	; 0x5c
 800b990:	fb01 f303 	mul.w	r3, r1, r3
 800b994:	4413      	add	r3, r2
 800b996:	330c      	adds	r3, #12
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f4 fdfc 	bl	8000598 <__aeabi_f2d>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4623      	mov	r3, r4
 800b9a8:	48a5      	ldr	r0, [pc, #660]	; (800bc40 <data_read+0x344>)
 800b9aa:	f003 fe89 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].target_speed_m);
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	4aa2      	ldr	r2, [pc, #648]	; (800bc3c <data_read+0x340>)
 800b9b2:	215c      	movs	r1, #92	; 0x5c
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	4413      	add	r3, r2
 800b9ba:	3310      	adds	r3, #16
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7f4 fdea 	bl	8000598 <__aeabi_f2d>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4623      	mov	r3, r4
 800b9cc:	489c      	ldr	r0, [pc, #624]	; (800bc40 <data_read+0x344>)
 800b9ce:	f003 fe77 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].speed_m);
 800b9d2:	88fb      	ldrh	r3, [r7, #6]
 800b9d4:	4a99      	ldr	r2, [pc, #612]	; (800bc3c <data_read+0x340>)
 800b9d6:	215c      	movs	r1, #92	; 0x5c
 800b9d8:	fb01 f303 	mul.w	r3, r1, r3
 800b9dc:	4413      	add	r3, r2
 800b9de:	3314      	adds	r3, #20
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7f4 fdd8 	bl	8000598 <__aeabi_f2d>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	4893      	ldr	r0, [pc, #588]	; (800bc40 <data_read+0x344>)
 800b9f2:	f003 fe65 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].speed_m_ave);
 800b9f6:	88fb      	ldrh	r3, [r7, #6]
 800b9f8:	4a90      	ldr	r2, [pc, #576]	; (800bc3c <data_read+0x340>)
 800b9fa:	215c      	movs	r1, #92	; 0x5c
 800b9fc:	fb01 f303 	mul.w	r3, r1, r3
 800ba00:	4413      	add	r3, r2
 800ba02:	3318      	adds	r3, #24
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7f4 fdc6 	bl	8000598 <__aeabi_f2d>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	461a      	mov	r2, r3
 800ba12:	4623      	mov	r3, r4
 800ba14:	488a      	ldr	r0, [pc, #552]	; (800bc40 <data_read+0x344>)
 800ba16:	f003 fe53 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].accel_m);
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	4a87      	ldr	r2, [pc, #540]	; (800bc3c <data_read+0x340>)
 800ba1e:	215c      	movs	r1, #92	; 0x5c
 800ba20:	fb01 f303 	mul.w	r3, r1, r3
 800ba24:	4413      	add	r3, r2
 800ba26:	331c      	adds	r3, #28
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7f4 fdb4 	bl	8000598 <__aeabi_f2d>
 800ba30:	4603      	mov	r3, r0
 800ba32:	460c      	mov	r4, r1
 800ba34:	461a      	mov	r2, r3
 800ba36:	4623      	mov	r3, r4
 800ba38:	4881      	ldr	r0, [pc, #516]	; (800bc40 <data_read+0x344>)
 800ba3a:	f003 fe41 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].accel_m_ave);
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	4a7e      	ldr	r2, [pc, #504]	; (800bc3c <data_read+0x340>)
 800ba42:	215c      	movs	r1, #92	; 0x5c
 800ba44:	fb01 f303 	mul.w	r3, r1, r3
 800ba48:	4413      	add	r3, r2
 800ba4a:	3320      	adds	r3, #32
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7f4 fda2 	bl	8000598 <__aeabi_f2d>
 800ba54:	4603      	mov	r3, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	4878      	ldr	r0, [pc, #480]	; (800bc40 <data_read+0x344>)
 800ba5e:	f003 fe2f 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].target_d_w);
 800ba62:	88fb      	ldrh	r3, [r7, #6]
 800ba64:	4a75      	ldr	r2, [pc, #468]	; (800bc3c <data_read+0x340>)
 800ba66:	215c      	movs	r1, #92	; 0x5c
 800ba68:	fb01 f303 	mul.w	r3, r1, r3
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3324      	adds	r3, #36	; 0x24
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f4 fd90 	bl	8000598 <__aeabi_f2d>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	4623      	mov	r3, r4
 800ba80:	486f      	ldr	r0, [pc, #444]	; (800bc40 <data_read+0x344>)
 800ba82:	f003 fe1d 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].ideal_d_w);
 800ba86:	88fb      	ldrh	r3, [r7, #6]
 800ba88:	4a6c      	ldr	r2, [pc, #432]	; (800bc3c <data_read+0x340>)
 800ba8a:	215c      	movs	r1, #92	; 0x5c
 800ba8c:	fb01 f303 	mul.w	r3, r1, r3
 800ba90:	4413      	add	r3, r2
 800ba92:	3328      	adds	r3, #40	; 0x28
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f4 fd7e 	bl	8000598 <__aeabi_f2d>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	461a      	mov	r2, r3
 800baa2:	4623      	mov	r3, r4
 800baa4:	4866      	ldr	r0, [pc, #408]	; (800bc40 <data_read+0x344>)
 800baa6:	f003 fe0b 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].real_d_w);
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	4a63      	ldr	r2, [pc, #396]	; (800bc3c <data_read+0x340>)
 800baae:	215c      	movs	r1, #92	; 0x5c
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	4413      	add	r3, r2
 800bab6:	332c      	adds	r3, #44	; 0x2c
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f7f4 fd6c 	bl	8000598 <__aeabi_f2d>
 800bac0:	4603      	mov	r3, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	461a      	mov	r2, r3
 800bac6:	4623      	mov	r3, r4
 800bac8:	485d      	ldr	r0, [pc, #372]	; (800bc40 <data_read+0x344>)
 800baca:	f003 fdf9 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].target_speed_w);
 800bace:	88fb      	ldrh	r3, [r7, #6]
 800bad0:	4a5a      	ldr	r2, [pc, #360]	; (800bc3c <data_read+0x340>)
 800bad2:	215c      	movs	r1, #92	; 0x5c
 800bad4:	fb01 f303 	mul.w	r3, r1, r3
 800bad8:	4413      	add	r3, r2
 800bada:	3330      	adds	r3, #48	; 0x30
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f4 fd5a 	bl	8000598 <__aeabi_f2d>
 800bae4:	4603      	mov	r3, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	461a      	mov	r2, r3
 800baea:	4623      	mov	r3, r4
 800baec:	4854      	ldr	r0, [pc, #336]	; (800bc40 <data_read+0x344>)
 800baee:	f003 fde7 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].speed_w);
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	4a51      	ldr	r2, [pc, #324]	; (800bc3c <data_read+0x340>)
 800baf6:	215c      	movs	r1, #92	; 0x5c
 800baf8:	fb01 f303 	mul.w	r3, r1, r3
 800bafc:	4413      	add	r3, r2
 800bafe:	3334      	adds	r3, #52	; 0x34
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f4 fd48 	bl	8000598 <__aeabi_f2d>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4623      	mov	r3, r4
 800bb10:	484b      	ldr	r0, [pc, #300]	; (800bc40 <data_read+0x344>)
 800bb12:	f003 fdd5 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].duty_r);
 800bb16:	88fb      	ldrh	r3, [r7, #6]
 800bb18:	4a48      	ldr	r2, [pc, #288]	; (800bc3c <data_read+0x340>)
 800bb1a:	215c      	movs	r1, #92	; 0x5c
 800bb1c:	fb01 f303 	mul.w	r3, r1, r3
 800bb20:	4413      	add	r3, r2
 800bb22:	3338      	adds	r3, #56	; 0x38
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f4 fd36 	bl	8000598 <__aeabi_f2d>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	460c      	mov	r4, r1
 800bb30:	461a      	mov	r2, r3
 800bb32:	4623      	mov	r3, r4
 800bb34:	4842      	ldr	r0, [pc, #264]	; (800bc40 <data_read+0x344>)
 800bb36:	f003 fdc3 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].duty_l);
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	4a3f      	ldr	r2, [pc, #252]	; (800bc3c <data_read+0x340>)
 800bb3e:	215c      	movs	r1, #92	; 0x5c
 800bb40:	fb01 f303 	mul.w	r3, r1, r3
 800bb44:	4413      	add	r3, r2
 800bb46:	333c      	adds	r3, #60	; 0x3c
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f4 fd24 	bl	8000598 <__aeabi_f2d>
 800bb50:	4603      	mov	r3, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	461a      	mov	r2, r3
 800bb56:	4623      	mov	r3, r4
 800bb58:	4839      	ldr	r0, [pc, #228]	; (800bc40 <data_read+0x344>)
 800bb5a:	f003 fdb1 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].front_sensor_r);
 800bb5e:	88fb      	ldrh	r3, [r7, #6]
 800bb60:	4a36      	ldr	r2, [pc, #216]	; (800bc3c <data_read+0x340>)
 800bb62:	215c      	movs	r1, #92	; 0x5c
 800bb64:	fb01 f303 	mul.w	r3, r1, r3
 800bb68:	4413      	add	r3, r2
 800bb6a:	3340      	adds	r3, #64	; 0x40
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f4 fd12 	bl	8000598 <__aeabi_f2d>
 800bb74:	4603      	mov	r3, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	4830      	ldr	r0, [pc, #192]	; (800bc40 <data_read+0x344>)
 800bb7e:	f003 fd9f 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].front_sensor_l);
 800bb82:	88fb      	ldrh	r3, [r7, #6]
 800bb84:	4a2d      	ldr	r2, [pc, #180]	; (800bc3c <data_read+0x340>)
 800bb86:	215c      	movs	r1, #92	; 0x5c
 800bb88:	fb01 f303 	mul.w	r3, r1, r3
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3344      	adds	r3, #68	; 0x44
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f4 fd00 	bl	8000598 <__aeabi_f2d>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4623      	mov	r3, r4
 800bba0:	4827      	ldr	r0, [pc, #156]	; (800bc40 <data_read+0x344>)
 800bba2:	f003 fd8d 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].side_sensor_r);
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	4a24      	ldr	r2, [pc, #144]	; (800bc3c <data_read+0x340>)
 800bbaa:	215c      	movs	r1, #92	; 0x5c
 800bbac:	fb01 f303 	mul.w	r3, r1, r3
 800bbb0:	4413      	add	r3, r2
 800bbb2:	3348      	adds	r3, #72	; 0x48
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f4 fcee 	bl	8000598 <__aeabi_f2d>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	4623      	mov	r3, r4
 800bbc4:	481e      	ldr	r0, [pc, #120]	; (800bc40 <data_read+0x344>)
 800bbc6:	f003 fd7b 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].side_sensor_l);
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	4a1b      	ldr	r2, [pc, #108]	; (800bc3c <data_read+0x340>)
 800bbce:	215c      	movs	r1, #92	; 0x5c
 800bbd0:	fb01 f303 	mul.w	r3, r1, r3
 800bbd4:	4413      	add	r3, r2
 800bbd6:	334c      	adds	r3, #76	; 0x4c
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7f4 fcdc 	bl	8000598 <__aeabi_f2d>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	4815      	ldr	r0, [pc, #84]	; (800bc40 <data_read+0x344>)
 800bbea:	f003 fd69 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].front_r);
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	4a12      	ldr	r2, [pc, #72]	; (800bc3c <data_read+0x340>)
 800bbf2:	215c      	movs	r1, #92	; 0x5c
 800bbf4:	fb01 f303 	mul.w	r3, r1, r3
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3350      	adds	r3, #80	; 0x50
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7f4 fcca 	bl	8000598 <__aeabi_f2d>
 800bc04:	4603      	mov	r3, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	480c      	ldr	r0, [pc, #48]	; (800bc40 <data_read+0x344>)
 800bc0e:	f003 fd57 	bl	800f6c0 <iprintf>
		printf("%f,",log_store[i].front_l);
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	4a09      	ldr	r2, [pc, #36]	; (800bc3c <data_read+0x340>)
 800bc16:	215c      	movs	r1, #92	; 0x5c
 800bc18:	fb01 f303 	mul.w	r3, r1, r3
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3354      	adds	r3, #84	; 0x54
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f4 fcb8 	bl	8000598 <__aeabi_f2d>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4623      	mov	r3, r4
 800bc30:	4803      	ldr	r0, [pc, #12]	; (800bc40 <data_read+0x344>)
 800bc32:	f003 fd45 	bl	800f6c0 <iprintf>
		printf("%f",log_store[i].V_battery);			//m 最後はカンマなし
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	e004      	b.n	800bc44 <data_read+0x348>
 800bc3a:	bf00      	nop
 800bc3c:	20004b0c 	.word	0x20004b0c
 800bc40:	0801347c 	.word	0x0801347c
 800bc44:	4a0f      	ldr	r2, [pc, #60]	; (800bc84 <data_read+0x388>)
 800bc46:	215c      	movs	r1, #92	; 0x5c
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	3358      	adds	r3, #88	; 0x58
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f4 fca0 	bl	8000598 <__aeabi_f2d>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4623      	mov	r3, r4
 800bc60:	4809      	ldr	r0, [pc, #36]	; (800bc88 <data_read+0x38c>)
 800bc62:	f003 fd2d 	bl	800f6c0 <iprintf>
		printf("\r\n"); //m 改行
 800bc66:	4809      	ldr	r0, [pc, #36]	; (800bc8c <data_read+0x390>)
 800bc68:	f003 fd9e 	bl	800f7a8 <puts>
	for(i = 0; i <= j ; i++)
 800bc6c:	88fb      	ldrh	r3, [r7, #6]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	80fb      	strh	r3, [r7, #6]
 800bc72:	88fa      	ldrh	r2, [r7, #6]
 800bc74:	88bb      	ldrh	r3, [r7, #4]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	f67f ae52 	bls.w	800b920 <data_read+0x24>

	}

}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd90      	pop	{r4, r7, pc}
 800bc84:	20004b0c 	.word	0x20004b0c
 800bc88:	08013480 	.word	0x08013480
 800bc8c:	08013484 	.word	0x08013484

0800bc90 <module_test>:

/* ---------------------------------------------------------------
	各機能の動作確認用関数
--------------------------------------------------------------- */
void module_test( void )
{
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af02      	add	r7, sp, #8
	uint16_t	line 	  = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	80fb      	strh	r3, [r7, #6]
	int16_t		duty_l	  = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	80bb      	strh	r3, [r7, #4]
	int16_t		duty_r	  = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	807b      	strh	r3, [r7, #2]

	// aエンコーダのカウントをリセット
	Encoder_ResetCount_Left();
 800bca4:	f7fa f80a 	bl	8005cbc <Encoder_ResetCount_Left>
	Encoder_ResetCount_Right();
 800bca8:	f7fa f816 	bl	8005cd8 <Encoder_ResetCount_Right>

	while( 1 ) {
//		__disable_irq();
		// a割り込み処理率を表示
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 800bcac:	f7fa fe32 	bl	8006914 <Interrupt_GetBootTime>
 800bcb0:	ee10 3a10 	vmov	r3, s0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f4 fc6f 	bl	8000598 <__aeabi_f2d>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	48d2      	ldr	r0, [pc, #840]	; (800c008 <module_test+0x378>)
 800bcc0:	f003 fcfe 	bl	800f6c0 <iprintf>
 800bcc4:	88fb      	ldrh	r3, [r7, #6]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	80fb      	strh	r3, [r7, #6]
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 800bcca:	f7fa fe0b 	bl	80068e4 <Interrupt_GetDuty>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bcdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
 800bce0:	ee16 0a90 	vmov	r0, s13
 800bce4:	f7f4 fc58 	bl	8000598 <__aeabi_f2d>
 800bce8:	4682      	mov	sl, r0
 800bcea:	468b      	mov	fp, r1
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 800bcec:	f7fa fe06 	bl	80068fc <Interrupt_GetDuty_Max>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	ee07 3a90 	vmov	s15, r3
 800bcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bcfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<Interrupt> %3.1f[%%] (MAX : %3.1f[%%])\r\n",
 800bd02:	ee16 0a90 	vmov	r0, s13
 800bd06:	f7f4 fc47 	bl	8000598 <__aeabi_f2d>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	e9cd 2300 	strd	r2, r3, [sp]
 800bd12:	4652      	mov	r2, sl
 800bd14:	465b      	mov	r3, fp
 800bd16:	48bd      	ldr	r0, [pc, #756]	; (800c00c <module_test+0x37c>)
 800bd18:	f003 fcd2 	bl	800f6c0 <iprintf>
				(float)Interrupt_GetDuty()/10.f, (float)Interrupt_GetDuty_Max()/10.f); line++;
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	80fb      	strh	r3, [r7, #6]

		// aモータを指定のDutyを表示
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 800bd22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bd26:	ee07 3a90 	vmov	s15, r3
 800bd2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bd32:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 800bd36:	ee16 0a90 	vmov	r0, s13
 800bd3a:	f7f4 fc2d 	bl	8000598 <__aeabi_f2d>
 800bd3e:	4682      	mov	sl, r0
 800bd40:	468b      	mov	fp, r1
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 800bd42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bd52:	eec7 6a87 	vdiv.f32	s13, s15, s14
		printf("<PWM Duty> L: %4.1f[%%],  R: %4.1f[%%]\r\n",
 800bd56:	ee16 0a90 	vmov	r0, s13
 800bd5a:	f7f4 fc1d 	bl	8000598 <__aeabi_f2d>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	e9cd 2300 	strd	r2, r3, [sp]
 800bd66:	4652      	mov	r2, sl
 800bd68:	465b      	mov	r3, fp
 800bd6a:	48a9      	ldr	r0, [pc, #676]	; (800c010 <module_test+0x380>)
 800bd6c:	f003 fca8 	bl	800f6c0 <iprintf>
				(float)duty_l/10.f, (float)duty_r/10.f); line++;
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	3301      	adds	r3, #1
 800bd74:	80fb      	strh	r3, [r7, #6]

		// aエンコーダの角度表示
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 800bd76:	f7f9 ffbb 	bl	8005cf0 <Encoder_GetAngle_Left>
 800bd7a:	eef0 6a40 	vmov.f32	s13, s0
 800bd7e:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800c014 <module_test+0x384>
 800bd82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd86:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800c018 <module_test+0x388>
 800bd8a:	ee67 7a87 	vmul.f32	s15, s15, s14
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
 800bd8e:	ee17 0a90 	vmov	r0, s15
 800bd92:	f7f4 fc01 	bl	8000598 <__aeabi_f2d>
 800bd96:	4682      	mov	sl, r0
 800bd98:	468b      	mov	fp, r1
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 800bd9a:	f7f9 ffcb 	bl	8005d34 <Encoder_GetAngle_Right>
 800bd9e:	eef0 6a40 	vmov.f32	s13, s0
 800bda2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800c014 <module_test+0x384>
 800bda6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdaa:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800c018 <module_test+0x388>
 800bdae:	ee67 7a87 	vmul.f32	s15, s15, s14
		printf("<Encoder> L: %5.1f[deg],  R: %5.1f[deg]\r\n",
 800bdb2:	ee17 0a90 	vmov	r0, s15
 800bdb6:	f7f4 fbef 	bl	8000598 <__aeabi_f2d>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	e9cd 2300 	strd	r2, r3, [sp]
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	4895      	ldr	r0, [pc, #596]	; (800c01c <module_test+0x38c>)
 800bdc8:	f003 fc7a 	bl	800f6c0 <iprintf>
				RAD2DEG(Encoder_GetAngle_Left()), RAD2DEG(Encoder_GetAngle_Right())); line++;
 800bdcc:	88fb      	ldrh	r3, [r7, #6]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	80fb      	strh	r3, [r7, #6]

		// aマウスのスピード表示 from encoder
		printf("<mouse_speed> speed_m : %5.3f[m/s]  spwwd_w : %5.3f[m/s] \r\n ",
 800bdd2:	4b93      	ldr	r3, [pc, #588]	; (800c020 <module_test+0x390>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f4 fbde 	bl	8000598 <__aeabi_f2d>
 800bddc:	4682      	mov	sl, r0
 800bdde:	468b      	mov	fp, r1
				speed_m,IMU_GetGyro_Z());line++;
 800bde0:	f7fa fc5a 	bl	8006698 <IMU_GetGyro_Z>
 800bde4:	ee10 3a10 	vmov	r3, s0
		printf("<mouse_speed> speed_m : %5.3f[m/s]  spwwd_w : %5.3f[m/s] \r\n ",
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f4 fbd5 	bl	8000598 <__aeabi_f2d>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	e9cd 2300 	strd	r2, r3, [sp]
 800bdf6:	4652      	mov	r2, sl
 800bdf8:	465b      	mov	r3, fp
 800bdfa:	488a      	ldr	r0, [pc, #552]	; (800c024 <module_test+0x394>)
 800bdfc:	f003 fc60 	bl	800f6c0 <iprintf>
				speed_m,IMU_GetGyro_Z());line++;
 800be00:	88fb      	ldrh	r3, [r7, #6]
 800be02:	3301      	adds	r3, #1
 800be04:	80fb      	strh	r3, [r7, #6]

		// aバッテリー電圧の表示
		printf("<Battery> %3.2f[V]\r\n", Battery_GetVoltage()); line++;
 800be06:	f7f9 fe87 	bl	8005b18 <Battery_GetVoltage>
 800be0a:	ee10 3a10 	vmov	r3, s0
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f4 fbc2 	bl	8000598 <__aeabi_f2d>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	4883      	ldr	r0, [pc, #524]	; (800c028 <module_test+0x398>)
 800be1a:	f003 fc51 	bl	800f6c0 <iprintf>
 800be1e:	88fb      	ldrh	r3, [r7, #6]
 800be20:	3301      	adds	r3, #1
 800be22:	80fb      	strh	r3, [r7, #6]

		// a壁センサのAD値表示
		printf("<IR Sensor> Front_R: %4d, Side_R: %4d, Side_L: %4d, Front_L: %4d\r\n",
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800be24:	2003      	movs	r0, #3
 800be26:	f7fa fe99 	bl	8006b5c <Sensor_GetValue>
 800be2a:	4603      	mov	r3, r0
		printf("<IR Sensor> Front_R: %4d, Side_R: %4d, Side_L: %4d, Front_L: %4d\r\n",
 800be2c:	461e      	mov	r6, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800be2e:	2002      	movs	r0, #2
 800be30:	f7fa fe94 	bl	8006b5c <Sensor_GetValue>
 800be34:	4603      	mov	r3, r0
		printf("<IR Sensor> Front_R: %4d, Side_R: %4d, Side_L: %4d, Front_L: %4d\r\n",
 800be36:	469a      	mov	sl, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800be38:	2001      	movs	r0, #1
 800be3a:	f7fa fe8f 	bl	8006b5c <Sensor_GetValue>
 800be3e:	4603      	mov	r3, r0
		printf("<IR Sensor> Front_R: %4d, Side_R: %4d, Side_L: %4d, Front_L: %4d\r\n",
 800be40:	469b      	mov	fp, r3
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800be42:	2000      	movs	r0, #0
 800be44:	f7fa fe8a 	bl	8006b5c <Sensor_GetValue>
 800be48:	4603      	mov	r3, r0
		printf("<IR Sensor> Front_R: %4d, Side_R: %4d, Side_L: %4d, Front_L: %4d\r\n",
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	465b      	mov	r3, fp
 800be4e:	4652      	mov	r2, sl
 800be50:	4631      	mov	r1, r6
 800be52:	4876      	ldr	r0, [pc, #472]	; (800c02c <module_test+0x39c>)
 800be54:	f003 fc34 	bl	800f6c0 <iprintf>
				Sensor_GetValue(3), Sensor_GetValue(2), Sensor_GetValue(1), Sensor_GetValue(0)); line++;
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	3301      	adds	r3, #1
 800be5c:	80fb      	strh	r3, [r7, #6]
		Sensor_DebugPrintf();line++;
 800be5e:	f7fa ff29 	bl	8006cb4 <Sensor_DebugPrintf>
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	3301      	adds	r3, #1
 800be66:	80fb      	strh	r3, [r7, #6]

		//壁センサの距離変換結果確認
		printf("<IR Sensor_length> Front_R: %8.8f, Front_L: %8.8f\r\n",
 800be68:	2003      	movs	r0, #3
 800be6a:	f7fa fe91 	bl	8006b90 <SensorValue2length>
 800be6e:	ec5b ab10 	vmov	sl, fp, d0
 800be72:	2000      	movs	r0, #0
 800be74:	f7fa fe8c 	bl	8006b90 <SensorValue2length>
 800be78:	eeb0 7a40 	vmov.f32	s14, s0
 800be7c:	eef0 7a60 	vmov.f32	s15, s1
 800be80:	ed8d 7b00 	vstr	d7, [sp]
 800be84:	4652      	mov	r2, sl
 800be86:	465b      	mov	r3, fp
 800be88:	4869      	ldr	r0, [pc, #420]	; (800c030 <module_test+0x3a0>)
 800be8a:	f003 fc19 	bl	800f6c0 <iprintf>
				SensorValue2length(3),SensorValue2length(0)); line++;
 800be8e:	88fb      	ldrh	r3, [r7, #6]
 800be90:	3301      	adds	r3, #1
 800be92:	80fb      	strh	r3, [r7, #6]
		// IMU（加速度計とジャイロ）の計測値表示
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 800be94:	f7fa fbda 	bl	800664c <IMU_GetAccel_X>
 800be98:	ee10 3a10 	vmov	r3, s0
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f4 fb7b 	bl	8000598 <__aeabi_f2d>
 800bea2:	4682      	mov	sl, r0
 800bea4:	468b      	mov	fp, r1
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 800bea6:	f7fa fbf7 	bl	8006698 <IMU_GetGyro_Z>
 800beaa:	ee10 3a10 	vmov	r3, s0
		printf("<IMU> Accel_X: %5.3f[m/s^2], Gyro_Z: %6.3f[rad/s]\r\n",
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f4 fb72 	bl	8000598 <__aeabi_f2d>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	e9cd 2300 	strd	r2, r3, [sp]
 800bebc:	4652      	mov	r2, sl
 800bebe:	465b      	mov	r3, fp
 800bec0:	485c      	ldr	r0, [pc, #368]	; (800c034 <module_test+0x3a4>)
 800bec2:	f003 fbfd 	bl	800f6c0 <iprintf>
				IMU_GetAccel_X(), IMU_GetGyro_Z()); line++;
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	3301      	adds	r3, #1
 800beca:	80fb      	strh	r3, [r7, #6]
		// a壁センサ用タイマ
		// printf("<IR Sensor_tim> tim: %5.8f\r\n",ABS(front_sensor_ref - SensorValue2length(3)) );line++;
		// 壁センサ
		printf("front_sensor_ref - real, r: %5.8f  l: %5.8f \r\n",ABS(front_sensor_r_ref - SensorValue2length(3)),ABS(front_sensor_l_ref - SensorValue2length(0)) );line++;
 800becc:	2003      	movs	r0, #3
 800bece:	f7fa fe5f 	bl	8006b90 <SensorValue2length>
 800bed2:	ec53 2b10 	vmov	r2, r3, d0
 800bed6:	a148      	add	r1, pc, #288	; (adr r1, 800bff8 <module_test+0x368>)
 800bed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bedc:	f7f4 f9fc 	bl	80002d8 <__aeabi_dsub>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4610      	mov	r0, r2
 800bee6:	4619      	mov	r1, r3
 800bee8:	f04f 0200 	mov.w	r2, #0
 800beec:	f04f 0300 	mov.w	r3, #0
 800bef0:	f7f4 fe1c 	bl	8000b2c <__aeabi_dcmplt>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00f      	beq.n	800bf1a <module_test+0x28a>
 800befa:	2003      	movs	r0, #3
 800befc:	f7fa fe48 	bl	8006b90 <SensorValue2length>
 800bf00:	ec53 2b10 	vmov	r2, r3, d0
 800bf04:	a13c      	add	r1, pc, #240	; (adr r1, 800bff8 <module_test+0x368>)
 800bf06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf0a:	f7f4 f9e5 	bl	80002d8 <__aeabi_dsub>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4690      	mov	r8, r2
 800bf14:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800bf18:	e00d      	b.n	800bf36 <module_test+0x2a6>
 800bf1a:	2003      	movs	r0, #3
 800bf1c:	f7fa fe38 	bl	8006b90 <SensorValue2length>
 800bf20:	ec53 2b10 	vmov	r2, r3, d0
 800bf24:	a134      	add	r1, pc, #208	; (adr r1, 800bff8 <module_test+0x368>)
 800bf26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf2a:	f7f4 f9d5 	bl	80002d8 <__aeabi_dsub>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4690      	mov	r8, r2
 800bf34:	4699      	mov	r9, r3
 800bf36:	2000      	movs	r0, #0
 800bf38:	f7fa fe2a 	bl	8006b90 <SensorValue2length>
 800bf3c:	ec53 2b10 	vmov	r2, r3, d0
 800bf40:	a12f      	add	r1, pc, #188	; (adr r1, 800c000 <module_test+0x370>)
 800bf42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf46:	f7f4 f9c7 	bl	80002d8 <__aeabi_dsub>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4610      	mov	r0, r2
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	f7f4 fde7 	bl	8000b2c <__aeabi_dcmplt>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00f      	beq.n	800bf84 <module_test+0x2f4>
 800bf64:	2000      	movs	r0, #0
 800bf66:	f7fa fe13 	bl	8006b90 <SensorValue2length>
 800bf6a:	ec53 2b10 	vmov	r2, r3, d0
 800bf6e:	a124      	add	r1, pc, #144	; (adr r1, 800c000 <module_test+0x370>)
 800bf70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf74:	f7f4 f9b0 	bl	80002d8 <__aeabi_dsub>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800bf82:	e00f      	b.n	800bfa4 <module_test+0x314>
 800bf84:	2000      	movs	r0, #0
 800bf86:	f7fa fe03 	bl	8006b90 <SensorValue2length>
 800bf8a:	ec54 3b10 	vmov	r3, r4, d0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	4623      	mov	r3, r4
 800bf92:	a11b      	add	r1, pc, #108	; (adr r1, 800c000 <module_test+0x370>)
 800bf94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf98:	f7f4 f99e 	bl	80002d8 <__aeabi_dsub>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4625      	mov	r5, r4
 800bfa2:	461c      	mov	r4, r3
 800bfa4:	e9cd 4500 	strd	r4, r5, [sp]
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	464b      	mov	r3, r9
 800bfac:	4822      	ldr	r0, [pc, #136]	; (800c038 <module_test+0x3a8>)
 800bfae:	f003 fb87 	bl	800f6c0 <iprintf>
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	80fb      	strh	r3, [r7, #6]

		Motor_SetDuty_Left(duty_l);
 800bfb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 f859 	bl	800c074 <Motor_SetDuty_Left>
		Motor_SetDuty_Right(duty_r);
 800bfc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f8de 	bl	800c188 <Motor_SetDuty_Right>

		fflush(stdout);
 800bfcc:	4b1b      	ldr	r3, [pc, #108]	; (800c03c <module_test+0x3ac>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f002 fb7a 	bl	800e6cc <fflush>
		HAL_Delay(500);
 800bfd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bfdc:	f7f5 f97c 	bl	80012d8 <HAL_Delay>
		// a画面のクリア
		printf("%c[0J", 0x1b);
 800bfe0:	211b      	movs	r1, #27
 800bfe2:	4817      	ldr	r0, [pc, #92]	; (800c040 <module_test+0x3b0>)
 800bfe4:	f003 fb6c 	bl	800f6c0 <iprintf>
		printf("%c[%dA", 0x1b, line);
 800bfe8:	88fb      	ldrh	r3, [r7, #6]
 800bfea:	461a      	mov	r2, r3
 800bfec:	211b      	movs	r1, #27
 800bfee:	4815      	ldr	r0, [pc, #84]	; (800c044 <module_test+0x3b4>)
 800bff0:	f003 fb66 	bl	800f6c0 <iprintf>
		printf("<Boot Time> %8.3f[s]\r\n", Interrupt_GetBootTime()); line++;
 800bff4:	e65a      	b.n	800bcac <module_test+0x1c>
 800bff6:	bf00      	nop
 800bff8:	e0000000 	.word	0xe0000000
 800bffc:	3f878d4f 	.word	0x3f878d4f
 800c000:	60000000 	.word	0x60000000
 800c004:	3f8374bc 	.word	0x3f8374bc
 800c008:	08013488 	.word	0x08013488
 800c00c:	080134a0 	.word	0x080134a0
 800c010:	080134cc 	.word	0x080134cc
 800c014:	40490fda 	.word	0x40490fda
 800c018:	43340000 	.word	0x43340000
 800c01c:	080134f8 	.word	0x080134f8
 800c020:	2000023c 	.word	0x2000023c
 800c024:	08013524 	.word	0x08013524
 800c028:	08013564 	.word	0x08013564
 800c02c:	0801357c 	.word	0x0801357c
 800c030:	080135c0 	.word	0x080135c0
 800c034:	080135f4 	.word	0x080135f4
 800c038:	08013628 	.word	0x08013628
 800c03c:	20000028 	.word	0x20000028
 800c040:	08013658 	.word	0x08013658
 800c044:	08013660 	.word	0x08013660

0800c048 <Motor_Initialize>:

/* ---------------------------------------------------------------
	モータ用のタイマーを開始する関数
--------------------------------------------------------------- */
void Motor_Initialize( void )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800c04c:	2100      	movs	r1, #0
 800c04e:	4808      	ldr	r0, [pc, #32]	; (800c070 <Motor_Initialize+0x28>)
 800c050:	f7f8 f832 	bl	80040b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800c054:	2104      	movs	r1, #4
 800c056:	4806      	ldr	r0, [pc, #24]	; (800c070 <Motor_Initialize+0x28>)
 800c058:	f7f8 f82e 	bl	80040b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800c05c:	2108      	movs	r1, #8
 800c05e:	4804      	ldr	r0, [pc, #16]	; (800c070 <Motor_Initialize+0x28>)
 800c060:	f7f8 f82a 	bl	80040b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800c064:	210c      	movs	r1, #12
 800c066:	4802      	ldr	r0, [pc, #8]	; (800c070 <Motor_Initialize+0x28>)
 800c068:	f7f8 f826 	bl	80040b8 <HAL_TIM_PWM_Start>
}
 800c06c:	bf00      	nop
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	2001bd44 	.word	0x2001bd44

0800c074 <Motor_SetDuty_Left>:

/* ---------------------------------------------------------------
	左モータを指定のDuty（0～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Left( int16_t duty_l )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_l;

	g_duty_l = duty_l;
 800c07e:	4a3e      	ldr	r2, [pc, #248]	; (800c178 <Motor_SetDuty_Left+0x104>)
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	8013      	strh	r3, [r2, #0]
	if( ABS(duty_l) > MOT_DUTY_MAX ) {
 800c084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	bfb8      	it	lt
 800c08c:	425b      	neglt	r3, r3
 800c08e:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c092:	4293      	cmp	r3, r2
 800c094:	dd12      	ble.n	800c0bc <Motor_SetDuty_Left+0x48>
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800c096:	f7f6 fd7b 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c09a:	4603      	mov	r3, r0
 800c09c:	095b      	lsrs	r3, r3, #5
 800c09e:	4a37      	ldr	r2, [pc, #220]	; (800c17c <Motor_SetDuty_Left+0x108>)
 800c0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a4:	09db      	lsrs	r3, r3, #7
 800c0a6:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
 800c0ae:	4a34      	ldr	r2, [pc, #208]	; (800c180 <Motor_SetDuty_Left+0x10c>)
 800c0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b4:	099b      	lsrs	r3, r3, #6
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	e036      	b.n	800c12a <Motor_SetDuty_Left+0xb6>
	} else if( ABS(duty_l) < MOT_DUTY_MIN ) {
 800c0bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0c0:	f113 0f1d 	cmn.w	r3, #29
 800c0c4:	db17      	blt.n	800c0f6 <Motor_SetDuty_Left+0x82>
 800c0c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0ca:	2b1d      	cmp	r3, #29
 800c0cc:	dc13      	bgt.n	800c0f6 <Motor_SetDuty_Left+0x82>
		pulse_l = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800c0ce:	f7f6 fd5f 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	095b      	lsrs	r3, r3, #5
 800c0d6:	4a29      	ldr	r2, [pc, #164]	; (800c17c <Motor_SetDuty_Left+0x108>)
 800c0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0dc:	09da      	lsrs	r2, r3, #7
 800c0de:	4613      	mov	r3, r2
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	4b25      	ldr	r3, [pc, #148]	; (800c180 <Motor_SetDuty_Left+0x10c>)
 800c0ea:	fba3 2302 	umull	r2, r3, r3, r2
 800c0ee:	099b      	lsrs	r3, r3, #6
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	e019      	b.n	800c12a <Motor_SetDuty_Left+0xb6>
	} else {
		pulse_l = (uint32_t)(PCLK / PWMFREQ * ABS(duty_l) / 1000) - 1;
 800c0f6:	f7f6 fd4b 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	095b      	lsrs	r3, r3, #5
 800c0fe:	4a1f      	ldr	r2, [pc, #124]	; (800c17c <Motor_SetDuty_Left+0x108>)
 800c100:	fba2 2303 	umull	r2, r3, r2, r3
 800c104:	09da      	lsrs	r2, r3, #7
 800c106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da03      	bge.n	800c116 <Motor_SetDuty_Left+0xa2>
 800c10e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c112:	425b      	negs	r3, r3
 800c114:	e001      	b.n	800c11a <Motor_SetDuty_Left+0xa6>
 800c116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	4a18      	ldr	r2, [pc, #96]	; (800c180 <Motor_SetDuty_Left+0x10c>)
 800c120:	fba2 2303 	umull	r2, r3, r2, r3
 800c124:	099b      	lsrs	r3, r3, #6
 800c126:	3b01      	subs	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
	}

	if( duty_l > 0 ) {
 800c12a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	dd08      	ble.n	800c144 <Motor_SetDuty_Left+0xd0>
		MOT_SET_COMPARE_L_FORWARD( pulse_l );
 800c132:	4b14      	ldr	r3, [pc, #80]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( 0 );
 800c13a:	4b12      	ldr	r3, [pc, #72]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
	} else {
		MOT_SET_COMPARE_L_FORWARD( 0 );
		MOT_SET_COMPARE_L_REVERSE( 0 );
	}
}
 800c142:	e014      	b.n	800c16e <Motor_SetDuty_Left+0xfa>
	} else if( duty_l < 0 ) {
 800c144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da08      	bge.n	800c15e <Motor_SetDuty_Left+0xea>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2200      	movs	r2, #0
 800c152:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
 800c154:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c15c:	e007      	b.n	800c16e <Motor_SetDuty_Left+0xfa>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2200      	movs	r2, #0
 800c164:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_L_REVERSE( 0 );
 800c166:	4b07      	ldr	r3, [pc, #28]	; (800c184 <Motor_SetDuty_Left+0x110>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2200      	movs	r2, #0
 800c16c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	2001bbc8 	.word	0x2001bbc8
 800c17c:	0a7c5ac5 	.word	0x0a7c5ac5
 800c180:	10624dd3 	.word	0x10624dd3
 800c184:	2001bd44 	.word	0x2001bd44

0800c188 <Motor_SetDuty_Right>:

/* ---------------------------------------------------------------
	右モータを指定のDuty（0～1000）で回転させる関数
--------------------------------------------------------------- */
void Motor_SetDuty_Right( int16_t duty_r )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_r;
	g_duty_r = duty_r;
 800c192:	4a3e      	ldr	r2, [pc, #248]	; (800c28c <Motor_SetDuty_Right+0x104>)
 800c194:	88fb      	ldrh	r3, [r7, #6]
 800c196:	8013      	strh	r3, [r2, #0]
	if( ABS(duty_r) > MOT_DUTY_MAX ) {
 800c198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	bfb8      	it	lt
 800c1a0:	425b      	neglt	r3, r3
 800c1a2:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	dd12      	ble.n	800c1d0 <Motor_SetDuty_Right+0x48>
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800c1aa:	f7f6 fcf1 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	095b      	lsrs	r3, r3, #5
 800c1b2:	4a37      	ldr	r2, [pc, #220]	; (800c290 <Motor_SetDuty_Right+0x108>)
 800c1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b8:	09db      	lsrs	r3, r3, #7
 800c1ba:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c1be:	fb02 f303 	mul.w	r3, r2, r3
 800c1c2:	4a34      	ldr	r2, [pc, #208]	; (800c294 <Motor_SetDuty_Right+0x10c>)
 800c1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c8:	099b      	lsrs	r3, r3, #6
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	e036      	b.n	800c23e <Motor_SetDuty_Right+0xb6>
	} else if( ABS(duty_r) < MOT_DUTY_MIN ) {
 800c1d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1d4:	f113 0f1d 	cmn.w	r3, #29
 800c1d8:	db17      	blt.n	800c20a <Motor_SetDuty_Right+0x82>
 800c1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1de:	2b1d      	cmp	r3, #29
 800c1e0:	dc13      	bgt.n	800c20a <Motor_SetDuty_Right+0x82>
		pulse_r = (uint32_t)(PCLK / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800c1e2:	f7f6 fcd5 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	095b      	lsrs	r3, r3, #5
 800c1ea:	4a29      	ldr	r2, [pc, #164]	; (800c290 <Motor_SetDuty_Right+0x108>)
 800c1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f0:	09da      	lsrs	r2, r3, #7
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4b25      	ldr	r3, [pc, #148]	; (800c294 <Motor_SetDuty_Right+0x10c>)
 800c1fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c202:	099b      	lsrs	r3, r3, #6
 800c204:	3b01      	subs	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e019      	b.n	800c23e <Motor_SetDuty_Right+0xb6>
	} else {
		pulse_r = (uint32_t)(PCLK / PWMFREQ * ABS(duty_r) / 1000) - 1;
 800c20a:	f7f6 fcc1 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 800c20e:	4603      	mov	r3, r0
 800c210:	095b      	lsrs	r3, r3, #5
 800c212:	4a1f      	ldr	r2, [pc, #124]	; (800c290 <Motor_SetDuty_Right+0x108>)
 800c214:	fba2 2303 	umull	r2, r3, r2, r3
 800c218:	09da      	lsrs	r2, r3, #7
 800c21a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da03      	bge.n	800c22a <Motor_SetDuty_Right+0xa2>
 800c222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c226:	425b      	negs	r3, r3
 800c228:	e001      	b.n	800c22e <Motor_SetDuty_Right+0xa6>
 800c22a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c22e:	fb02 f303 	mul.w	r3, r2, r3
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <Motor_SetDuty_Right+0x10c>)
 800c234:	fba2 2303 	umull	r2, r3, r2, r3
 800c238:	099b      	lsrs	r3, r3, #6
 800c23a:	3b01      	subs	r3, #1
 800c23c:	60fb      	str	r3, [r7, #12]
	}

	if( duty_r > 0 ) {
 800c23e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd08      	ble.n	800c258 <Motor_SetDuty_Right+0xd0>
		MOT_SET_COMPARE_R_FORWARD( pulse_r );
 800c246:	4b14      	ldr	r3, [pc, #80]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_R_REVERSE( 0 );
 800c24e:	4b12      	ldr	r3, [pc, #72]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2200      	movs	r2, #0
 800c254:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
	} else {
		MOT_SET_COMPARE_R_FORWARD( 0 );
		MOT_SET_COMPARE_R_REVERSE( 0 );
	}
}
 800c256:	e014      	b.n	800c282 <Motor_SetDuty_Right+0xfa>
	} else if( duty_r < 0 ) {
 800c258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	da08      	bge.n	800c272 <Motor_SetDuty_Right+0xea>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2200      	movs	r2, #0
 800c266:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
 800c268:	4b0b      	ldr	r3, [pc, #44]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c270:	e007      	b.n	800c282 <Motor_SetDuty_Right+0xfa>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 800c272:	4b09      	ldr	r3, [pc, #36]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2200      	movs	r2, #0
 800c278:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_R_REVERSE( 0 );
 800c27a:	4b07      	ldr	r3, [pc, #28]	; (800c298 <Motor_SetDuty_Right+0x110>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2200      	movs	r2, #0
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c282:	bf00      	nop
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	2001bbca 	.word	0x2001bbca
 800c290:	0a7c5ac5 	.word	0x0a7c5ac5
 800c294:	10624dd3 	.word	0x10624dd3
 800c298:	2001bd44 	.word	0x2001bd44

0800c29c <b_rem>:
 *                int r_size[1]
 * Return Type  : void
 */
void b_rem(const unsigned short x_data[], const int x_size[1], unsigned short
           r_data[], int r_size[1])
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
  int nx;
  int k;
  r_size[0] = (short)x_size[0];
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	b21b      	sxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	601a      	str	r2, [r3, #0]
  nx = (short)x_size[0];
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	b21b      	sxth	r3, r3
 800c2bc:	613b      	str	r3, [r7, #16]
  for (k = 0; k < nx; k++) {
 800c2be:	2300      	movs	r3, #0
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e00f      	b.n	800c2e4 <b_rem+0x48>
    r_data[k] = (unsigned short)(x_data[k] % 32);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	881a      	ldrh	r2, [r3, #0]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	005b      	lsls	r3, r3, #1
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	440b      	add	r3, r1
 800c2d6:	f002 021f 	and.w	r2, r2, #31
 800c2da:	b292      	uxth	r2, r2
 800c2dc:	801a      	strh	r2, [r3, #0]
  for (k = 0; k < nx; k++) {
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	dbeb      	blt.n	800c2c4 <b_rem+0x28>
  }
}
 800c2ec:	bf00      	nop
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800c2fc:	4b17      	ldr	r3, [pc, #92]	; (800c35c <MX_SPI2_Init+0x64>)
 800c2fe:	4a18      	ldr	r2, [pc, #96]	; (800c360 <MX_SPI2_Init+0x68>)
 800c300:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <MX_SPI2_Init+0x64>)
 800c304:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c308:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c30a:	4b14      	ldr	r3, [pc, #80]	; (800c35c <MX_SPI2_Init+0x64>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c310:	4b12      	ldr	r3, [pc, #72]	; (800c35c <MX_SPI2_Init+0x64>)
 800c312:	2200      	movs	r2, #0
 800c314:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800c316:	4b11      	ldr	r3, [pc, #68]	; (800c35c <MX_SPI2_Init+0x64>)
 800c318:	2202      	movs	r2, #2
 800c31a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800c31c:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <MX_SPI2_Init+0x64>)
 800c31e:	2201      	movs	r2, #1
 800c320:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c322:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <MX_SPI2_Init+0x64>)
 800c324:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c328:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <MX_SPI2_Init+0x64>)
 800c32c:	2220      	movs	r2, #32
 800c32e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c330:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <MX_SPI2_Init+0x64>)
 800c332:	2200      	movs	r2, #0
 800c334:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c336:	4b09      	ldr	r3, [pc, #36]	; (800c35c <MX_SPI2_Init+0x64>)
 800c338:	2200      	movs	r2, #0
 800c33a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c33c:	4b07      	ldr	r3, [pc, #28]	; (800c35c <MX_SPI2_Init+0x64>)
 800c33e:	2200      	movs	r2, #0
 800c340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800c342:	4b06      	ldr	r3, [pc, #24]	; (800c35c <MX_SPI2_Init+0x64>)
 800c344:	220a      	movs	r2, #10
 800c346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c348:	4804      	ldr	r0, [pc, #16]	; (800c35c <MX_SPI2_Init+0x64>)
 800c34a:	f7f6 fe77 	bl	800303c <HAL_SPI_Init>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800c354:	f7fa ff06 	bl	8007164 <Error_Handler>
  }

}
 800c358:	bf00      	nop
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	2001bbcc 	.word	0x2001bbcc
 800c360:	40003800 	.word	0x40003800

0800c364 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	; 0x28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c36c:	f107 0314 	add.w	r3, r7, #20
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	605a      	str	r2, [r3, #4]
 800c376:	609a      	str	r2, [r3, #8]
 800c378:	60da      	str	r2, [r3, #12]
 800c37a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a48      	ldr	r2, [pc, #288]	; (800c4a4 <HAL_SPI_MspInit+0x140>)
 800c382:	4293      	cmp	r3, r2
 800c384:	f040 8089 	bne.w	800c49a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c388:	2300      	movs	r3, #0
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	4b46      	ldr	r3, [pc, #280]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	4a45      	ldr	r2, [pc, #276]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c396:	6413      	str	r3, [r2, #64]	; 0x40
 800c398:	4b43      	ldr	r3, [pc, #268]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3a0:	613b      	str	r3, [r7, #16]
 800c3a2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	4b3f      	ldr	r3, [pc, #252]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ac:	4a3e      	ldr	r2, [pc, #248]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c3ae:	f043 0302 	orr.w	r3, r3, #2
 800c3b2:	6313      	str	r3, [r2, #48]	; 0x30
 800c3b4:	4b3c      	ldr	r3, [pc, #240]	; (800c4a8 <HAL_SPI_MspInit+0x144>)
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	f003 0302 	and.w	r3, r3, #2
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c3c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800c3c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c3d2:	2305      	movs	r3, #5
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3d6:	f107 0314 	add.w	r3, r7, #20
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4833      	ldr	r0, [pc, #204]	; (800c4ac <HAL_SPI_MspInit+0x148>)
 800c3de:	f7f6 f877 	bl	80024d0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800c3e2:	4b33      	ldr	r3, [pc, #204]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c3e4:	4a33      	ldr	r2, [pc, #204]	; (800c4b4 <HAL_SPI_MspInit+0x150>)
 800c3e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800c3e8:	4b31      	ldr	r3, [pc, #196]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3ee:	4b30      	ldr	r3, [pc, #192]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3f4:	4b2e      	ldr	r3, [pc, #184]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c3fa:	4b2d      	ldr	r3, [pc, #180]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c3fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c400:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c402:	4b2b      	ldr	r3, [pc, #172]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c404:	2200      	movs	r2, #0
 800c406:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c408:	4b29      	ldr	r3, [pc, #164]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800c40e:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c410:	2200      	movs	r2, #0
 800c412:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800c414:	4b26      	ldr	r3, [pc, #152]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c41a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c41c:	4b24      	ldr	r3, [pc, #144]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c41e:	2200      	movs	r2, #0
 800c420:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c422:	4823      	ldr	r0, [pc, #140]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c424:	f7f5 fc68 	bl	8001cf8 <HAL_DMA_Init>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800c42e:	f7fa fe99 	bl	8007164 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c436:	64da      	str	r2, [r3, #76]	; 0x4c
 800c438:	4a1d      	ldr	r2, [pc, #116]	; (800c4b0 <HAL_SPI_MspInit+0x14c>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800c43e:	4b1e      	ldr	r3, [pc, #120]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c440:	4a1e      	ldr	r2, [pc, #120]	; (800c4bc <HAL_SPI_MspInit+0x158>)
 800c442:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800c444:	4b1c      	ldr	r3, [pc, #112]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c446:	2200      	movs	r2, #0
 800c448:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c44a:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c44c:	2240      	movs	r2, #64	; 0x40
 800c44e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c450:	4b19      	ldr	r3, [pc, #100]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c452:	2200      	movs	r2, #0
 800c454:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c456:	4b18      	ldr	r3, [pc, #96]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c45c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c45e:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c460:	2200      	movs	r2, #0
 800c462:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c464:	4b14      	ldr	r3, [pc, #80]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c466:	2200      	movs	r2, #0
 800c468:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c46c:	2200      	movs	r2, #0
 800c46e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800c470:	4b11      	ldr	r3, [pc, #68]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c476:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c478:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800c47e:	480e      	ldr	r0, [pc, #56]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c480:	f7f5 fc3a 	bl	8001cf8 <HAL_DMA_Init>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800c48a:	f7fa fe6b 	bl	8007164 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a09      	ldr	r2, [pc, #36]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c492:	649a      	str	r2, [r3, #72]	; 0x48
 800c494:	4a08      	ldr	r2, [pc, #32]	; (800c4b8 <HAL_SPI_MspInit+0x154>)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c49a:	bf00      	nop
 800c49c:	3728      	adds	r7, #40	; 0x28
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	40003800 	.word	0x40003800
 800c4a8:	40023800 	.word	0x40023800
 800c4ac:	40020400 	.word	0x40020400
 800c4b0:	2001bc24 	.word	0x2001bc24
 800c4b4:	40026058 	.word	0x40026058
 800c4b8:	2001bc84 	.word	0x2001bc84
 800c4bc:	40026070 	.word	0x40026070

0800c4c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	4b10      	ldr	r3, [pc, #64]	; (800c50c <HAL_MspInit+0x4c>)
 800c4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ce:	4a0f      	ldr	r2, [pc, #60]	; (800c50c <HAL_MspInit+0x4c>)
 800c4d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4d4:	6453      	str	r3, [r2, #68]	; 0x44
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <HAL_MspInit+0x4c>)
 800c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4de:	607b      	str	r3, [r7, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	4b09      	ldr	r3, [pc, #36]	; (800c50c <HAL_MspInit+0x4c>)
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	4a08      	ldr	r2, [pc, #32]	; (800c50c <HAL_MspInit+0x4c>)
 800c4ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4f0:	6413      	str	r3, [r2, #64]	; 0x40
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <HAL_MspInit+0x4c>)
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4fa:	603b      	str	r3, [r7, #0]
 800c4fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4fe:	bf00      	nop
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	40023800 	.word	0x40023800

0800c510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c510:	b480      	push	{r7}
 800c512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c514:	bf00      	nop
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c51e:	b480      	push	{r7}
 800c520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c522:	e7fe      	b.n	800c522 <HardFault_Handler+0x4>

0800c524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c524:	b480      	push	{r7}
 800c526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c528:	e7fe      	b.n	800c528 <MemManage_Handler+0x4>

0800c52a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c52a:	b480      	push	{r7}
 800c52c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c52e:	e7fe      	b.n	800c52e <BusFault_Handler+0x4>

0800c530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c534:	e7fe      	b.n	800c534 <UsageFault_Handler+0x4>

0800c536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c536:	b480      	push	{r7}
 800c538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c53a:	bf00      	nop
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c548:	bf00      	nop
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c552:	b480      	push	{r7}
 800c554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c556:	bf00      	nop
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c564:	f7f4 fe98 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c568:	bf00      	nop
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800c570:	4802      	ldr	r0, [pc, #8]	; (800c57c <DMA1_Stream3_IRQHandler+0x10>)
 800c572:	f7f5 fcf1 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800c576:	bf00      	nop
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2001bc24 	.word	0x2001bc24

0800c580 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800c584:	4802      	ldr	r0, [pc, #8]	; (800c590 <DMA1_Stream4_IRQHandler+0x10>)
 800c586:	f7f5 fce7 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800c58a:	bf00      	nop
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	2001bc84 	.word	0x2001bc84

0800c594 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c598:	4805      	ldr	r0, [pc, #20]	; (800c5b0 <TIM6_DAC_IRQHandler+0x1c>)
 800c59a:	f7f7 feec 	bl	8004376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  Interrupt_PreProcess();
 800c59e:	f7fa f94b 	bl	8006838 <Interrupt_PreProcess>
  Interrupt_Main();
 800c5a2:	f7fa f8a5 	bl	80066f0 <Interrupt_Main>
  Interrupt_PostProcess();
 800c5a6:	f7fa f973 	bl	8006890 <Interrupt_PostProcess>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c5aa:	bf00      	nop
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	2001be48 	.word	0x2001be48

0800c5b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c5b8:	4802      	ldr	r0, [pc, #8]	; (800c5c4 <DMA2_Stream0_IRQHandler+0x10>)
 800c5ba:	f7f5 fccd 	bl	8001f58 <HAL_DMA_IRQHandler>
//	  ADC1_DMA2_TransferComplete_Callback();//DMA完了時の割り込み処理
//  }


  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800c5be:	bf00      	nop
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2001b364 	.word	0x2001b364

0800c5c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800c5cc:	4802      	ldr	r0, [pc, #8]	; (800c5d8 <DMA2_Stream1_IRQHandler+0x10>)
 800c5ce:	f7f5 fcc3 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800c5d2:	bf00      	nop
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	2001bce4 	.word	0x2001bce4

0800c5dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800c5e0:	4802      	ldr	r0, [pc, #8]	; (800c5ec <DMA2_Stream2_IRQHandler+0x10>)
 800c5e2:	f7f5 fcb9 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800c5e6:	bf00      	nop
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	2001bd8c 	.word	0x2001bd8c

0800c5f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	617b      	str	r3, [r7, #20]
 800c600:	e00a      	b.n	800c618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c602:	f7f9 facf 	bl	8005ba4 <__io_getchar>
 800c606:	4601      	mov	r1, r0
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	60ba      	str	r2, [r7, #8]
 800c60e:	b2ca      	uxtb	r2, r1
 800c610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	3301      	adds	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	dbf0      	blt.n	800c602 <_read+0x12>
	}

return len;
 800c620:	687b      	ldr	r3, [r7, #4]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b086      	sub	sp, #24
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]
 800c63a:	e009      	b.n	800c650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	60ba      	str	r2, [r7, #8]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	4618      	mov	r0, r3
 800c646:	f7f9 fa9b 	bl	8005b80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	3301      	adds	r3, #1
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	dbf1      	blt.n	800c63c <_write+0x12>
	}
	return len;
 800c658:	687b      	ldr	r3, [r7, #4]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_close>:

int _close(int file)
{
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
	return -1;
 800c66a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c68a:	605a      	str	r2, [r3, #4]
	return 0;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <_isatty>:

int _isatty(int file)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
	return 1;
 800c6a2:	2301      	movs	r3, #1
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
	return 0;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c6d4:	4b11      	ldr	r3, [pc, #68]	; (800c71c <_sbrk+0x50>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <_sbrk+0x16>
		heap_end = &end;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <_sbrk+0x50>)
 800c6de:	4a10      	ldr	r2, [pc, #64]	; (800c720 <_sbrk+0x54>)
 800c6e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c6e2:	4b0e      	ldr	r3, [pc, #56]	; (800c71c <_sbrk+0x50>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	; (800c71c <_sbrk+0x50>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	466a      	mov	r2, sp
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d907      	bls.n	800c706 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c6f6:	f001 ff33 	bl	800e560 <__errno>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	e006      	b.n	800c714 <_sbrk+0x48>
	}

	heap_end += incr;
 800c706:	4b05      	ldr	r3, [pc, #20]	; (800c71c <_sbrk+0x50>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	4a03      	ldr	r2, [pc, #12]	; (800c71c <_sbrk+0x50>)
 800c710:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c712:	68fb      	ldr	r3, [r7, #12]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	2001b26c 	.word	0x2001b26c
 800c720:	2001bf60 	.word	0x2001bf60

0800c724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c724:	b480      	push	{r7}
 800c726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <SystemInit+0x60>)
 800c72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c72e:	4a15      	ldr	r2, [pc, #84]	; (800c784 <SystemInit+0x60>)
 800c730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c738:	4b13      	ldr	r3, [pc, #76]	; (800c788 <SystemInit+0x64>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a12      	ldr	r2, [pc, #72]	; (800c788 <SystemInit+0x64>)
 800c73e:	f043 0301 	orr.w	r3, r3, #1
 800c742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c744:	4b10      	ldr	r3, [pc, #64]	; (800c788 <SystemInit+0x64>)
 800c746:	2200      	movs	r2, #0
 800c748:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <SystemInit+0x64>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a0e      	ldr	r2, [pc, #56]	; (800c788 <SystemInit+0x64>)
 800c750:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c758:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c75a:	4b0b      	ldr	r3, [pc, #44]	; (800c788 <SystemInit+0x64>)
 800c75c:	4a0b      	ldr	r2, [pc, #44]	; (800c78c <SystemInit+0x68>)
 800c75e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c760:	4b09      	ldr	r3, [pc, #36]	; (800c788 <SystemInit+0x64>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a08      	ldr	r2, [pc, #32]	; (800c788 <SystemInit+0x64>)
 800c766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c76a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c76c:	4b06      	ldr	r3, [pc, #24]	; (800c788 <SystemInit+0x64>)
 800c76e:	2200      	movs	r2, #0
 800c770:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c772:	4b04      	ldr	r3, [pc, #16]	; (800c784 <SystemInit+0x60>)
 800c774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c778:	609a      	str	r2, [r3, #8]
#endif
}
 800c77a:	bf00      	nop
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr
 800c784:	e000ed00 	.word	0xe000ed00
 800c788:	40023800 	.word	0x40023800
 800c78c:	24003010 	.word	0x24003010

0800c790 <real_distance_m_calc>:

/* memo:並進方向移動距離更新(1msタスク)
 * param
 */
void real_distance_m_calc (void)
{
 800c790:	b5b0      	push	{r4, r5, r7, lr}
 800c792:	af00      	add	r7, sp, #0
	real_distance_m += g_ave_speed_m * 0.001; // [m/s] * [s]
 800c794:	4b12      	ldr	r3, [pc, #72]	; (800c7e0 <real_distance_m_calc+0x50>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f3 fefd 	bl	8000598 <__aeabi_f2d>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <real_distance_m_calc+0x54>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7f3 fef6 	bl	8000598 <__aeabi_f2d>
 800c7ac:	a30a      	add	r3, pc, #40	; (adr r3, 800c7d8 <real_distance_m_calc+0x48>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	f7f3 ff49 	bl	8000648 <__aeabi_dmul>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7f3 fd8d 	bl	80002dc <__adddf3>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	f7f4 fa35 	bl	8000c38 <__aeabi_d2f>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	4b03      	ldr	r3, [pc, #12]	; (800c7e0 <real_distance_m_calc+0x50>)
 800c7d2:	601a      	str	r2, [r3, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7d8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c7dc:	3f50624d 	.word	0x3f50624d
 800c7e0:	2001b29c 	.word	0x2001b29c
 800c7e4:	20000240 	.word	0x20000240

0800c7e8 <real_distance_w_calc>:

/* memo:回転方向移動角度取得(1msタスク)
 * param
 */
void real_distance_w_calc (void)
{
 800c7e8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ea:	af00      	add	r7, sp, #0
	real_distance_w += IMU_GetGyro_Z() * 0.001; // [rad/s] * [s]
 800c7ec:	f7f9 ff54 	bl	8006698 <IMU_GetGyro_Z>
 800c7f0:	ee10 3a10 	vmov	r3, s0
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7f3 fecf 	bl	8000598 <__aeabi_f2d>
 800c7fa:	a310      	add	r3, pc, #64	; (adr r3, 800c83c <real_distance_w_calc+0x54>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 ff22 	bl	8000648 <__aeabi_dmul>
 800c804:	4603      	mov	r3, r0
 800c806:	460c      	mov	r4, r1
 800c808:	4625      	mov	r5, r4
 800c80a:	461c      	mov	r4, r3
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <real_distance_w_calc+0x50>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4618      	mov	r0, r3
 800c812:	f7f3 fec1 	bl	8000598 <__aeabi_f2d>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7f3 fd5d 	bl	80002dc <__adddf3>
 800c822:	4603      	mov	r3, r0
 800c824:	460c      	mov	r4, r1
 800c826:	4618      	mov	r0, r3
 800c828:	4621      	mov	r1, r4
 800c82a:	f7f4 fa05 	bl	8000c38 <__aeabi_d2f>
 800c82e:	4602      	mov	r2, r0
 800c830:	4b01      	ldr	r3, [pc, #4]	; (800c838 <real_distance_w_calc+0x50>)
 800c832:	601a      	str	r2, [r3, #0]
}
 800c834:	bf00      	nop
 800c836:	bdb0      	pop	{r4, r5, r7, pc}
 800c838:	2001b2a0 	.word	0x2001b2a0
 800c83c:	d2f1a9fc 	.word	0xd2f1a9fc
 800c840:	3f50624d 	.word	0x3f50624d
 800c844:	00000000 	.word	0x00000000

0800c848 <target_speed_inc>:
/* memo:目標速度更新処理(1msタスク)
 * 現在目標速度に1ms*加速度を加算し、加速、回転モードごとにリミット処理
 * param:
 *  * */
void target_speed_inc(void)
{
 800c848:	b5b0      	push	{r4, r5, r7, lr}
 800c84a:	af00      	add	r7, sp, #0

	/*m加速処理*/
	target_speed_m += g_accelation_m * 0.001; //1ms分の加速度加算
 800c84c:	4b82      	ldr	r3, [pc, #520]	; (800ca58 <target_speed_inc+0x210>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4618      	mov	r0, r3
 800c852:	f7f3 fea1 	bl	8000598 <__aeabi_f2d>
 800c856:	4604      	mov	r4, r0
 800c858:	460d      	mov	r5, r1
 800c85a:	4b80      	ldr	r3, [pc, #512]	; (800ca5c <target_speed_inc+0x214>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f3 fe9a 	bl	8000598 <__aeabi_f2d>
 800c864:	a37a      	add	r3, pc, #488	; (adr r3, 800ca50 <target_speed_inc+0x208>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 feed 	bl	8000648 <__aeabi_dmul>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4620      	mov	r0, r4
 800c874:	4629      	mov	r1, r5
 800c876:	f7f3 fd31 	bl	80002dc <__adddf3>
 800c87a:	4603      	mov	r3, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	4618      	mov	r0, r3
 800c880:	4621      	mov	r1, r4
 800c882:	f7f4 f9d9 	bl	8000c38 <__aeabi_d2f>
 800c886:	4602      	mov	r2, r0
 800c888:	4b73      	ldr	r3, [pc, #460]	; (800ca58 <target_speed_inc+0x210>)
 800c88a:	601a      	str	r2, [r3, #0]
	target_speed_w += g_accelation_w * 0.001; //1ms分の角加速度加算
 800c88c:	4b74      	ldr	r3, [pc, #464]	; (800ca60 <target_speed_inc+0x218>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	f7f3 fe81 	bl	8000598 <__aeabi_f2d>
 800c896:	4604      	mov	r4, r0
 800c898:	460d      	mov	r5, r1
 800c89a:	4b72      	ldr	r3, [pc, #456]	; (800ca64 <target_speed_inc+0x21c>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f3 fe7a 	bl	8000598 <__aeabi_f2d>
 800c8a4:	a36a      	add	r3, pc, #424	; (adr r3, 800ca50 <target_speed_inc+0x208>)
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	f7f3 fecd 	bl	8000648 <__aeabi_dmul>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	f7f3 fd11 	bl	80002dc <__adddf3>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	460c      	mov	r4, r1
 800c8be:	4618      	mov	r0, r3
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	f7f4 f9b9 	bl	8000c38 <__aeabi_d2f>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	4b65      	ldr	r3, [pc, #404]	; (800ca60 <target_speed_inc+0x218>)
 800c8ca:	601a      	str	r2, [r3, #0]

	/*limit処理*/
	switch(move_dir_flg)
 800c8cc:	4b66      	ldr	r3, [pc, #408]	; (800ca68 <target_speed_inc+0x220>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <target_speed_inc+0x92>
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d01c      	beq.n	800c912 <target_speed_inc+0xca>
 800c8d8:	e037      	b.n	800c94a <target_speed_inc+0x102>
	{
		case forward_mode:

			if (target_speed_m < 0)	//m 下限スピード処理
 800c8da:	4b5f      	ldr	r3, [pc, #380]	; (800ca58 <target_speed_inc+0x210>)
 800c8dc:	edd3 7a00 	vldr	s15, [r3]
 800c8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e8:	d504      	bpl.n	800c8f4 <target_speed_inc+0xac>
					{
						target_speed_m = 0;
 800c8ea:	4b5b      	ldr	r3, [pc, #364]	; (800ca58 <target_speed_inc+0x210>)
 800c8ec:	f04f 0200 	mov.w	r2, #0
 800c8f0:	601a      	str	r2, [r3, #0]
					}
					else if (target_speed_m > speed_m_max)//上限スピード処理
					{
						target_speed_m = speed_m_max;
					}
			break;
 800c8f2:	e02a      	b.n	800c94a <target_speed_inc+0x102>
					else if (target_speed_m > speed_m_max)//上限スピード処理
 800c8f4:	4b58      	ldr	r3, [pc, #352]	; (800ca58 <target_speed_inc+0x210>)
 800c8f6:	edd3 7a00 	vldr	s15, [r3]
 800c8fa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800ca6c <target_speed_inc+0x224>
 800c8fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c906:	dc00      	bgt.n	800c90a <target_speed_inc+0xc2>
			break;
 800c908:	e01f      	b.n	800c94a <target_speed_inc+0x102>
						target_speed_m = speed_m_max;
 800c90a:	4b53      	ldr	r3, [pc, #332]	; (800ca58 <target_speed_inc+0x210>)
 800c90c:	4a58      	ldr	r2, [pc, #352]	; (800ca70 <target_speed_inc+0x228>)
 800c90e:	601a      	str	r2, [r3, #0]
			break;
 800c910:	e01b      	b.n	800c94a <target_speed_inc+0x102>

		case backward_mode:
			if (target_speed_m > 0)	//m 上限スピード処理
 800c912:	4b51      	ldr	r3, [pc, #324]	; (800ca58 <target_speed_inc+0x210>)
 800c914:	edd3 7a00 	vldr	s15, [r3]
 800c918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c920:	dd04      	ble.n	800c92c <target_speed_inc+0xe4>
				{
					target_speed_m = 0;
 800c922:	4b4d      	ldr	r3, [pc, #308]	; (800ca58 <target_speed_inc+0x210>)
 800c924:	f04f 0200 	mov.w	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
				}
				else if (target_speed_m < -1 * speed_m_max)//下限スピード処理
				{
					target_speed_m = -1 * speed_m_max;
				}
			break;
 800c92a:	e00d      	b.n	800c948 <target_speed_inc+0x100>
				else if (target_speed_m < -1 * speed_m_max)//下限スピード処理
 800c92c:	4b4a      	ldr	r3, [pc, #296]	; (800ca58 <target_speed_inc+0x210>)
 800c92e:	edd3 7a00 	vldr	s15, [r3]
 800c932:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800ca74 <target_speed_inc+0x22c>
 800c936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93e:	d400      	bmi.n	800c942 <target_speed_inc+0xfa>
			break;
 800c940:	e002      	b.n	800c948 <target_speed_inc+0x100>
					target_speed_m = -1 * speed_m_max;
 800c942:	4b45      	ldr	r3, [pc, #276]	; (800ca58 <target_speed_inc+0x210>)
 800c944:	4a4c      	ldr	r2, [pc, #304]	; (800ca78 <target_speed_inc+0x230>)
 800c946:	601a      	str	r2, [r3, #0]
			break;
 800c948:	bf00      	nop
	}

	switch(rotation_dir_flg)
 800c94a:	4b4c      	ldr	r3, [pc, #304]	; (800ca7c <target_speed_inc+0x234>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <target_speed_inc+0x110>
 800c952:	2b01      	cmp	r3, #1
 800c954:	d01c      	beq.n	800c990 <target_speed_inc+0x148>
 800c956:	e037      	b.n	800c9c8 <target_speed_inc+0x180>
		{
			case counter_clockwise:

				if (target_speed_w < 0)	//m 下限スピード処理
 800c958:	4b41      	ldr	r3, [pc, #260]	; (800ca60 <target_speed_inc+0x218>)
 800c95a:	edd3 7a00 	vldr	s15, [r3]
 800c95e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c966:	d504      	bpl.n	800c972 <target_speed_inc+0x12a>
						{
							target_speed_w = 0;
 800c968:	4b3d      	ldr	r3, [pc, #244]	; (800ca60 <target_speed_inc+0x218>)
 800c96a:	f04f 0200 	mov.w	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
						}
						else if (target_speed_w > speed_w_max)//上限スピード処理
						{
							target_speed_w = speed_w_max;
						}
				break;
 800c970:	e02a      	b.n	800c9c8 <target_speed_inc+0x180>
						else if (target_speed_w > speed_w_max)//上限スピード処理
 800c972:	4b3b      	ldr	r3, [pc, #236]	; (800ca60 <target_speed_inc+0x218>)
 800c974:	edd3 7a00 	vldr	s15, [r3]
 800c978:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ca80 <target_speed_inc+0x238>
 800c97c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c984:	dc00      	bgt.n	800c988 <target_speed_inc+0x140>
				break;
 800c986:	e01f      	b.n	800c9c8 <target_speed_inc+0x180>
							target_speed_w = speed_w_max;
 800c988:	4b35      	ldr	r3, [pc, #212]	; (800ca60 <target_speed_inc+0x218>)
 800c98a:	4a3e      	ldr	r2, [pc, #248]	; (800ca84 <target_speed_inc+0x23c>)
 800c98c:	601a      	str	r2, [r3, #0]
				break;
 800c98e:	e01b      	b.n	800c9c8 <target_speed_inc+0x180>

			case clockwise:
				if (target_speed_w > 0)	//m 上限スピード処理
 800c990:	4b33      	ldr	r3, [pc, #204]	; (800ca60 <target_speed_inc+0x218>)
 800c992:	edd3 7a00 	vldr	s15, [r3]
 800c996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99e:	dd04      	ble.n	800c9aa <target_speed_inc+0x162>
					{
						target_speed_w = 0;
 800c9a0:	4b2f      	ldr	r3, [pc, #188]	; (800ca60 <target_speed_inc+0x218>)
 800c9a2:	f04f 0200 	mov.w	r2, #0
 800c9a6:	601a      	str	r2, [r3, #0]
					}
					else if (target_speed_w < -1 * speed_w_max)//下限スピード処理
					{
						target_speed_w = -1 * speed_w_max;
					}
				break;
 800c9a8:	e00d      	b.n	800c9c6 <target_speed_inc+0x17e>
					else if (target_speed_w < -1 * speed_w_max)//下限スピード処理
 800c9aa:	4b2d      	ldr	r3, [pc, #180]	; (800ca60 <target_speed_inc+0x218>)
 800c9ac:	edd3 7a00 	vldr	s15, [r3]
 800c9b0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ca88 <target_speed_inc+0x240>
 800c9b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9bc:	d400      	bmi.n	800c9c0 <target_speed_inc+0x178>
				break;
 800c9be:	e002      	b.n	800c9c6 <target_speed_inc+0x17e>
						target_speed_w = -1 * speed_w_max;
 800c9c0:	4b27      	ldr	r3, [pc, #156]	; (800ca60 <target_speed_inc+0x218>)
 800c9c2:	4a32      	ldr	r2, [pc, #200]	; (800ca8c <target_speed_inc+0x244>)
 800c9c4:	601a      	str	r2, [r3, #0]
				break;
 800c9c6:	bf00      	nop
		}


	/*m移動距離、角度算出*/
	ideal_distance_m += target_speed_m * 0.001;
 800c9c8:	4b31      	ldr	r3, [pc, #196]	; (800ca90 <target_speed_inc+0x248>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f3 fde3 	bl	8000598 <__aeabi_f2d>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	4b20      	ldr	r3, [pc, #128]	; (800ca58 <target_speed_inc+0x210>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f3 fddc 	bl	8000598 <__aeabi_f2d>
 800c9e0:	a31b      	add	r3, pc, #108	; (adr r3, 800ca50 <target_speed_inc+0x208>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fe2f 	bl	8000648 <__aeabi_dmul>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7f3 fc73 	bl	80002dc <__adddf3>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	f7f4 f91b 	bl	8000c38 <__aeabi_d2f>
 800ca02:	4602      	mov	r2, r0
 800ca04:	4b22      	ldr	r3, [pc, #136]	; (800ca90 <target_speed_inc+0x248>)
 800ca06:	601a      	str	r2, [r3, #0]
	ideal_distance_w += target_speed_w * 0.001;
 800ca08:	4b22      	ldr	r3, [pc, #136]	; (800ca94 <target_speed_inc+0x24c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7f3 fdc3 	bl	8000598 <__aeabi_f2d>
 800ca12:	4604      	mov	r4, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <target_speed_inc+0x218>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f3 fdbc 	bl	8000598 <__aeabi_f2d>
 800ca20:	a30b      	add	r3, pc, #44	; (adr r3, 800ca50 <target_speed_inc+0x208>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7f3 fe0f 	bl	8000648 <__aeabi_dmul>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4620      	mov	r0, r4
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f3 fc53 	bl	80002dc <__adddf3>
 800ca36:	4603      	mov	r3, r0
 800ca38:	460c      	mov	r4, r1
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	f7f4 f8fb 	bl	8000c38 <__aeabi_d2f>
 800ca42:	4602      	mov	r2, r0
 800ca44:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <target_speed_inc+0x24c>)
 800ca46:	601a      	str	r2, [r3, #0]


}
 800ca48:	bf00      	nop
 800ca4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca4c:	f3af 8000 	nop.w
 800ca50:	d2f1a9fc 	.word	0xd2f1a9fc
 800ca54:	3f50624d 	.word	0x3f50624d
 800ca58:	2001b270 	.word	0x2001b270
 800ca5c:	2001b27c 	.word	0x2001b27c
 800ca60:	2001b278 	.word	0x2001b278
 800ca64:	2001b280 	.word	0x2001b280
 800ca68:	2001b2a4 	.word	0x2001b2a4
 800ca6c:	3e99999a 	.word	0x3e99999a
 800ca70:	3e99999a 	.word	0x3e99999a
 800ca74:	be99999a 	.word	0xbe99999a
 800ca78:	be99999a 	.word	0xbe99999a
 800ca7c:	2001b2a5 	.word	0x2001b2a5
 800ca80:	40c90fda 	.word	0x40c90fda
 800ca84:	40c90fda 	.word	0x40c90fda
 800ca88:	c0c90fda 	.word	0xc0c90fda
 800ca8c:	c0c90fda 	.word	0xc0c90fda
 800ca90:	2001b28c 	.word	0x2001b28c
 800ca94:	2001b290 	.word	0x2001b290

0800ca98 <target_speed_m_calc>:
/* memo:加速度更新(1msタスク)
 * 現在移動距離と目標移動距離に応じて、加速度をスイッチ
 * param:
 *  * */
void target_speed_m_calc(void)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
	float l_target_distance_m = 0;		//m 目標距離(ローカル) [m]
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
	float l_accelation_m = 0; 			//m 目標加速度（ローカル) [m/s^2]
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]
	float l_speed_m = 0;				//m 目標速度(ローカル)[m/s]
 800caaa:	f04f 0300 	mov.w	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]
	float l_speed_m_fin= 0;				//m 目標終端速度(ローカル)[m/s]
 800cab0:	f04f 0300 	mov.w	r3, #0
 800cab4:	60bb      	str	r3, [r7, #8]
	float l_distance_m = 0;				//m 現在移動距離[m]
 800cab6:	f04f 0300 	mov.w	r3, #0
 800caba:	607b      	str	r3, [r7, #4]
	float l_deccel_distance_m = 0;		//m 減速開始距離[m]
 800cabc:	f04f 0300 	mov.w	r3, #0
 800cac0:	603b      	str	r3, [r7, #0]

	/*m グローバル変数参照*/
	l_speed_m = target_speed_m;									//m 目標並進速度で制御
 800cac2:	4b41      	ldr	r3, [pc, #260]	; (800cbc8 <target_speed_m_calc+0x130>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]
	l_speed_m_fin = target_speed_m_fin;							//m 目標距離到達時の目標速度
 800cac8:	4b40      	ldr	r3, [pc, #256]	; (800cbcc <target_speed_m_calc+0x134>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	60bb      	str	r3, [r7, #8]
	l_distance_m = 	ideal_distance_m;							//m 理想移動距離で制御
 800cace:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <target_speed_m_calc+0x138>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	607b      	str	r3, [r7, #4]
	l_target_distance_m = target_distance_m;					//m 目標並進距離
 800cad4:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <target_speed_m_calc+0x13c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	613b      	str	r3, [r7, #16]


	switch(accel_dir_flg)
 800cada:	4b3f      	ldr	r3, [pc, #252]	; (800cbd8 <target_speed_m_calc+0x140>)
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <target_speed_m_calc+0x50>
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d00f      	beq.n	800cb06 <target_speed_m_calc+0x6e>
 800cae6:	e066      	b.n	800cbb6 <target_speed_m_calc+0x11e>
	{
		case acceleration: //m 加速モード時、常に加速(リミットに引っ掛かり続ける)
			switch(move_dir_flg)
 800cae8:	4b3c      	ldr	r3, [pc, #240]	; (800cbdc <target_speed_m_calc+0x144>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <target_speed_m_calc+0x5e>
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d004      	beq.n	800cafe <target_speed_m_calc+0x66>
				break;
			case backward_mode:
				l_accelation_m = -1 * accelation_m;
				break;
			}
			break;
 800caf4:	e05f      	b.n	800cbb6 <target_speed_m_calc+0x11e>
				l_accelation_m = 1 * accelation_m;
 800caf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cafa:	617b      	str	r3, [r7, #20]
				break;
 800cafc:	e002      	b.n	800cb04 <target_speed_m_calc+0x6c>
				l_accelation_m = -1 * accelation_m;
 800cafe:	4b38      	ldr	r3, [pc, #224]	; (800cbe0 <target_speed_m_calc+0x148>)
 800cb00:	617b      	str	r3, [r7, #20]
				break;
 800cb02:	bf00      	nop
			break;
 800cb04:	e057      	b.n	800cbb6 <target_speed_m_calc+0x11e>

		case deceleration:
			switch(move_dir_flg)
 800cb06:	4b35      	ldr	r3, [pc, #212]	; (800cbdc <target_speed_m_calc+0x144>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <target_speed_m_calc+0x7c>
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d028      	beq.n	800cb64 <target_speed_m_calc+0xcc>
				else{																	//m加速開始後
					l_accelation_m = 1 * accelation_m;
				}
				break;
			}
			break;
 800cb12:	e04f      	b.n	800cbb4 <target_speed_m_calc+0x11c>
				l_deccel_distance_m = ((l_speed_m*l_speed_m)-(l_speed_m_fin*l_speed_m_fin)) / (2*accelation_m);
 800cb14:	ed97 7a03 	vldr	s14, [r7, #12]
 800cb18:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb20:	edd7 6a02 	vldr	s13, [r7, #8]
 800cb24:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb30:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cb34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb38:	edc7 7a00 	vstr	s15, [r7]
				if(l_distance_m < (l_target_distance_m - l_deccel_distance_m)){			//m減速開始前
 800cb3c:	ed97 7a04 	vldr	s14, [r7, #16]
 800cb40:	edd7 7a00 	vldr	s15, [r7]
 800cb44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb48:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb54:	d503      	bpl.n	800cb5e <target_speed_m_calc+0xc6>
					l_accelation_m =  1 * accelation_m; //mリミットにかかるまで加速
 800cb56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb5a:	617b      	str	r3, [r7, #20]
				break;
 800cb5c:	e02a      	b.n	800cbb4 <target_speed_m_calc+0x11c>
					l_accelation_m = -1 * accelation_m;
 800cb5e:	4b20      	ldr	r3, [pc, #128]	; (800cbe0 <target_speed_m_calc+0x148>)
 800cb60:	617b      	str	r3, [r7, #20]
				break;
 800cb62:	e027      	b.n	800cbb4 <target_speed_m_calc+0x11c>
				l_deccel_distance_m = ((l_speed_m*l_speed_m)-(l_speed_m_fin*l_speed_m_fin)) / (2*accelation_m);
 800cb64:	ed97 7a03 	vldr	s14, [r7, #12]
 800cb68:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb70:	edd7 6a02 	vldr	s13, [r7, #8]
 800cb74:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb80:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cb84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb88:	edc7 7a00 	vstr	s15, [r7]
				if(l_distance_m > (l_target_distance_m + l_deccel_distance_m)){			//m加速開始前
 800cb8c:	ed97 7a04 	vldr	s14, [r7, #16]
 800cb90:	edd7 7a00 	vldr	s15, [r7]
 800cb94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb98:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba4:	dd02      	ble.n	800cbac <target_speed_m_calc+0x114>
					l_accelation_m = -1 * accelation_m; //mリミットにかかるまで減速
 800cba6:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <target_speed_m_calc+0x148>)
 800cba8:	617b      	str	r3, [r7, #20]
				break;
 800cbaa:	e002      	b.n	800cbb2 <target_speed_m_calc+0x11a>
					l_accelation_m = 1 * accelation_m;
 800cbac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbb0:	617b      	str	r3, [r7, #20]
				break;
 800cbb2:	bf00      	nop
			break;
 800cbb4:	bf00      	nop
	}

	/*m グローバル変数に出力*/

	g_accelation_m = l_accelation_m;
 800cbb6:	4a0b      	ldr	r2, [pc, #44]	; (800cbe4 <target_speed_m_calc+0x14c>)
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	6013      	str	r3, [r2, #0]

}
 800cbbc:	bf00      	nop
 800cbbe:	371c      	adds	r7, #28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	2001b270 	.word	0x2001b270
 800cbcc:	2001b274 	.word	0x2001b274
 800cbd0:	2001b28c 	.word	0x2001b28c
 800cbd4:	2001b284 	.word	0x2001b284
 800cbd8:	2001b2a6 	.word	0x2001b2a6
 800cbdc:	2001b2a4 	.word	0x2001b2a4
 800cbe0:	bfc00000 	.word	0xbfc00000
 800cbe4:	2001b27c 	.word	0x2001b27c

0800cbe8 <target_speed_w_calc>:
/* memo:角加速度更新(1msタスク)
 * 現在角度と目標角度に応じて、角加速度をスイッチ
 * param:
 *  * */
void target_speed_w_calc(void)
{
 800cbe8:	b5b0      	push	{r4, r5, r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
	float l_target_distance_w = 0;		//m目標角度(ローカル) [rad]
 800cbee:	f04f 0300 	mov.w	r3, #0
 800cbf2:	613b      	str	r3, [r7, #16]
	float l_accelation_w = 0; 			//m目標角加速度（ローカル) [rad/s^2]
 800cbf4:	f04f 0300 	mov.w	r3, #0
 800cbf8:	617b      	str	r3, [r7, #20]
	float l_speed_w = 0;				//m現在角速度(ローカル)[rad/s]
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	60fb      	str	r3, [r7, #12]
	float l_distance_w = 0;				//m現在角度[rad]
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	60bb      	str	r3, [r7, #8]
	float l_deccel_distance_w = 0;		//m減速開始角度[rad]
 800cc06:	f04f 0300 	mov.w	r3, #0
 800cc0a:	607b      	str	r3, [r7, #4]

	/*mグローバル変数参照*/
	l_speed_w = target_speed_w;									//m目標並進速度で制御
 800cc0c:	4b46      	ldr	r3, [pc, #280]	; (800cd28 <target_speed_w_calc+0x140>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60fb      	str	r3, [r7, #12]
	l_distance_w = 	ideal_distance_w;							//m理想移動距離で制御
 800cc12:	4b46      	ldr	r3, [pc, #280]	; (800cd2c <target_speed_w_calc+0x144>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	60bb      	str	r3, [r7, #8]
	l_target_distance_w = target_distance_w;					//m目標角度
 800cc18:	4b45      	ldr	r3, [pc, #276]	; (800cd30 <target_speed_w_calc+0x148>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	613b      	str	r3, [r7, #16]

	switch(rotation_dir_flg)
 800cc1e:	4b45      	ldr	r3, [pc, #276]	; (800cd34 <target_speed_w_calc+0x14c>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <target_speed_w_calc+0x44>
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d039      	beq.n	800cc9e <target_speed_w_calc+0xb6>
 800cc2a:	e071      	b.n	800cd10 <target_speed_w_calc+0x128>
	{
	case counter_clockwise:
		/*m減速に必要な角度算出*/
		l_deccel_distance_w = 0.5 * l_speed_w * l_speed_w / accelation_w;
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7f3 fcb3 	bl	8000598 <__aeabi_f2d>
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	4b40      	ldr	r3, [pc, #256]	; (800cd38 <target_speed_w_calc+0x150>)
 800cc38:	f7f3 fd06 	bl	8000648 <__aeabi_dmul>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	4625      	mov	r5, r4
 800cc42:	461c      	mov	r4, r3
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f7f3 fca7 	bl	8000598 <__aeabi_f2d>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 fcf9 	bl	8000648 <__aeabi_dmul>
 800cc56:	4603      	mov	r3, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	a330      	add	r3, pc, #192	; (adr r3, 800cd20 <target_speed_w_calc+0x138>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fe1a 	bl	800089c <__aeabi_ddiv>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	4621      	mov	r1, r4
 800cc70:	f7f3 ffe2 	bl	8000c38 <__aeabi_d2f>
 800cc74:	4603      	mov	r3, r0
 800cc76:	607b      	str	r3, [r7, #4]

		if(l_distance_w < (l_target_distance_w - l_deccel_distance_w)){			//m減速開始前
 800cc78:	ed97 7a04 	vldr	s14, [r7, #16]
 800cc7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc84:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc90:	d502      	bpl.n	800cc98 <target_speed_w_calc+0xb0>
			l_accelation_w =  1 * accelation_w;
 800cc92:	4b2a      	ldr	r3, [pc, #168]	; (800cd3c <target_speed_w_calc+0x154>)
 800cc94:	617b      	str	r3, [r7, #20]
		}
		else{																	//m減速開始後
			l_accelation_w = -1 * accelation_w;
		}
		break;
 800cc96:	e03b      	b.n	800cd10 <target_speed_w_calc+0x128>
			l_accelation_w = -1 * accelation_w;
 800cc98:	4b29      	ldr	r3, [pc, #164]	; (800cd40 <target_speed_w_calc+0x158>)
 800cc9a:	617b      	str	r3, [r7, #20]
		break;
 800cc9c:	e038      	b.n	800cd10 <target_speed_w_calc+0x128>
	case clockwise:
		/*m加速に必要な角度算出*/
		l_deccel_distance_w = 0.5 * l_speed_w * l_speed_w / accelation_w;
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7f3 fc7a 	bl	8000598 <__aeabi_f2d>
 800cca4:	f04f 0200 	mov.w	r2, #0
 800cca8:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <target_speed_w_calc+0x150>)
 800ccaa:	f7f3 fccd 	bl	8000648 <__aeabi_dmul>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	4625      	mov	r5, r4
 800ccb4:	461c      	mov	r4, r3
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7f3 fc6e 	bl	8000598 <__aeabi_f2d>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f7f3 fcc0 	bl	8000648 <__aeabi_dmul>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	4618      	mov	r0, r3
 800ccce:	4621      	mov	r1, r4
 800ccd0:	a313      	add	r3, pc, #76	; (adr r3, 800cd20 <target_speed_w_calc+0x138>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f7f3 fde1 	bl	800089c <__aeabi_ddiv>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	460c      	mov	r4, r1
 800ccde:	4618      	mov	r0, r3
 800cce0:	4621      	mov	r1, r4
 800cce2:	f7f3 ffa9 	bl	8000c38 <__aeabi_d2f>
 800cce6:	4603      	mov	r3, r0
 800cce8:	607b      	str	r3, [r7, #4]

		if(l_distance_w > (l_target_distance_w + l_deccel_distance_w)){			//m加速開始前
 800ccea:	ed97 7a04 	vldr	s14, [r7, #16]
 800ccee:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccf6:	ed97 7a02 	vldr	s14, [r7, #8]
 800ccfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd02:	dd02      	ble.n	800cd0a <target_speed_w_calc+0x122>
			l_accelation_w =  -1 * accelation_w;
 800cd04:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <target_speed_w_calc+0x158>)
 800cd06:	617b      	str	r3, [r7, #20]
		}
		else{																	//m加速開始後
			l_accelation_w = 1 * accelation_w;
		}
		break;
 800cd08:	e001      	b.n	800cd0e <target_speed_w_calc+0x126>
			l_accelation_w = 1 * accelation_w;
 800cd0a:	4b0c      	ldr	r3, [pc, #48]	; (800cd3c <target_speed_w_calc+0x154>)
 800cd0c:	617b      	str	r3, [r7, #20]
		break;
 800cd0e:	bf00      	nop
		break;
	}

	/*mグローバル変数に出力*/

	g_accelation_w = l_accelation_w;
 800cd10:	4a0c      	ldr	r2, [pc, #48]	; (800cd44 <target_speed_w_calc+0x15c>)
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	6013      	str	r3, [r2, #0]

}
 800cd16:	bf00      	nop
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bdb0      	pop	{r4, r5, r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	40000000 	.word	0x40000000
 800cd24:	401921fb 	.word	0x401921fb
 800cd28:	2001b278 	.word	0x2001b278
 800cd2c:	2001b290 	.word	0x2001b290
 800cd30:	2001b288 	.word	0x2001b288
 800cd34:	2001b2a5 	.word	0x2001b2a5
 800cd38:	3fe00000 	.word	0x3fe00000
 800cd3c:	40c90fda 	.word	0x40c90fda
 800cd40:	c0c90fda 	.word	0xc0c90fda
 800cd44:	2001b280 	.word	0x2001b280

0800cd48 <Operation_amount_calc>:
 *　目標速度との偏差でFB制御
 * param:
 *  * */

void Operation_amount_calc(void)
{
 800cd48:	b5b0      	push	{r4, r5, r7, lr}
 800cd4a:	ed2d 8b02 	vpush	{d8}
 800cd4e:	b098      	sub	sp, #96	; 0x60
 800cd50:	af00      	add	r7, sp, #0

	static float speed_m_err_PID = 0; 			//m　並進方向速度差のPID量
	static float speed_w_err_PID = 0;			//m 回転方向速度差のPID量

	/*m 壁補正用*/
    double l_front_sensor_r = 0; 		//m 右前センサ値のバッファ
 800cd52:	f04f 0300 	mov.w	r3, #0
 800cd56:	f04f 0400 	mov.w	r4, #0
 800cd5a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    double l_front_sensor_l = 0; 		//m 左前センサ値のバッファ
 800cd5e:	f04f 0300 	mov.w	r3, #0
 800cd62:	f04f 0400 	mov.w	r4, #0
 800cd66:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    double l_front_sensor_r_err = 0;   //m 右前センサの偏差
 800cd6a:	f04f 0300 	mov.w	r3, #0
 800cd6e:	f04f 0400 	mov.w	r4, #0
 800cd72:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double l_front_sensor_l_err = 0;	//m 左前センサの偏差
 800cd76:	f04f 0300 	mov.w	r3, #0
 800cd7a:	f04f 0400 	mov.w	r4, #0
 800cd7e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    double l_front_sensor_m_err = 0;   //m センサの偏差の和
 800cd82:	f04f 0300 	mov.w	r3, #0
 800cd86:	f04f 0400 	mov.w	r4, #0
 800cd8a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double l_front_sensor_w_err = 0;	//m センサの偏差の差
 800cd8e:	f04f 0300 	mov.w	r3, #0
 800cd92:	f04f 0400 	mov.w	r4, #0
 800cd96:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    static double l_front_sensor_m_err_prev = 0;   	//m 前回偏差和
    static double l_front_sensor_w_err_prev = 0;   	//m 前回偏差差
    static double l_front_sensor_m_D_prev = 0;   	//m 前回偏差和微分
    static double l_front_sensor_w_D_prev = 0;   	//m 前回偏差差微分

    double l_front_sensor_m_err_P = 0;
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	f04f 0400 	mov.w	r4, #0
 800cda2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double l_front_sensor_w_err_P = 0;
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	f04f 0400 	mov.w	r4, #0
 800cdae:	e9c7 3408 	strd	r3, r4, [r7, #32]
    double l_front_sensor_m_err_D = 0;
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	f04f 0400 	mov.w	r4, #0
 800cdba:	e9c7 3406 	strd	r3, r4, [r7, #24]
    double l_front_sensor_w_err_D = 0;
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	f04f 0400 	mov.w	r4, #0
 800cdc6:	e9c7 3404 	strd	r3, r4, [r7, #16]

    double l_front_sensor_m_PID = 0;
 800cdca:	f04f 0300 	mov.w	r3, #0
 800cdce:	f04f 0400 	mov.w	r4, #0
 800cdd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    double l_front_sensor_w_PID = 0;
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	f04f 0400 	mov.w	r4, #0
 800cdde:	e9c7 3400 	strd	r3, r4, [r7]


	/*m 目標速度による制御*/
	if (correction_mode == 0){
 800cde2:	4bbf      	ldr	r3, [pc, #764]	; (800d0e0 <Operation_amount_calc+0x398>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f040 80be 	bne.w	800cf68 <Operation_amount_calc+0x220>

		/*m 偏差取得*/
		speed_m_err = target_speed_m - g_ave_speed_m;		//m 目標スピードー実速度(エンコーダから)[m/s]
 800cdec:	4bbd      	ldr	r3, [pc, #756]	; (800d0e4 <Operation_amount_calc+0x39c>)
 800cdee:	ed93 7a00 	vldr	s14, [r3]
 800cdf2:	4bbd      	ldr	r3, [pc, #756]	; (800d0e8 <Operation_amount_calc+0x3a0>)
 800cdf4:	edd3 7a00 	vldr	s15, [r3]
 800cdf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdfc:	4bbb      	ldr	r3, [pc, #748]	; (800d0ec <Operation_amount_calc+0x3a4>)
 800cdfe:	edc3 7a00 	vstr	s15, [r3]
		speed_w_err = target_speed_w - IMU_GetGyro_Z();		//m 目標角速度ー実速度（IMUから）[rad/s]
 800ce02:	4bbb      	ldr	r3, [pc, #748]	; (800d0f0 <Operation_amount_calc+0x3a8>)
 800ce04:	ed93 8a00 	vldr	s16, [r3]
 800ce08:	f7f9 fc46 	bl	8006698 <IMU_GetGyro_Z>
 800ce0c:	eef0 7a40 	vmov.f32	s15, s0
 800ce10:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ce14:	4bb7      	ldr	r3, [pc, #732]	; (800d0f4 <Operation_amount_calc+0x3ac>)
 800ce16:	edc3 7a00 	vstr	s15, [r3]

		/*m 偏差積分*/
		speed_m_err_I = speed_m_err_I + speed_m_KI*0.001*speed_m_err;
 800ce1a:	4bb7      	ldr	r3, [pc, #732]	; (800d0f8 <Operation_amount_calc+0x3b0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f3 fbba 	bl	8000598 <__aeabi_f2d>
 800ce24:	4604      	mov	r4, r0
 800ce26:	460d      	mov	r5, r1
 800ce28:	4bb0      	ldr	r3, [pc, #704]	; (800d0ec <Operation_amount_calc+0x3a4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f3 fbb3 	bl	8000598 <__aeabi_f2d>
 800ce32:	a397      	add	r3, pc, #604	; (adr r3, 800d090 <Operation_amount_calc+0x348>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fc06 	bl	8000648 <__aeabi_dmul>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4620      	mov	r0, r4
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7f3 fa4a 	bl	80002dc <__adddf3>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	4621      	mov	r1, r4
 800ce50:	f7f3 fef2 	bl	8000c38 <__aeabi_d2f>
 800ce54:	4602      	mov	r2, r0
 800ce56:	4ba8      	ldr	r3, [pc, #672]	; (800d0f8 <Operation_amount_calc+0x3b0>)
 800ce58:	601a      	str	r2, [r3, #0]
		speed_w_err_I = speed_w_err_I + speed_w_KI*0.001*speed_w_err;
 800ce5a:	4ba8      	ldr	r3, [pc, #672]	; (800d0fc <Operation_amount_calc+0x3b4>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f3 fb9a 	bl	8000598 <__aeabi_f2d>
 800ce64:	4604      	mov	r4, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4ba2      	ldr	r3, [pc, #648]	; (800d0f4 <Operation_amount_calc+0x3ac>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f3 fb93 	bl	8000598 <__aeabi_f2d>
 800ce72:	a389      	add	r3, pc, #548	; (adr r3, 800d098 <Operation_amount_calc+0x350>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	f7f3 fbe6 	bl	8000648 <__aeabi_dmul>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fa2a 	bl	80002dc <__adddf3>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	4621      	mov	r1, r4
 800ce90:	f7f3 fed2 	bl	8000c38 <__aeabi_d2f>
 800ce94:	4602      	mov	r2, r0
 800ce96:	4b99      	ldr	r3, [pc, #612]	; (800d0fc <Operation_amount_calc+0x3b4>)
 800ce98:	601a      	str	r2, [r3, #0]
		//speed_w_err_I += speed_w_err;
		/*m 偏差微分*/
		speed_w_err_D  = (speed_w_err_D_prev + speed_w_KD*speed_w_fil*(speed_w_err-speed_w_err_prev))
 800ce9a:	4b96      	ldr	r3, [pc, #600]	; (800d0f4 <Operation_amount_calc+0x3ac>)
 800ce9c:	ed93 7a00 	vldr	s14, [r3]
 800cea0:	4b97      	ldr	r3, [pc, #604]	; (800d100 <Operation_amount_calc+0x3b8>)
 800cea2:	edd3 7a00 	vldr	s15, [r3]
 800cea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceaa:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800d104 <Operation_amount_calc+0x3bc>
 800ceae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ceb2:	4b95      	ldr	r3, [pc, #596]	; (800d108 <Operation_amount_calc+0x3c0>)
 800ceb4:	edd3 7a00 	vldr	s15, [r3]
 800ceb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cebc:	ee17 0a90 	vmov	r0, s15
 800cec0:	f7f3 fb6a 	bl	8000598 <__aeabi_f2d>
		                 /(1+speed_w_fil*0.001);
 800cec4:	a376      	add	r3, pc, #472	; (adr r3, 800d0a0 <Operation_amount_calc+0x358>)
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 fce7 	bl	800089c <__aeabi_ddiv>
 800cece:	4603      	mov	r3, r0
 800ced0:	460c      	mov	r4, r1
 800ced2:	4618      	mov	r0, r3
 800ced4:	4621      	mov	r1, r4
 800ced6:	f7f3 feaf 	bl	8000c38 <__aeabi_d2f>
 800ceda:	4602      	mov	r2, r0
		speed_w_err_D  = (speed_w_err_D_prev + speed_w_KD*speed_w_fil*(speed_w_err-speed_w_err_prev))
 800cedc:	4b8b      	ldr	r3, [pc, #556]	; (800d10c <Operation_amount_calc+0x3c4>)
 800cede:	601a      	str	r2, [r3, #0]
		//2自由度制御(PI2)
		//p(b*r-y) + I*Ts*z/(z-1)(r-y)
		//=P(r-y)+P(b-1)*r + I*Ts*z/(z-1)(r-y)
		//=P*e+P(b-1)r + I*Ts*z/(z-1)(r-y)
		speed_m_err_PID = speed_m_KP * speed_m_err + speed_m_err_I;
 800cee0:	4b82      	ldr	r3, [pc, #520]	; (800d0ec <Operation_amount_calc+0x3a4>)
 800cee2:	edd3 7a00 	vldr	s15, [r3]
 800cee6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d110 <Operation_amount_calc+0x3c8>
 800ceea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ceee:	4b82      	ldr	r3, [pc, #520]	; (800d0f8 <Operation_amount_calc+0x3b0>)
 800cef0:	edd3 7a00 	vldr	s15, [r3]
 800cef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cef8:	4b86      	ldr	r3, [pc, #536]	; (800d114 <Operation_amount_calc+0x3cc>)
 800cefa:	edc3 7a00 	vstr	s15, [r3]
		//speed_w_err_PID = speed_w_KP * (speed_w_b*target_speed_w - IMU_GetGyro_Z()) + speed_w_err_I;
		speed_w_err_PID = speed_w_KP * speed_w_err + speed_w_err_I;
 800cefe:	4b7d      	ldr	r3, [pc, #500]	; (800d0f4 <Operation_amount_calc+0x3ac>)
 800cf00:	edd3 7a00 	vldr	s15, [r3]
 800cf04:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800d118 <Operation_amount_calc+0x3d0>
 800cf08:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf0c:	4b7b      	ldr	r3, [pc, #492]	; (800d0fc <Operation_amount_calc+0x3b4>)
 800cf0e:	edd3 7a00 	vldr	s15, [r3]
 800cf12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf16:	4b81      	ldr	r3, [pc, #516]	; (800d11c <Operation_amount_calc+0x3d4>)
 800cf18:	edc3 7a00 	vstr	s15, [r3]
//							+((ff_w_a_gain * target_acceleration_w ) + (ff_w_v_gain * target_speed_w) + ff_w_f_gain * 1); //m回転方向
//		ff_target_vol_l = ((ff_m_a_gain * target_acceleration_m ) + (ff_m_v_gain * target_speed_m) + ff_m_f_gain * 1)//m並進方向
//							-((ff_w_a_gain * target_acceleration_w ) + (ff_w_v_gain * target_speed_w) + ff_w_f_gain * 1);//m回転方向

		/*FB項演算*/
		fb_target_vol_r = speed_m_err_PID + speed_w_err_PID;
 800cf1c:	4b7d      	ldr	r3, [pc, #500]	; (800d114 <Operation_amount_calc+0x3cc>)
 800cf1e:	ed93 7a00 	vldr	s14, [r3]
 800cf22:	4b7e      	ldr	r3, [pc, #504]	; (800d11c <Operation_amount_calc+0x3d4>)
 800cf24:	edd3 7a00 	vldr	s15, [r3]
 800cf28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf2c:	4b7c      	ldr	r3, [pc, #496]	; (800d120 <Operation_amount_calc+0x3d8>)
 800cf2e:	edc3 7a00 	vstr	s15, [r3]
		fb_target_vol_l = speed_m_err_PID - speed_w_err_PID;
 800cf32:	4b78      	ldr	r3, [pc, #480]	; (800d114 <Operation_amount_calc+0x3cc>)
 800cf34:	ed93 7a00 	vldr	s14, [r3]
 800cf38:	4b78      	ldr	r3, [pc, #480]	; (800d11c <Operation_amount_calc+0x3d4>)
 800cf3a:	edd3 7a00 	vldr	s15, [r3]
 800cf3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf42:	4b78      	ldr	r3, [pc, #480]	; (800d124 <Operation_amount_calc+0x3dc>)
 800cf44:	edc3 7a00 	vstr	s15, [r3]

		/*m 印加電圧算出*/
		target_vol_r = (fb_gain * fb_target_vol_r);
 800cf48:	4b75      	ldr	r3, [pc, #468]	; (800d120 <Operation_amount_calc+0x3d8>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a76      	ldr	r2, [pc, #472]	; (800d128 <Operation_amount_calc+0x3e0>)
 800cf4e:	6013      	str	r3, [r2, #0]
		target_vol_l = (fb_gain * fb_target_vol_l);
 800cf50:	4b74      	ldr	r3, [pc, #464]	; (800d124 <Operation_amount_calc+0x3dc>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a75      	ldr	r2, [pc, #468]	; (800d12c <Operation_amount_calc+0x3e4>)
 800cf56:	6013      	str	r3, [r2, #0]

		/*m 前回偏差更新*/
		speed_w_err_prev = speed_w_err;			//m 前回角速度偏差
 800cf58:	4b66      	ldr	r3, [pc, #408]	; (800d0f4 <Operation_amount_calc+0x3ac>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a68      	ldr	r2, [pc, #416]	; (800d100 <Operation_amount_calc+0x3b8>)
 800cf5e:	6013      	str	r3, [r2, #0]
		speed_w_err_D_prev = speed_w_err_D;			//m 前回角速度偏差微分
 800cf60:	4b6a      	ldr	r3, [pc, #424]	; (800d10c <Operation_amount_calc+0x3c4>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a68      	ldr	r2, [pc, #416]	; (800d108 <Operation_amount_calc+0x3c0>)
 800cf66:	6013      	str	r3, [r2, #0]

	}

	/*m 前壁補正*/
	if(correction_mode == 1){
 800cf68:	4b5d      	ldr	r3, [pc, #372]	; (800d0e0 <Operation_amount_calc+0x398>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	f040 8198 	bne.w	800d2a2 <Operation_amount_calc+0x55a>
		l_front_sensor_l = SensorValue2length(0);
 800cf72:	2000      	movs	r0, #0
 800cf74:	f7f9 fe0c 	bl	8006b90 <SensorValue2length>
 800cf78:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
		l_front_sensor_r = SensorValue2length(3);
 800cf7c:	2003      	movs	r0, #3
 800cf7e:	f7f9 fe07 	bl	8006b90 <SensorValue2length>
 800cf82:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

		/*m 偏差取得*/
		l_front_sensor_l_err = l_front_sensor_l - front_sensor_l_ref ;		//m 目標距離　－　センサ距離
 800cf86:	a348      	add	r3, pc, #288	; (adr r3, 800d0a8 <Operation_amount_calc+0x360>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cf90:	f7f3 f9a2 	bl	80002d8 <__aeabi_dsub>
 800cf94:	4603      	mov	r3, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		l_front_sensor_r_err = l_front_sensor_r - front_sensor_r_ref ;		//m 目標距離　－　センサ距離
 800cf9c:	a344      	add	r3, pc, #272	; (adr r3, 800d0b0 <Operation_amount_calc+0x368>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cfa6:	f7f3 f997 	bl	80002d8 <__aeabi_dsub>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	460c      	mov	r4, r1
 800cfae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

		/* m 偏差変換*/
		l_front_sensor_m_err = l_front_sensor_r_err + l_front_sensor_l_err;
 800cfb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cfba:	f7f3 f98f 	bl	80002dc <__adddf3>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		l_front_sensor_w_err = (l_front_sensor_r_err - l_front_sensor_l_err)/chassis_width; //角度に変換(atanを0近傍で線形化)
 800cfc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cfca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cfce:	f7f3 f983 	bl	80002d8 <__aeabi_dsub>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	4621      	mov	r1, r4
 800cfda:	a337      	add	r3, pc, #220	; (adr r3, 800d0b8 <Operation_amount_calc+0x370>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	f7f3 fc5c 	bl	800089c <__aeabi_ddiv>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		/*m 偏差積分(I項)*/
		l_front_sensor_m_err_I  += front_sensor_m_KI * 0.001 * l_front_sensor_m_err;
 800cfec:	a334      	add	r3, pc, #208	; (adr r3, 800d0c0 <Operation_amount_calc+0x378>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cff6:	f7f3 fb27 	bl	8000648 <__aeabi_dmul>
 800cffa:	4603      	mov	r3, r0
 800cffc:	460c      	mov	r4, r1
 800cffe:	4618      	mov	r0, r3
 800d000:	4621      	mov	r1, r4
 800d002:	4b4b      	ldr	r3, [pc, #300]	; (800d130 <Operation_amount_calc+0x3e8>)
 800d004:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d008:	461a      	mov	r2, r3
 800d00a:	4623      	mov	r3, r4
 800d00c:	f7f3 f966 	bl	80002dc <__adddf3>
 800d010:	4603      	mov	r3, r0
 800d012:	460c      	mov	r4, r1
 800d014:	4a46      	ldr	r2, [pc, #280]	; (800d130 <Operation_amount_calc+0x3e8>)
 800d016:	e9c2 3400 	strd	r3, r4, [r2]
		l_front_sensor_w_err_I  += front_sensor_w_KI * 0.001 * l_front_sensor_w_err;
 800d01a:	a32b      	add	r3, pc, #172	; (adr r3, 800d0c8 <Operation_amount_calc+0x380>)
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d024:	f7f3 fb10 	bl	8000648 <__aeabi_dmul>
 800d028:	4603      	mov	r3, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	4618      	mov	r0, r3
 800d02e:	4621      	mov	r1, r4
 800d030:	4b40      	ldr	r3, [pc, #256]	; (800d134 <Operation_amount_calc+0x3ec>)
 800d032:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d036:	461a      	mov	r2, r3
 800d038:	4623      	mov	r3, r4
 800d03a:	f7f3 f94f 	bl	80002dc <__adddf3>
 800d03e:	4603      	mov	r3, r0
 800d040:	460c      	mov	r4, r1
 800d042:	4a3c      	ldr	r2, [pc, #240]	; (800d134 <Operation_amount_calc+0x3ec>)
 800d044:	e9c2 3400 	strd	r3, r4, [r2]

		/*P項*/
		l_front_sensor_m_err_P = front_sensor_m_KP * l_front_sensor_m_err;
 800d048:	a321      	add	r3, pc, #132	; (adr r3, 800d0d0 <Operation_amount_calc+0x388>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d052:	f7f3 faf9 	bl	8000648 <__aeabi_dmul>
 800d056:	4603      	mov	r3, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		l_front_sensor_w_err_P = front_sensor_w_KP * l_front_sensor_w_err;
 800d05e:	a31e      	add	r3, pc, #120	; (adr r3, 800d0d8 <Operation_amount_calc+0x390>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d068:	f7f3 faee 	bl	8000648 <__aeabi_dmul>
 800d06c:	4603      	mov	r3, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	e9c7 3408 	strd	r3, r4, [r7, #32]

		/*D項*/
		l_front_sensor_m_err_D = (l_front_sensor_m_D_prev+front_sensor_m_KD*front_sensor_m_fil*(l_front_sensor_m_err - l_front_sensor_m_err_prev))
 800d074:	4b30      	ldr	r3, [pc, #192]	; (800d138 <Operation_amount_calc+0x3f0>)
 800d076:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d07a:	461a      	mov	r2, r3
 800d07c:	4623      	mov	r3, r4
 800d07e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d082:	f7f3 f929 	bl	80002d8 <__aeabi_dsub>
 800d086:	4603      	mov	r3, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	4618      	mov	r0, r3
 800d08c:	4621      	mov	r1, r4
 800d08e:	e055      	b.n	800d13c <Operation_amount_calc+0x3f4>
 800d090:	fbe76c8b 	.word	0xfbe76c8b
 800d094:	3fa435b9 	.word	0x3fa435b9
 800d098:	d2f1a9fc 	.word	0xd2f1a9fc
 800d09c:	3f82c93d 	.word	0x3f82c93d
 800d0a0:	c8b43958 	.word	0xc8b43958
 800d0a4:	3ff35276 	.word	0x3ff35276
 800d0a8:	60000000 	.word	0x60000000
 800d0ac:	3f8374bc 	.word	0x3f8374bc
 800d0b0:	e0000000 	.word	0xe0000000
 800d0b4:	3f878d4f 	.word	0x3f878d4f
 800d0b8:	e0000000 	.word	0xe0000000
 800d0bc:	3fa2d5be 	.word	0x3fa2d5be
 800d0c0:	5a1cac08 	.word	0x5a1cac08
 800d0c4:	3f9adfd4 	.word	0x3f9adfd4
 800d0c8:	22d0e560 	.word	0x22d0e560
 800d0cc:	3f64a59b 	.word	0x3f64a59b
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	405f1a63 	.word	0x405f1a63
 800d0d8:	e0000000 	.word	0xe0000000
 800d0dc:	40199e8a 	.word	0x40199e8a
 800d0e0:	2001b2a8 	.word	0x2001b2a8
 800d0e4:	2001b270 	.word	0x2001b270
 800d0e8:	20000240 	.word	0x20000240
 800d0ec:	2001b2ac 	.word	0x2001b2ac
 800d0f0:	2001b278 	.word	0x2001b278
 800d0f4:	2001b2b0 	.word	0x2001b2b0
 800d0f8:	2001b2b4 	.word	0x2001b2b4
 800d0fc:	2001b2b8 	.word	0x2001b2b8
 800d100:	2001b2bc 	.word	0x2001b2bc
 800d104:	00000000 	.word	0x00000000
 800d108:	2001b2c0 	.word	0x2001b2c0
 800d10c:	2001b2c4 	.word	0x2001b2c4
 800d110:	402b22d1 	.word	0x402b22d1
 800d114:	2001b2c8 	.word	0x2001b2c8
 800d118:	3eb22fad 	.word	0x3eb22fad
 800d11c:	2001b2cc 	.word	0x2001b2cc
 800d120:	2001b2d0 	.word	0x2001b2d0
 800d124:	2001b2d4 	.word	0x2001b2d4
 800d128:	2001b2d8 	.word	0x2001b2d8
 800d12c:	2001b2dc 	.word	0x2001b2dc
 800d130:	2001b2e0 	.word	0x2001b2e0
 800d134:	2001b2e8 	.word	0x2001b2e8
 800d138:	2001b2f0 	.word	0x2001b2f0
 800d13c:	a3a7      	add	r3, pc, #668	; (adr r3, 800d3dc <Operation_amount_calc+0x694>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 fa81 	bl	8000648 <__aeabi_dmul>
 800d146:	4603      	mov	r3, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	4618      	mov	r0, r3
 800d14c:	4621      	mov	r1, r4
 800d14e:	4b96      	ldr	r3, [pc, #600]	; (800d3a8 <Operation_amount_calc+0x660>)
 800d150:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d154:	461a      	mov	r2, r3
 800d156:	4623      	mov	r3, r4
 800d158:	f7f3 f8c0 	bl	80002dc <__adddf3>
 800d15c:	4603      	mov	r3, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	4618      	mov	r0, r3
 800d162:	4621      	mov	r1, r4
 800d164:	a38a      	add	r3, pc, #552	; (adr r3, 800d390 <Operation_amount_calc+0x648>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 fb97 	bl	800089c <__aeabi_ddiv>
 800d16e:	4603      	mov	r3, r0
 800d170:	460c      	mov	r4, r1
 800d172:	e9c7 3406 	strd	r3, r4, [r7, #24]
									/(1+front_sensor_m_fil*0.001);
		l_front_sensor_w_err_D = (l_front_sensor_w_D_prev+front_sensor_w_KD*front_sensor_w_fil*(l_front_sensor_w_err - l_front_sensor_w_err_prev))
 800d176:	4b8d      	ldr	r3, [pc, #564]	; (800d3ac <Operation_amount_calc+0x664>)
 800d178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d17c:	461a      	mov	r2, r3
 800d17e:	4623      	mov	r3, r4
 800d180:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d184:	f7f3 f8a8 	bl	80002d8 <__aeabi_dsub>
 800d188:	4603      	mov	r3, r0
 800d18a:	460c      	mov	r4, r1
 800d18c:	4618      	mov	r0, r3
 800d18e:	4621      	mov	r1, r4
 800d190:	a381      	add	r3, pc, #516	; (adr r3, 800d398 <Operation_amount_calc+0x650>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 fa57 	bl	8000648 <__aeabi_dmul>
 800d19a:	4603      	mov	r3, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	4618      	mov	r0, r3
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4b83      	ldr	r3, [pc, #524]	; (800d3b0 <Operation_amount_calc+0x668>)
 800d1a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	4623      	mov	r3, r4
 800d1ac:	f7f3 f896 	bl	80002dc <__adddf3>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	a379      	add	r3, pc, #484	; (adr r3, 800d3a0 <Operation_amount_calc+0x658>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f7f3 fb6d 	bl	800089c <__aeabi_ddiv>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
									/(1+front_sensor_w_fil*0.001);

		/*PID*/
		l_front_sensor_m_PID = l_front_sensor_m_err_P + l_front_sensor_m_err_I + l_front_sensor_m_err_D;
 800d1ca:	4b7a      	ldr	r3, [pc, #488]	; (800d3b4 <Operation_amount_calc+0x66c>)
 800d1cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1d4:	f7f3 f882 	bl	80002dc <__adddf3>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	461a      	mov	r2, r3
 800d1de:	4623      	mov	r3, r4
 800d1e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1e4:	f7f3 f87a 	bl	80002dc <__adddf3>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	    l_front_sensor_w_PID = l_front_sensor_w_err_P + l_front_sensor_w_err_I + l_front_sensor_w_err_D;
 800d1f0:	4b71      	ldr	r3, [pc, #452]	; (800d3b8 <Operation_amount_calc+0x670>)
 800d1f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1fa:	f7f3 f86f 	bl	80002dc <__adddf3>
 800d1fe:	4603      	mov	r3, r0
 800d200:	460c      	mov	r4, r1
 800d202:	461a      	mov	r2, r3
 800d204:	4623      	mov	r3, r4
 800d206:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d20a:	f7f3 f867 	bl	80002dc <__adddf3>
 800d20e:	4603      	mov	r3, r0
 800d210:	460c      	mov	r4, r1
 800d212:	e9c7 3400 	strd	r3, r4, [r7]

	    /*m 印加電圧算出*/
		target_vol_r = (l_front_sensor_m_PID + l_front_sensor_w_PID)/2;
 800d216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d21e:	f7f3 f85d 	bl	80002dc <__adddf3>
 800d222:	4603      	mov	r3, r0
 800d224:	460c      	mov	r4, r1
 800d226:	4618      	mov	r0, r3
 800d228:	4621      	mov	r1, r4
 800d22a:	f04f 0200 	mov.w	r2, #0
 800d22e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d232:	f7f3 fb33 	bl	800089c <__aeabi_ddiv>
 800d236:	4603      	mov	r3, r0
 800d238:	460c      	mov	r4, r1
 800d23a:	4618      	mov	r0, r3
 800d23c:	4621      	mov	r1, r4
 800d23e:	f7f3 fcfb 	bl	8000c38 <__aeabi_d2f>
 800d242:	4602      	mov	r2, r0
 800d244:	4b5d      	ldr	r3, [pc, #372]	; (800d3bc <Operation_amount_calc+0x674>)
 800d246:	601a      	str	r2, [r3, #0]
		target_vol_l = (l_front_sensor_m_PID - l_front_sensor_w_PID)/2;
 800d248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d24c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d250:	f7f3 f842 	bl	80002d8 <__aeabi_dsub>
 800d254:	4603      	mov	r3, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4618      	mov	r0, r3
 800d25a:	4621      	mov	r1, r4
 800d25c:	f04f 0200 	mov.w	r2, #0
 800d260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d264:	f7f3 fb1a 	bl	800089c <__aeabi_ddiv>
 800d268:	4603      	mov	r3, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	4618      	mov	r0, r3
 800d26e:	4621      	mov	r1, r4
 800d270:	f7f3 fce2 	bl	8000c38 <__aeabi_d2f>
 800d274:	4602      	mov	r2, r0
 800d276:	4b52      	ldr	r3, [pc, #328]	; (800d3c0 <Operation_amount_calc+0x678>)
 800d278:	601a      	str	r2, [r3, #0]

		/*m パラメータ更新*/
	    l_front_sensor_m_err_prev = l_front_sensor_m_err;   		//m 前回偏差和
 800d27a:	4a52      	ldr	r2, [pc, #328]	; (800d3c4 <Operation_amount_calc+0x67c>)
 800d27c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d280:	e9c2 3400 	strd	r3, r4, [r2]
	    l_front_sensor_w_err_prev = l_front_sensor_w_err;   		//m 前回偏差差
 800d284:	4a49      	ldr	r2, [pc, #292]	; (800d3ac <Operation_amount_calc+0x664>)
 800d286:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d28a:	e9c2 3400 	strd	r3, r4, [r2]
	    l_front_sensor_m_D_prev = l_front_sensor_m_err_D;		   	//m 前回偏差和微分
 800d28e:	4a46      	ldr	r2, [pc, #280]	; (800d3a8 <Operation_amount_calc+0x660>)
 800d290:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d294:	e9c2 3400 	strd	r3, r4, [r2]
	    l_front_sensor_w_D_prev = l_front_sensor_w_err_D;		   	//m 前回偏差差微分
 800d298:	4a45      	ldr	r2, [pc, #276]	; (800d3b0 <Operation_amount_calc+0x668>)
 800d29a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d29e:	e9c2 3400 	strd	r3, r4, [r2]
//		target_vol_l += offset_flg_l * offset_voltage;
//	}


	/* m バッテリー電圧とモータに印加する電圧から、duty[*0.1%]を算出	*/
	operation_amount_r = target_vol_r / (Battery_GetVoltage()) * 1000;
 800d2a2:	4b46      	ldr	r3, [pc, #280]	; (800d3bc <Operation_amount_calc+0x674>)
 800d2a4:	ed93 8a00 	vldr	s16, [r3]
 800d2a8:	f7f8 fc36 	bl	8005b18 <Battery_GetVoltage>
 800d2ac:	eeb0 7a40 	vmov.f32	s14, s0
 800d2b0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d2b4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d3c8 <Operation_amount_calc+0x680>
 800d2b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2bc:	4b43      	ldr	r3, [pc, #268]	; (800d3cc <Operation_amount_calc+0x684>)
 800d2be:	edc3 7a00 	vstr	s15, [r3]
	operation_amount_l = target_vol_l / (Battery_GetVoltage()) * 1000;
 800d2c2:	4b3f      	ldr	r3, [pc, #252]	; (800d3c0 <Operation_amount_calc+0x678>)
 800d2c4:	ed93 8a00 	vldr	s16, [r3]
 800d2c8:	f7f8 fc26 	bl	8005b18 <Battery_GetVoltage>
 800d2cc:	eeb0 7a40 	vmov.f32	s14, s0
 800d2d0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d2d4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d3c8 <Operation_amount_calc+0x680>
 800d2d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2dc:	4b3c      	ldr	r3, [pc, #240]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d2de:	edc3 7a00 	vstr	s15, [r3]


	if( operation_amount_r > 0){
 800d2e2:	4b3a      	ldr	r3, [pc, #232]	; (800d3cc <Operation_amount_calc+0x684>)
 800d2e4:	edd3 7a00 	vldr	s15, [r3]
 800d2e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f0:	dd0a      	ble.n	800d308 <Operation_amount_calc+0x5c0>
		operation_amount_r = operation_amount_r + 40;  //40->30
 800d2f2:	4b36      	ldr	r3, [pc, #216]	; (800d3cc <Operation_amount_calc+0x684>)
 800d2f4:	edd3 7a00 	vldr	s15, [r3]
 800d2f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d3d4 <Operation_amount_calc+0x68c>
 800d2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d300:	4b32      	ldr	r3, [pc, #200]	; (800d3cc <Operation_amount_calc+0x684>)
 800d302:	edc3 7a00 	vstr	s15, [r3]
 800d306:	e009      	b.n	800d31c <Operation_amount_calc+0x5d4>
	}
	else{
		operation_amount_r = operation_amount_r - 45; //45 ->35
 800d308:	4b30      	ldr	r3, [pc, #192]	; (800d3cc <Operation_amount_calc+0x684>)
 800d30a:	edd3 7a00 	vldr	s15, [r3]
 800d30e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d3d8 <Operation_amount_calc+0x690>
 800d312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d316:	4b2d      	ldr	r3, [pc, #180]	; (800d3cc <Operation_amount_calc+0x684>)
 800d318:	edc3 7a00 	vstr	s15, [r3]
	}

	if( operation_amount_l > 0){
 800d31c:	4b2c      	ldr	r3, [pc, #176]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d31e:	edd3 7a00 	vldr	s15, [r3]
 800d322:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32a:	dd0a      	ble.n	800d342 <Operation_amount_calc+0x5fa>
		operation_amount_l = operation_amount_l + 40;  //40->30
 800d32c:	4b28      	ldr	r3, [pc, #160]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d32e:	edd3 7a00 	vldr	s15, [r3]
 800d332:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d3d4 <Operation_amount_calc+0x68c>
 800d336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d33a:	4b25      	ldr	r3, [pc, #148]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d33c:	edc3 7a00 	vstr	s15, [r3]
 800d340:	e009      	b.n	800d356 <Operation_amount_calc+0x60e>
	}
	else{
		operation_amount_l = operation_amount_l - 45; //45 ->35
 800d342:	4b23      	ldr	r3, [pc, #140]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d344:	edd3 7a00 	vldr	s15, [r3]
 800d348:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d3d8 <Operation_amount_calc+0x690>
 800d34c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d350:	4b1f      	ldr	r3, [pc, #124]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d352:	edc3 7a00 	vstr	s15, [r3]
	}

	/*mモータに電圧を印加 */
	Motor_SetDuty_Left((int16_t)operation_amount_l);
 800d356:	4b1e      	ldr	r3, [pc, #120]	; (800d3d0 <Operation_amount_calc+0x688>)
 800d358:	edd3 7a00 	vldr	s15, [r3]
 800d35c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d360:	ee17 3a90 	vmov	r3, s15
 800d364:	b21b      	sxth	r3, r3
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe fe84 	bl	800c074 <Motor_SetDuty_Left>
	Motor_SetDuty_Right((int16_t)operation_amount_r);
 800d36c:	4b17      	ldr	r3, [pc, #92]	; (800d3cc <Operation_amount_calc+0x684>)
 800d36e:	edd3 7a00 	vldr	s15, [r3]
 800d372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d376:	ee17 3a90 	vmov	r3, s15
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe ff03 	bl	800c188 <Motor_SetDuty_Right>


}
 800d382:	bf00      	nop
 800d384:	3760      	adds	r7, #96	; 0x60
 800d386:	46bd      	mov	sp, r7
 800d388:	ecbd 8b02 	vpop	{d8}
 800d38c:	bdb0      	pop	{r4, r5, r7, pc}
 800d38e:	bf00      	nop
 800d390:	85a1cac1 	.word	0x85a1cac1
 800d394:	3ff06220 	.word	0x3ff06220
 800d398:	00000000 	.word	0x00000000
 800d39c:	40226c23 	.word	0x40226c23
 800d3a0:	6d916873 	.word	0x6d916873
 800d3a4:	3ff0b681 	.word	0x3ff0b681
 800d3a8:	2001b2f8 	.word	0x2001b2f8
 800d3ac:	2001b300 	.word	0x2001b300
 800d3b0:	2001b308 	.word	0x2001b308
 800d3b4:	2001b2e0 	.word	0x2001b2e0
 800d3b8:	2001b2e8 	.word	0x2001b2e8
 800d3bc:	2001b2d8 	.word	0x2001b2d8
 800d3c0:	2001b2dc 	.word	0x2001b2dc
 800d3c4:	2001b2f0 	.word	0x2001b2f0
 800d3c8:	447a0000 	.word	0x447a0000
 800d3cc:	2001b294 	.word	0x2001b294
 800d3d0:	2001b298 	.word	0x2001b298
 800d3d4:	42200000 	.word	0x42200000
 800d3d8:	42340000 	.word	0x42340000
 800d3dc:	60000000 	.word	0x60000000
 800d3e0:	4053aba2 	.word	0x4053aba2

0800d3e4 <real_distance_m_clr>:

/* memo:並進方向移動距離クリア
 * param
 */
void real_distance_m_clr (void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
	real_distance_m = 0; // [m/s] * [s]
 800d3e8:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <real_distance_m_clr+0x18>)
 800d3ea:	f04f 0200 	mov.w	r2, #0
 800d3ee:	601a      	str	r2, [r3, #0]
}
 800d3f0:	bf00      	nop
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	2001b29c 	.word	0x2001b29c

0800d400 <real_distance_w_clr>:

/* memo:回転方向移動角度クリア
 * param
 */
void real_distance_w_clr (void)
{
 800d400:	b480      	push	{r7}
 800d402:	af00      	add	r7, sp, #0
	real_distance_w= 0; // [rad/s] * [s]
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <real_distance_w_clr+0x18>)
 800d406:	f04f 0200 	mov.w	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
}
 800d40c:	bf00      	nop
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	2001b2a0 	.word	0x2001b2a0

0800d41c <target_distance_m_set>:

/* memo:並進方向目標距離更新
 * param:
 */
void target_distance_m_set(float distance_m)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	ed87 0a01 	vstr	s0, [r7, #4]
	target_distance_m += distance_m;
 800d426:	4b08      	ldr	r3, [pc, #32]	; (800d448 <target_distance_m_set+0x2c>)
 800d428:	ed93 7a00 	vldr	s14, [r3]
 800d42c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d430:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d434:	4b04      	ldr	r3, [pc, #16]	; (800d448 <target_distance_m_set+0x2c>)
 800d436:	edc3 7a00 	vstr	s15, [r3]
}
 800d43a:	bf00      	nop
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	2001b284 	.word	0x2001b284

0800d44c <target_distance_w_set>:

/* memo:目標角度更新
 * param:
 */
void target_distance_w_set(float distance_w)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	ed87 0a01 	vstr	s0, [r7, #4]
	target_distance_w += distance_w;
 800d456:	4b08      	ldr	r3, [pc, #32]	; (800d478 <target_distance_w_set+0x2c>)
 800d458:	ed93 7a00 	vldr	s14, [r3]
 800d45c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <target_distance_w_set+0x2c>)
 800d466:	edc3 7a00 	vstr	s15, [r3]
}
 800d46a:	bf00      	nop
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	2001b288 	.word	0x2001b288

0800d47c <target_distance_m_clr>:

/* memo:並進方向目標距離クリア
 * param:
 *  * */
void target_distance_m_clr(void)
{
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
	target_distance_m = 0;
 800d480:	4b04      	ldr	r3, [pc, #16]	; (800d494 <target_distance_m_clr+0x18>)
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	601a      	str	r2, [r3, #0]
}
 800d488:	bf00      	nop
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	2001b284 	.word	0x2001b284

0800d498 <target_distance_w_clr>:

/* memo:目標角度クリア
 * param:
 *  * */
void target_distance_w_clr(void)
{
 800d498:	b480      	push	{r7}
 800d49a:	af00      	add	r7, sp, #0
	target_distance_w = 0;
 800d49c:	4b04      	ldr	r3, [pc, #16]	; (800d4b0 <target_distance_w_clr+0x18>)
 800d49e:	f04f 0200 	mov.w	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]
}
 800d4a4:	bf00      	nop
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	2001b288 	.word	0x2001b288

0800d4b4 <ideal_distance_m_clr>:

/* memo:理想並進方向目標距離クリア
 * param:
 *  * */
void ideal_distance_m_clr(void)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	af00      	add	r7, sp, #0
	ideal_distance_m = 0;
 800d4b8:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <ideal_distance_m_clr+0x18>)
 800d4ba:	f04f 0200 	mov.w	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	2001b28c 	.word	0x2001b28c

0800d4d0 <ideal_distance_w_clr>:

/* memo:理想現在角度クリア
 * param:
 *  * */
void ideal_distance_w_clr(void)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	af00      	add	r7, sp, #0
	ideal_distance_w = 0;
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <ideal_distance_w_clr+0x18>)
 800d4d6:	f04f 0200 	mov.w	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]
}
 800d4dc:	bf00      	nop
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	2001b290 	.word	0x2001b290

0800d4ec <front_wall_calib_flg_clr>:

/* memo:前壁補正フラグクリア
 * param:
 *  * */
void front_wall_calib_flg_clr(void)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
	  front_calib_flg = 0; //m　前壁補正フラグの初期化
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <front_wall_calib_flg_clr+0x20>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
	  right_calib_flg = 0; //m　前壁補正フラグの初期化
 800d4f6:	4b06      	ldr	r3, [pc, #24]	; (800d510 <front_wall_calib_flg_clr+0x24>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
	  left_calib_flg = 0; //m　前壁補正フラグの初期化
 800d4fc:	4b05      	ldr	r3, [pc, #20]	; (800d514 <front_wall_calib_flg_clr+0x28>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
}
 800d502:	bf00      	nop
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	2001bbc4 	.word	0x2001bbc4
 800d510:	2001bbc6 	.word	0x2001bbc6
 800d514:	2001bbc5 	.word	0x2001bbc5

0800d518 <start_acceleration>:

/* memo:スタート時加速
 * param:
 *  * */
void start_acceleration (void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
	/*m移動方向、加速モード設定*/
	move_dir_flg = forward_mode;
 800d51c:	4b1e      	ldr	r3, [pc, #120]	; (800d598 <start_acceleration+0x80>)
 800d51e:	2200      	movs	r2, #0
 800d520:	701a      	strb	r2, [r3, #0]
	accel_dir_flg = acceleration;
 800d522:	4b1e      	ldr	r3, [pc, #120]	; (800d59c <start_acceleration+0x84>)
 800d524:	2200      	movs	r2, #0
 800d526:	701a      	strb	r2, [r3, #0]
    target_distance_m_set(0.060286-0.045);
 800d528:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800d5a0 <start_acceleration+0x88>
 800d52c:	f7ff ff76 	bl	800d41c <target_distance_m_set>

    /*m 半区画進むまで待機*/
    while (1)
    {
    	if(ABS(target_distance_m - ideal_distance_m) < 0.0002)//0.1mm手前まできたらブレイク
 800d530:	4b1c      	ldr	r3, [pc, #112]	; (800d5a4 <start_acceleration+0x8c>)
 800d532:	ed93 7a00 	vldr	s14, [r3]
 800d536:	4b1c      	ldr	r3, [pc, #112]	; (800d5a8 <start_acceleration+0x90>)
 800d538:	edd3 7a00 	vldr	s15, [r3]
 800d53c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d548:	d50a      	bpl.n	800d560 <start_acceleration+0x48>
 800d54a:	4b16      	ldr	r3, [pc, #88]	; (800d5a4 <start_acceleration+0x8c>)
 800d54c:	ed93 7a00 	vldr	s14, [r3]
 800d550:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <start_acceleration+0x90>)
 800d552:	edd3 7a00 	vldr	s15, [r3]
 800d556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d55a:	eef1 7a67 	vneg.f32	s15, s15
 800d55e:	e007      	b.n	800d570 <start_acceleration+0x58>
 800d560:	4b10      	ldr	r3, [pc, #64]	; (800d5a4 <start_acceleration+0x8c>)
 800d562:	ed93 7a00 	vldr	s14, [r3]
 800d566:	4b10      	ldr	r3, [pc, #64]	; (800d5a8 <start_acceleration+0x90>)
 800d568:	edd3 7a00 	vldr	s15, [r3]
 800d56c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d570:	ee17 0a90 	vmov	r0, s15
 800d574:	f7f3 f810 	bl	8000598 <__aeabi_f2d>
 800d578:	a305      	add	r3, pc, #20	; (adr r3, 800d590 <start_acceleration+0x78>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f3 fad5 	bl	8000b2c <__aeabi_dcmplt>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d100      	bne.n	800d58a <start_acceleration+0x72>
 800d588:	e7d2      	b.n	800d530 <start_acceleration+0x18>
    	{
    		break;
 800d58a:	bf00      	nop
    	}
    }
}
 800d58c:	bf00      	nop
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	eb1c432d 	.word	0xeb1c432d
 800d594:	3f2a36e2 	.word	0x3f2a36e2
 800d598:	2001b2a4 	.word	0x2001b2a4
 800d59c:	2001b2a6 	.word	0x2001b2a6
 800d5a0:	3c7a7222 	.word	0x3c7a7222
 800d5a4:	2001b284 	.word	0x2001b284
 800d5a8:	2001b28c 	.word	0x2001b28c
 800d5ac:	00000000 	.word	0x00000000

0800d5b0 <half_acceleration>:

/* memo:半区画加速
 * param:
 *  * */
void half_acceleration (void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
	/*m移動方向、加速モード設定*/
	move_dir_flg = forward_mode;
 800d5b4:	4b1e      	ldr	r3, [pc, #120]	; (800d630 <half_acceleration+0x80>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]
	accel_dir_flg = acceleration;
 800d5ba:	4b1e      	ldr	r3, [pc, #120]	; (800d634 <half_acceleration+0x84>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	701a      	strb	r2, [r3, #0]
    target_distance_m_set(0.045);
 800d5c0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800d638 <half_acceleration+0x88>
 800d5c4:	f7ff ff2a 	bl	800d41c <target_distance_m_set>

    /*m 半区画進むまで待機*/
    while (1)
    {
    	if(ABS(target_distance_m - ideal_distance_m) < 0.0002)//0.1mm手前まできたらブレイク
 800d5c8:	4b1c      	ldr	r3, [pc, #112]	; (800d63c <half_acceleration+0x8c>)
 800d5ca:	ed93 7a00 	vldr	s14, [r3]
 800d5ce:	4b1c      	ldr	r3, [pc, #112]	; (800d640 <half_acceleration+0x90>)
 800d5d0:	edd3 7a00 	vldr	s15, [r3]
 800d5d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e0:	d50a      	bpl.n	800d5f8 <half_acceleration+0x48>
 800d5e2:	4b16      	ldr	r3, [pc, #88]	; (800d63c <half_acceleration+0x8c>)
 800d5e4:	ed93 7a00 	vldr	s14, [r3]
 800d5e8:	4b15      	ldr	r3, [pc, #84]	; (800d640 <half_acceleration+0x90>)
 800d5ea:	edd3 7a00 	vldr	s15, [r3]
 800d5ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5f2:	eef1 7a67 	vneg.f32	s15, s15
 800d5f6:	e007      	b.n	800d608 <half_acceleration+0x58>
 800d5f8:	4b10      	ldr	r3, [pc, #64]	; (800d63c <half_acceleration+0x8c>)
 800d5fa:	ed93 7a00 	vldr	s14, [r3]
 800d5fe:	4b10      	ldr	r3, [pc, #64]	; (800d640 <half_acceleration+0x90>)
 800d600:	edd3 7a00 	vldr	s15, [r3]
 800d604:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d608:	ee17 0a90 	vmov	r0, s15
 800d60c:	f7f2 ffc4 	bl	8000598 <__aeabi_f2d>
 800d610:	a305      	add	r3, pc, #20	; (adr r3, 800d628 <half_acceleration+0x78>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f7f3 fa89 	bl	8000b2c <__aeabi_dcmplt>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d100      	bne.n	800d622 <half_acceleration+0x72>
 800d620:	e7d2      	b.n	800d5c8 <half_acceleration+0x18>
    	{
    		break;
 800d622:	bf00      	nop
    	}
    }
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}
 800d628:	eb1c432d 	.word	0xeb1c432d
 800d62c:	3f2a36e2 	.word	0x3f2a36e2
 800d630:	2001b2a4 	.word	0x2001b2a4
 800d634:	2001b2a6 	.word	0x2001b2a6
 800d638:	3d3851ec 	.word	0x3d3851ec
 800d63c:	2001b284 	.word	0x2001b284
 800d640:	2001b28c 	.word	0x2001b28c
 800d644:	00000000 	.word	0x00000000

0800d648 <half_deceleration>:

/* memo:半区画減速
 * param:
 *  * */
void half_deceleration (void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
	/*m移動方向、加速モード設定*/
	move_dir_flg = forward_mode;
 800d64c:	4b1e      	ldr	r3, [pc, #120]	; (800d6c8 <half_deceleration+0x80>)
 800d64e:	2200      	movs	r2, #0
 800d650:	701a      	strb	r2, [r3, #0]
	accel_dir_flg = deceleration;
 800d652:	4b1e      	ldr	r3, [pc, #120]	; (800d6cc <half_deceleration+0x84>)
 800d654:	2201      	movs	r2, #1
 800d656:	701a      	strb	r2, [r3, #0]
    target_distance_m_set(0.045);
 800d658:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800d6d0 <half_deceleration+0x88>
 800d65c:	f7ff fede 	bl	800d41c <target_distance_m_set>

    /*m 半区画進むまで待機*/
    while (1)
    {
    	if(ABS(target_distance_m - ideal_distance_m) < 0.0002)//0.1mm手前まできたらブレイク
 800d660:	4b1c      	ldr	r3, [pc, #112]	; (800d6d4 <half_deceleration+0x8c>)
 800d662:	ed93 7a00 	vldr	s14, [r3]
 800d666:	4b1c      	ldr	r3, [pc, #112]	; (800d6d8 <half_deceleration+0x90>)
 800d668:	edd3 7a00 	vldr	s15, [r3]
 800d66c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d678:	d50a      	bpl.n	800d690 <half_deceleration+0x48>
 800d67a:	4b16      	ldr	r3, [pc, #88]	; (800d6d4 <half_deceleration+0x8c>)
 800d67c:	ed93 7a00 	vldr	s14, [r3]
 800d680:	4b15      	ldr	r3, [pc, #84]	; (800d6d8 <half_deceleration+0x90>)
 800d682:	edd3 7a00 	vldr	s15, [r3]
 800d686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d68a:	eef1 7a67 	vneg.f32	s15, s15
 800d68e:	e007      	b.n	800d6a0 <half_deceleration+0x58>
 800d690:	4b10      	ldr	r3, [pc, #64]	; (800d6d4 <half_deceleration+0x8c>)
 800d692:	ed93 7a00 	vldr	s14, [r3]
 800d696:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <half_deceleration+0x90>)
 800d698:	edd3 7a00 	vldr	s15, [r3]
 800d69c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6a0:	ee17 0a90 	vmov	r0, s15
 800d6a4:	f7f2 ff78 	bl	8000598 <__aeabi_f2d>
 800d6a8:	a305      	add	r3, pc, #20	; (adr r3, 800d6c0 <half_deceleration+0x78>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f3 fa3d 	bl	8000b2c <__aeabi_dcmplt>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d100      	bne.n	800d6ba <half_deceleration+0x72>
 800d6b8:	e7d2      	b.n	800d660 <half_deceleration+0x18>
    	{
    		break;
 800d6ba:	bf00      	nop
    	}
    }
}
 800d6bc:	bf00      	nop
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	eb1c432d 	.word	0xeb1c432d
 800d6c4:	3f2a36e2 	.word	0x3f2a36e2
 800d6c8:	2001b2a4 	.word	0x2001b2a4
 800d6cc:	2001b2a6 	.word	0x2001b2a6
 800d6d0:	3d3851ec 	.word	0x3d3851ec
 800d6d4:	2001b284 	.word	0x2001b284
 800d6d8:	2001b28c 	.word	0x2001b28c
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <constant_speed>:

/* memo:一区画定速
 * param:
 *  * */
void constant_speed (void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
	/*m移動方向、加速モード設定*/
	move_dir_flg = forward_mode;
 800d6e4:	4b1e      	ldr	r3, [pc, #120]	; (800d760 <constant_speed+0x80>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	701a      	strb	r2, [r3, #0]
	accel_dir_flg = acceleration;
 800d6ea:	4b1e      	ldr	r3, [pc, #120]	; (800d764 <constant_speed+0x84>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
    target_distance_m_set(0.09);
 800d6f0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800d768 <constant_speed+0x88>
 800d6f4:	f7ff fe92 	bl	800d41c <target_distance_m_set>

    /*m 一区画進むまで待機*/
    while (1)
    {
    	if(ABS(target_distance_m - ideal_distance_m) < 0.0002)//0.1mm手前まできたらブレイク
 800d6f8:	4b1c      	ldr	r3, [pc, #112]	; (800d76c <constant_speed+0x8c>)
 800d6fa:	ed93 7a00 	vldr	s14, [r3]
 800d6fe:	4b1c      	ldr	r3, [pc, #112]	; (800d770 <constant_speed+0x90>)
 800d700:	edd3 7a00 	vldr	s15, [r3]
 800d704:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d710:	d50a      	bpl.n	800d728 <constant_speed+0x48>
 800d712:	4b16      	ldr	r3, [pc, #88]	; (800d76c <constant_speed+0x8c>)
 800d714:	ed93 7a00 	vldr	s14, [r3]
 800d718:	4b15      	ldr	r3, [pc, #84]	; (800d770 <constant_speed+0x90>)
 800d71a:	edd3 7a00 	vldr	s15, [r3]
 800d71e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d722:	eef1 7a67 	vneg.f32	s15, s15
 800d726:	e007      	b.n	800d738 <constant_speed+0x58>
 800d728:	4b10      	ldr	r3, [pc, #64]	; (800d76c <constant_speed+0x8c>)
 800d72a:	ed93 7a00 	vldr	s14, [r3]
 800d72e:	4b10      	ldr	r3, [pc, #64]	; (800d770 <constant_speed+0x90>)
 800d730:	edd3 7a00 	vldr	s15, [r3]
 800d734:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d738:	ee17 0a90 	vmov	r0, s15
 800d73c:	f7f2 ff2c 	bl	8000598 <__aeabi_f2d>
 800d740:	a305      	add	r3, pc, #20	; (adr r3, 800d758 <constant_speed+0x78>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f7f3 f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d100      	bne.n	800d752 <constant_speed+0x72>
 800d750:	e7d2      	b.n	800d6f8 <constant_speed+0x18>
    	{
    		break;
 800d752:	bf00      	nop
    	}
    }
}
 800d754:	bf00      	nop
 800d756:	bd80      	pop	{r7, pc}
 800d758:	eb1c432d 	.word	0xeb1c432d
 800d75c:	3f2a36e2 	.word	0x3f2a36e2
 800d760:	2001b2a4 	.word	0x2001b2a4
 800d764:	2001b2a6 	.word	0x2001b2a6
 800d768:	3db851ec 	.word	0x3db851ec
 800d76c:	2001b284 	.word	0x2001b284
 800d770:	2001b28c 	.word	0x2001b28c
 800d774:	00000000 	.word	0x00000000

0800d778 <turn_clk_90>:

/* memo:90度時計回りに回転
 * param:
 *  * */
void turn_clk_90 (void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
	/*m回転方向設定*/
	rotation_dir_flg = clockwise;
 800d77c:	4b1e      	ldr	r3, [pc, #120]	; (800d7f8 <turn_clk_90+0x80>)
 800d77e:	2201      	movs	r2, #1
 800d780:	701a      	strb	r2, [r3, #0]
    target_distance_w_set(-PI/2);
 800d782:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800d7fc <turn_clk_90+0x84>
 800d786:	f7ff fe61 	bl	800d44c <target_distance_w_set>

    /*m90度回転するまで待機*/
    while (1)
    {
    	if(ABS(target_distance_w - ideal_distance_w) < 0.005)//0.3deg手前まできたらブレイク
 800d78a:	4b1d      	ldr	r3, [pc, #116]	; (800d800 <turn_clk_90+0x88>)
 800d78c:	ed93 7a00 	vldr	s14, [r3]
 800d790:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <turn_clk_90+0x8c>)
 800d792:	edd3 7a00 	vldr	s15, [r3]
 800d796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d79a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	d50a      	bpl.n	800d7ba <turn_clk_90+0x42>
 800d7a4:	4b16      	ldr	r3, [pc, #88]	; (800d800 <turn_clk_90+0x88>)
 800d7a6:	ed93 7a00 	vldr	s14, [r3]
 800d7aa:	4b16      	ldr	r3, [pc, #88]	; (800d804 <turn_clk_90+0x8c>)
 800d7ac:	edd3 7a00 	vldr	s15, [r3]
 800d7b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7b4:	eef1 7a67 	vneg.f32	s15, s15
 800d7b8:	e007      	b.n	800d7ca <turn_clk_90+0x52>
 800d7ba:	4b11      	ldr	r3, [pc, #68]	; (800d800 <turn_clk_90+0x88>)
 800d7bc:	ed93 7a00 	vldr	s14, [r3]
 800d7c0:	4b10      	ldr	r3, [pc, #64]	; (800d804 <turn_clk_90+0x8c>)
 800d7c2:	edd3 7a00 	vldr	s15, [r3]
 800d7c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7ca:	ee17 0a90 	vmov	r0, s15
 800d7ce:	f7f2 fee3 	bl	8000598 <__aeabi_f2d>
 800d7d2:	a307      	add	r3, pc, #28	; (adr r3, 800d7f0 <turn_clk_90+0x78>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	f7f3 f9a8 	bl	8000b2c <__aeabi_dcmplt>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d100      	bne.n	800d7e4 <turn_clk_90+0x6c>
 800d7e2:	e7d2      	b.n	800d78a <turn_clk_90+0x12>
    	{
    		break;
 800d7e4:	bf00      	nop
    	}
    }

}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	f3af 8000 	nop.w
 800d7f0:	47ae147b 	.word	0x47ae147b
 800d7f4:	3f747ae1 	.word	0x3f747ae1
 800d7f8:	2001b2a5 	.word	0x2001b2a5
 800d7fc:	bfc90fda 	.word	0xbfc90fda
 800d800:	2001b288 	.word	0x2001b288
 800d804:	2001b290 	.word	0x2001b290

0800d808 <turn_conclk_90>:

/* memo:90度反時計回りに回転
 * param:
 *  * */
void turn_conclk_90 (void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
	/*m回転方向設定*/
	rotation_dir_flg = counter_clockwise;
 800d80c:	4b1e      	ldr	r3, [pc, #120]	; (800d888 <turn_conclk_90+0x80>)
 800d80e:	2200      	movs	r2, #0
 800d810:	701a      	strb	r2, [r3, #0]
    target_distance_w_set(PI/2);
 800d812:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800d88c <turn_conclk_90+0x84>
 800d816:	f7ff fe19 	bl	800d44c <target_distance_w_set>

    /*m90度回転するまで待機*/
    while (1)
    {
    	if(ABS(target_distance_w - ideal_distance_w) < 0.005)//0.3deg手前まできたらブレイク
 800d81a:	4b1d      	ldr	r3, [pc, #116]	; (800d890 <turn_conclk_90+0x88>)
 800d81c:	ed93 7a00 	vldr	s14, [r3]
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <turn_conclk_90+0x8c>)
 800d822:	edd3 7a00 	vldr	s15, [r3]
 800d826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d82a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d832:	d50a      	bpl.n	800d84a <turn_conclk_90+0x42>
 800d834:	4b16      	ldr	r3, [pc, #88]	; (800d890 <turn_conclk_90+0x88>)
 800d836:	ed93 7a00 	vldr	s14, [r3]
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <turn_conclk_90+0x8c>)
 800d83c:	edd3 7a00 	vldr	s15, [r3]
 800d840:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d844:	eef1 7a67 	vneg.f32	s15, s15
 800d848:	e007      	b.n	800d85a <turn_conclk_90+0x52>
 800d84a:	4b11      	ldr	r3, [pc, #68]	; (800d890 <turn_conclk_90+0x88>)
 800d84c:	ed93 7a00 	vldr	s14, [r3]
 800d850:	4b10      	ldr	r3, [pc, #64]	; (800d894 <turn_conclk_90+0x8c>)
 800d852:	edd3 7a00 	vldr	s15, [r3]
 800d856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d85a:	ee17 0a90 	vmov	r0, s15
 800d85e:	f7f2 fe9b 	bl	8000598 <__aeabi_f2d>
 800d862:	a307      	add	r3, pc, #28	; (adr r3, 800d880 <turn_conclk_90+0x78>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f3 f960 	bl	8000b2c <__aeabi_dcmplt>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d100      	bne.n	800d874 <turn_conclk_90+0x6c>
 800d872:	e7d2      	b.n	800d81a <turn_conclk_90+0x12>
    	{
    		break;
 800d874:	bf00      	nop
    	}
    }

}
 800d876:	bf00      	nop
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	f3af 8000 	nop.w
 800d880:	47ae147b 	.word	0x47ae147b
 800d884:	3f747ae1 	.word	0x3f747ae1
 800d888:	2001b2a5 	.word	0x2001b2a5
 800d88c:	3fc90fda 	.word	0x3fc90fda
 800d890:	2001b288 	.word	0x2001b288
 800d894:	2001b290 	.word	0x2001b290

0800d898 <turn_conclk_180>:

/* memo:180度反時計回りに回転
 * param:
 *  * */
void turn_conclk_180 (void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
	/*m回転方向設定*/
	rotation_dir_flg = counter_clockwise;
 800d89c:	4b1e      	ldr	r3, [pc, #120]	; (800d918 <turn_conclk_180+0x80>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	701a      	strb	r2, [r3, #0]
    target_distance_w_set(PI);
 800d8a2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800d91c <turn_conclk_180+0x84>
 800d8a6:	f7ff fdd1 	bl	800d44c <target_distance_w_set>

    /*m180度回転するまで待機*/
    while (1)
    {
    	if(ABS(target_distance_w - ideal_distance_w) < 0.005)//0.3deg手前まできたらブレイク
 800d8aa:	4b1d      	ldr	r3, [pc, #116]	; (800d920 <turn_conclk_180+0x88>)
 800d8ac:	ed93 7a00 	vldr	s14, [r3]
 800d8b0:	4b1c      	ldr	r3, [pc, #112]	; (800d924 <turn_conclk_180+0x8c>)
 800d8b2:	edd3 7a00 	vldr	s15, [r3]
 800d8b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c2:	d50a      	bpl.n	800d8da <turn_conclk_180+0x42>
 800d8c4:	4b16      	ldr	r3, [pc, #88]	; (800d920 <turn_conclk_180+0x88>)
 800d8c6:	ed93 7a00 	vldr	s14, [r3]
 800d8ca:	4b16      	ldr	r3, [pc, #88]	; (800d924 <turn_conclk_180+0x8c>)
 800d8cc:	edd3 7a00 	vldr	s15, [r3]
 800d8d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8d4:	eef1 7a67 	vneg.f32	s15, s15
 800d8d8:	e007      	b.n	800d8ea <turn_conclk_180+0x52>
 800d8da:	4b11      	ldr	r3, [pc, #68]	; (800d920 <turn_conclk_180+0x88>)
 800d8dc:	ed93 7a00 	vldr	s14, [r3]
 800d8e0:	4b10      	ldr	r3, [pc, #64]	; (800d924 <turn_conclk_180+0x8c>)
 800d8e2:	edd3 7a00 	vldr	s15, [r3]
 800d8e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8ea:	ee17 0a90 	vmov	r0, s15
 800d8ee:	f7f2 fe53 	bl	8000598 <__aeabi_f2d>
 800d8f2:	a307      	add	r3, pc, #28	; (adr r3, 800d910 <turn_conclk_180+0x78>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f3 f918 	bl	8000b2c <__aeabi_dcmplt>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d100      	bne.n	800d904 <turn_conclk_180+0x6c>
 800d902:	e7d2      	b.n	800d8aa <turn_conclk_180+0x12>
    	{
    		break;
 800d904:	bf00      	nop
    	}
    }

}
 800d906:	bf00      	nop
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	f3af 8000 	nop.w
 800d910:	47ae147b 	.word	0x47ae147b
 800d914:	3f747ae1 	.word	0x3f747ae1
 800d918:	2001b2a5 	.word	0x2001b2a5
 800d91c:	40490fda 	.word	0x40490fda
 800d920:	2001b288 	.word	0x2001b288
 800d924:	2001b290 	.word	0x2001b290

0800d928 <move_front>:

/* memo:一区画前進
 * param:
 *  * */
void move_front (void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
	if(run_first_flg == start){
 800d92c:	4b09      	ldr	r3, [pc, #36]	; (800d954 <move_front+0x2c>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <move_front+0x10>
		half_acceleration();//半区画加速
 800d934:	f7ff fe3c 	bl	800d5b0 <half_acceleration>
	}
	if(run_first_flg == other){
 800d938:	4b06      	ldr	r3, [pc, #24]	; (800d954 <move_front+0x2c>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d101      	bne.n	800d944 <move_front+0x1c>
		constant_speed();//定速で一マス前進
 800d940:	f7ff fece 	bl	800d6e0 <constant_speed>
	}
	run_first_flg = other;
 800d944:	4b03      	ldr	r3, [pc, #12]	; (800d954 <move_front+0x2c>)
 800d946:	2201      	movs	r2, #1
 800d948:	701a      	strb	r2, [r3, #0]
	front_wall_calib_flg_clr();
 800d94a:	f7ff fdcf 	bl	800d4ec <front_wall_calib_flg_clr>
}
 800d94e:	bf00      	nop
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	2001b2a7 	.word	0x2001b2a7

0800d958 <move_right>:

/* memo:右折
 * param:
 *  * */
void move_right (void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
	if(run_first_flg == start){
 800d95c:	4b12      	ldr	r3, [pc, #72]	; (800d9a8 <move_right+0x50>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d109      	bne.n	800d978 <move_right+0x20>
		if(front_calib_flg == 1){
 800d964:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <move_right+0x54>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d101      	bne.n	800d970 <move_right+0x18>
			fornt_wall_calibrate();
 800d96c:	f000 f8a8 	bl	800dac0 <fornt_wall_calibrate>
		}
		turn_clk_90();		//m時計回りに90度回転
 800d970:	f7ff ff02 	bl	800d778 <turn_clk_90>
		half_acceleration();//m半区画加速
 800d974:	f7ff fe1c 	bl	800d5b0 <half_acceleration>
	}
	if(run_first_flg == other){
 800d978:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <move_right+0x50>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d10b      	bne.n	800d998 <move_right+0x40>
		half_deceleration();//m半区画減速で中央に停止
 800d980:	f7ff fe62 	bl	800d648 <half_deceleration>
		if(front_calib_flg == 1){
 800d984:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <move_right+0x54>)
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d101      	bne.n	800d990 <move_right+0x38>
			fornt_wall_calibrate();
 800d98c:	f000 f898 	bl	800dac0 <fornt_wall_calibrate>
		}
		turn_clk_90();		//m時計回りに90度回転
 800d990:	f7ff fef2 	bl	800d778 <turn_clk_90>
		half_acceleration();//m半区画加速
 800d994:	f7ff fe0c 	bl	800d5b0 <half_acceleration>
	}
	run_first_flg = other;
 800d998:	4b03      	ldr	r3, [pc, #12]	; (800d9a8 <move_right+0x50>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	701a      	strb	r2, [r3, #0]
	front_wall_calib_flg_clr();
 800d99e:	f7ff fda5 	bl	800d4ec <front_wall_calib_flg_clr>
}
 800d9a2:	bf00      	nop
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	2001b2a7 	.word	0x2001b2a7
 800d9ac:	2001bbc4 	.word	0x2001bbc4

0800d9b0 <move_left>:

/* memo:左折
 * param:
 *  * */
void move_left (void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
	if(run_first_flg == start){
 800d9b4:	4b12      	ldr	r3, [pc, #72]	; (800da00 <move_left+0x50>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d109      	bne.n	800d9d0 <move_left+0x20>
		if(front_calib_flg == 1){
 800d9bc:	4b11      	ldr	r3, [pc, #68]	; (800da04 <move_left+0x54>)
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <move_left+0x18>
			fornt_wall_calibrate();
 800d9c4:	f000 f87c 	bl	800dac0 <fornt_wall_calibrate>
		}
		turn_conclk_90();	//m反時計回りに90度回転
 800d9c8:	f7ff ff1e 	bl	800d808 <turn_conclk_90>
		half_acceleration();//m半区画加速
 800d9cc:	f7ff fdf0 	bl	800d5b0 <half_acceleration>
	}
	if(run_first_flg == other){
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <move_left+0x50>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d10b      	bne.n	800d9f0 <move_left+0x40>
		half_deceleration();//m半区画減速で中央に停止
 800d9d8:	f7ff fe36 	bl	800d648 <half_deceleration>
		if(front_calib_flg == 1){
 800d9dc:	4b09      	ldr	r3, [pc, #36]	; (800da04 <move_left+0x54>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d101      	bne.n	800d9e8 <move_left+0x38>
			fornt_wall_calibrate();
 800d9e4:	f000 f86c 	bl	800dac0 <fornt_wall_calibrate>
		}
		turn_conclk_90();	//m反時計回りに90度回転
 800d9e8:	f7ff ff0e 	bl	800d808 <turn_conclk_90>
		half_acceleration();//m半区画加速
 800d9ec:	f7ff fde0 	bl	800d5b0 <half_acceleration>
	}
	run_first_flg = other;
 800d9f0:	4b03      	ldr	r3, [pc, #12]	; (800da00 <move_left+0x50>)
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	701a      	strb	r2, [r3, #0]
	front_wall_calib_flg_clr();
 800d9f6:	f7ff fd79 	bl	800d4ec <front_wall_calib_flg_clr>
}
 800d9fa:	bf00      	nop
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	2001b2a7 	.word	0x2001b2a7
 800da04:	2001bbc4 	.word	0x2001bbc4

0800da08 <move_back>:

/* memo:バック
 * param:
 *  * */
void move_back (void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
	if(run_first_flg == start){
 800da0c:	4b28      	ldr	r3, [pc, #160]	; (800dab0 <move_back+0xa8>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d11f      	bne.n	800da54 <move_back+0x4c>

		if(front_calib_flg == 1){
 800da14:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <move_back+0xac>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d117      	bne.n	800da4c <move_back+0x44>
			fornt_wall_calibrate();
 800da1c:	f000 f850 	bl	800dac0 <fornt_wall_calibrate>
			if(right_calib_flg == 1){
 800da20:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <move_back+0xb0>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d106      	bne.n	800da36 <move_back+0x2e>
				turn_clk_90();
 800da28:	f7ff fea6 	bl	800d778 <turn_clk_90>
				fornt_wall_calibrate();
 800da2c:	f000 f848 	bl	800dac0 <fornt_wall_calibrate>
				turn_clk_90();
 800da30:	f7ff fea2 	bl	800d778 <turn_clk_90>
 800da34:	e00c      	b.n	800da50 <move_back+0x48>
			}
			else if(left_calib_flg == 1){
 800da36:	4b21      	ldr	r3, [pc, #132]	; (800dabc <move_back+0xb4>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d108      	bne.n	800da50 <move_back+0x48>
					turn_conclk_90();
 800da3e:	f7ff fee3 	bl	800d808 <turn_conclk_90>
					fornt_wall_calibrate();
 800da42:	f000 f83d 	bl	800dac0 <fornt_wall_calibrate>
					turn_conclk_90();
 800da46:	f7ff fedf 	bl	800d808 <turn_conclk_90>
 800da4a:	e001      	b.n	800da50 <move_back+0x48>
			}
		}
		else{
			turn_conclk_180();	//m反時計回りに180度回転
 800da4c:	f7ff ff24 	bl	800d898 <turn_conclk_180>
		}
		half_acceleration();//m半区画加速
 800da50:	f7ff fdae 	bl	800d5b0 <half_acceleration>
	}
	if(run_first_flg == other){
 800da54:	4b16      	ldr	r3, [pc, #88]	; (800dab0 <move_back+0xa8>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d121      	bne.n	800daa0 <move_back+0x98>
		half_deceleration();//m半区画減速で中央に停止
 800da5c:	f7ff fdf4 	bl	800d648 <half_deceleration>
		if(front_calib_flg == 1){
 800da60:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <move_back+0xac>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d117      	bne.n	800da98 <move_back+0x90>
			fornt_wall_calibrate();
 800da68:	f000 f82a 	bl	800dac0 <fornt_wall_calibrate>
			if(right_calib_flg == 1){
 800da6c:	4b12      	ldr	r3, [pc, #72]	; (800dab8 <move_back+0xb0>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d106      	bne.n	800da82 <move_back+0x7a>
				turn_clk_90();
 800da74:	f7ff fe80 	bl	800d778 <turn_clk_90>
				fornt_wall_calibrate();
 800da78:	f000 f822 	bl	800dac0 <fornt_wall_calibrate>
				turn_clk_90();
 800da7c:	f7ff fe7c 	bl	800d778 <turn_clk_90>
 800da80:	e00c      	b.n	800da9c <move_back+0x94>
			}
			else if(left_calib_flg == 1){
 800da82:	4b0e      	ldr	r3, [pc, #56]	; (800dabc <move_back+0xb4>)
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d108      	bne.n	800da9c <move_back+0x94>
					turn_conclk_90();
 800da8a:	f7ff febd 	bl	800d808 <turn_conclk_90>
					fornt_wall_calibrate();
 800da8e:	f000 f817 	bl	800dac0 <fornt_wall_calibrate>
					turn_conclk_90();
 800da92:	f7ff feb9 	bl	800d808 <turn_conclk_90>
 800da96:	e001      	b.n	800da9c <move_back+0x94>
			}
		}
		else{
			turn_conclk_180();	//m反時計回りに180度回転
 800da98:	f7ff fefe 	bl	800d898 <turn_conclk_180>
		}
		half_acceleration();//m半区画加速
 800da9c:	f7ff fd88 	bl	800d5b0 <half_acceleration>
	}
	run_first_flg = other;
 800daa0:	4b03      	ldr	r3, [pc, #12]	; (800dab0 <move_back+0xa8>)
 800daa2:	2201      	movs	r2, #1
 800daa4:	701a      	strb	r2, [r3, #0]
	front_wall_calib_flg_clr();
 800daa6:	f7ff fd21 	bl	800d4ec <front_wall_calib_flg_clr>
}
 800daaa:	bf00      	nop
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	2001b2a7 	.word	0x2001b2a7
 800dab4:	2001bbc4 	.word	0x2001bbc4
 800dab8:	2001bbc6 	.word	0x2001bbc6
 800dabc:	2001bbc5 	.word	0x2001bbc5

0800dac0 <fornt_wall_calibrate>:

/* memo:前壁補正
 * param:
 *  * */
void fornt_wall_calibrate (void)
{
 800dac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dac4:	b088      	sub	sp, #32
 800dac6:	af02      	add	r7, sp, #8
	double temp_r;
	double temp_l;
	double temp;


	  correction_mode = 1; //m 前壁補正モードに切り替え
 800dac8:	4b61      	ldr	r3, [pc, #388]	; (800dc50 <fornt_wall_calibrate+0x190>)
 800daca:	2201      	movs	r2, #1
 800dacc:	701a      	strb	r2, [r3, #0]
	  fornt_wall_calibrate_tim = 0; //m前壁補正タイマを初期化
 800dace:	4b61      	ldr	r3, [pc, #388]	; (800dc54 <fornt_wall_calibrate+0x194>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	801a      	strh	r2, [r3, #0]

	  while(1)
	  {
		  temp_r = ABS(front_sensor_r_ref - SensorValue2length(3));
 800dad4:	2003      	movs	r0, #3
 800dad6:	f7f9 f85b 	bl	8006b90 <SensorValue2length>
 800dada:	ec53 2b10 	vmov	r2, r3, d0
 800dade:	a156      	add	r1, pc, #344	; (adr r1, 800dc38 <fornt_wall_calibrate+0x178>)
 800dae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae4:	f7f2 fbf8 	bl	80002d8 <__aeabi_dsub>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4610      	mov	r0, r2
 800daee:	4619      	mov	r1, r3
 800daf0:	f04f 0200 	mov.w	r2, #0
 800daf4:	f04f 0300 	mov.w	r3, #0
 800daf8:	f7f3 f818 	bl	8000b2c <__aeabi_dcmplt>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00f      	beq.n	800db22 <fornt_wall_calibrate+0x62>
 800db02:	2003      	movs	r0, #3
 800db04:	f7f9 f844 	bl	8006b90 <SensorValue2length>
 800db08:	ec53 2b10 	vmov	r2, r3, d0
 800db0c:	a14a      	add	r1, pc, #296	; (adr r1, 800dc38 <fornt_wall_calibrate+0x178>)
 800db0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db12:	f7f2 fbe1 	bl	80002d8 <__aeabi_dsub>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4614      	mov	r4, r2
 800db1c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800db20:	e00f      	b.n	800db42 <fornt_wall_calibrate+0x82>
 800db22:	2003      	movs	r0, #3
 800db24:	f7f9 f834 	bl	8006b90 <SensorValue2length>
 800db28:	ec54 3b10 	vmov	r3, r4, d0
 800db2c:	461a      	mov	r2, r3
 800db2e:	4623      	mov	r3, r4
 800db30:	a141      	add	r1, pc, #260	; (adr r1, 800dc38 <fornt_wall_calibrate+0x178>)
 800db32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db36:	f7f2 fbcf 	bl	80002d8 <__aeabi_dsub>
 800db3a:	4603      	mov	r3, r0
 800db3c:	460c      	mov	r4, r1
 800db3e:	4625      	mov	r5, r4
 800db40:	461c      	mov	r4, r3
 800db42:	e9c7 4504 	strd	r4, r5, [r7, #16]
		  temp_l = ABS(front_sensor_l_ref - SensorValue2length(0));
 800db46:	2000      	movs	r0, #0
 800db48:	f7f9 f822 	bl	8006b90 <SensorValue2length>
 800db4c:	ec53 2b10 	vmov	r2, r3, d0
 800db50:	a13b      	add	r1, pc, #236	; (adr r1, 800dc40 <fornt_wall_calibrate+0x180>)
 800db52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db56:	f7f2 fbbf 	bl	80002d8 <__aeabi_dsub>
 800db5a:	4602      	mov	r2, r0
 800db5c:	460b      	mov	r3, r1
 800db5e:	4610      	mov	r0, r2
 800db60:	4619      	mov	r1, r3
 800db62:	f04f 0200 	mov.w	r2, #0
 800db66:	f04f 0300 	mov.w	r3, #0
 800db6a:	f7f2 ffdf 	bl	8000b2c <__aeabi_dcmplt>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00f      	beq.n	800db94 <fornt_wall_calibrate+0xd4>
 800db74:	2000      	movs	r0, #0
 800db76:	f7f9 f80b 	bl	8006b90 <SensorValue2length>
 800db7a:	ec53 2b10 	vmov	r2, r3, d0
 800db7e:	a130      	add	r1, pc, #192	; (adr r1, 800dc40 <fornt_wall_calibrate+0x180>)
 800db80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db84:	f7f2 fba8 	bl	80002d8 <__aeabi_dsub>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4690      	mov	r8, r2
 800db8e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800db92:	e00d      	b.n	800dbb0 <fornt_wall_calibrate+0xf0>
 800db94:	2000      	movs	r0, #0
 800db96:	f7f8 fffb 	bl	8006b90 <SensorValue2length>
 800db9a:	ec53 2b10 	vmov	r2, r3, d0
 800db9e:	a128      	add	r1, pc, #160	; (adr r1, 800dc40 <fornt_wall_calibrate+0x180>)
 800dba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba4:	f7f2 fb98 	bl	80002d8 <__aeabi_dsub>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4690      	mov	r8, r2
 800dbae:	4699      	mov	r9, r3
 800dbb0:	e9c7 8902 	strd	r8, r9, [r7, #8]
		  temp = MAX(temp_r,temp_l);
 800dbb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbbc:	f7f2 ffd4 	bl	8000b68 <__aeabi_dcmpgt>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <fornt_wall_calibrate+0x10c>
 800dbc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dbca:	e001      	b.n	800dbd0 <fornt_wall_calibrate+0x110>
 800dbcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbd0:	e9c7 2300 	strd	r2, r3, [r7]
		  //mセンサ値が基準より差を持つとき、タイマをリセット
		  if(temp > front_sensor_th){
 800dbd4:	a31c      	add	r3, pc, #112	; (adr r3, 800dc48 <fornt_wall_calibrate+0x188>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbde:	f7f2 ffc3 	bl	8000b68 <__aeabi_dcmpgt>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <fornt_wall_calibrate+0x12e>
			  fornt_wall_calibrate_tim = 0;
 800dbe8:	4b1a      	ldr	r3, [pc, #104]	; (800dc54 <fornt_wall_calibrate+0x194>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	801a      	strh	r2, [r3, #0]
		  }
		  //m キャリブレーション時間を超えるとき、ブレイク
		  if(fornt_wall_calibrate_tim >= calib_tim ){
 800dbee:	4b19      	ldr	r3, [pc, #100]	; (800dc54 <fornt_wall_calibrate+0x194>)
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	2b63      	cmp	r3, #99	; 0x63
 800dbf4:	d808      	bhi.n	800dc08 <fornt_wall_calibrate+0x148>
			  break;
		  }
		  printf("temp: %8.5f,time:%8.5d \r\n",temp,fornt_wall_calibrate_tim);
 800dbf6:	4b17      	ldr	r3, [pc, #92]	; (800dc54 <fornt_wall_calibrate+0x194>)
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc00:	4815      	ldr	r0, [pc, #84]	; (800dc58 <fornt_wall_calibrate+0x198>)
 800dc02:	f001 fd5d 	bl	800f6c0 <iprintf>
		  temp_r = ABS(front_sensor_r_ref - SensorValue2length(3));
 800dc06:	e765      	b.n	800dad4 <fornt_wall_calibrate+0x14>
			  break;
 800dc08:	bf00      	nop
	  }

	  //m 補正終了時、移動距離、角度を初期化
	  real_distance_m_clr();
 800dc0a:	f7ff fbeb 	bl	800d3e4 <real_distance_m_clr>
	  real_distance_w_clr();
 800dc0e:	f7ff fbf7 	bl	800d400 <real_distance_w_clr>
	  target_distance_m_clr();
 800dc12:	f7ff fc33 	bl	800d47c <target_distance_m_clr>
	  target_distance_w_clr();
 800dc16:	f7ff fc3f 	bl	800d498 <target_distance_w_clr>
	  ideal_distance_m_clr();
 800dc1a:	f7ff fc4b 	bl	800d4b4 <ideal_distance_m_clr>
	  ideal_distance_w_clr();
 800dc1e:	f7ff fc57 	bl	800d4d0 <ideal_distance_w_clr>

	  //m 補正モードを目標速度に変更
	  correction_mode = 0;
 800dc22:	4b0b      	ldr	r3, [pc, #44]	; (800dc50 <fornt_wall_calibrate+0x190>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	701a      	strb	r2, [r3, #0]
}
 800dc28:	bf00      	nop
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
 800dc38:	e0000000 	.word	0xe0000000
 800dc3c:	3f878d4f 	.word	0x3f878d4f
 800dc40:	60000000 	.word	0x60000000
 800dc44:	3f8374bc 	.word	0x3f8374bc
 800dc48:	eb1c432d 	.word	0xeb1c432d
 800dc4c:	3f2a36e2 	.word	0x3f2a36e2
 800dc50:	2001b2a8 	.word	0x2001b2a8
 800dc54:	2001b2aa 	.word	0x2001b2aa
 800dc58:	08013668 	.word	0x08013668

0800dc5c <calibrate_tim>:

/* memo:前壁補正用タイマ
 * param:
 *  * */
void calibrate_tim (void){
 800dc5c:	b480      	push	{r7}
 800dc5e:	af00      	add	r7, sp, #0

	fornt_wall_calibrate_tim += 1;
 800dc60:	4b08      	ldr	r3, [pc, #32]	; (800dc84 <calibrate_tim+0x28>)
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	4b06      	ldr	r3, [pc, #24]	; (800dc84 <calibrate_tim+0x28>)
 800dc6a:	801a      	strh	r2, [r3, #0]

	if(fornt_wall_calibrate_tim > calib_tim){
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <calibrate_tim+0x28>)
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	2b64      	cmp	r3, #100	; 0x64
 800dc72:	d902      	bls.n	800dc7a <calibrate_tim+0x1e>
		fornt_wall_calibrate_tim = calib_tim;
 800dc74:	4b03      	ldr	r3, [pc, #12]	; (800dc84 <calibrate_tim+0x28>)
 800dc76:	2264      	movs	r2, #100	; 0x64
 800dc78:	801a      	strh	r2, [r3, #0]
	}
}
 800dc7a:	bf00      	nop
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	2001b2aa 	.word	0x2001b2aa

0800dc88 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b096      	sub	sp, #88	; 0x58
 800dc8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc92:	2200      	movs	r2, #0
 800dc94:	601a      	str	r2, [r3, #0]
 800dc96:	605a      	str	r2, [r3, #4]
 800dc98:	609a      	str	r2, [r3, #8]
 800dc9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dca0:	2200      	movs	r2, #0
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	605a      	str	r2, [r3, #4]
 800dcb0:	609a      	str	r2, [r3, #8]
 800dcb2:	60da      	str	r2, [r3, #12]
 800dcb4:	611a      	str	r2, [r3, #16]
 800dcb6:	615a      	str	r2, [r3, #20]
 800dcb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dcba:	1d3b      	adds	r3, r7, #4
 800dcbc:	2220      	movs	r2, #32
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fe0e 	bl	800e8e2 <memset>

  htim1.Instance = TIM1;
 800dcc6:	4b51      	ldr	r3, [pc, #324]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcc8:	4a51      	ldr	r2, [pc, #324]	; (800de10 <MX_TIM1_Init+0x188>)
 800dcca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800dccc:	4b4f      	ldr	r3, [pc, #316]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcd2:	4b4e      	ldr	r3, [pc, #312]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 800dcd8:	4b4c      	ldr	r3, [pc, #304]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcda:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800dcde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dce0:	4b4a      	ldr	r3, [pc, #296]	; (800de0c <MX_TIM1_Init+0x184>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800dce6:	4b49      	ldr	r3, [pc, #292]	; (800de0c <MX_TIM1_Init+0x184>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcec:	4b47      	ldr	r3, [pc, #284]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dcf2:	4846      	ldr	r0, [pc, #280]	; (800de0c <MX_TIM1_Init+0x184>)
 800dcf4:	f7f6 f8e8 	bl	8003ec8 <HAL_TIM_Base_Init>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800dcfe:	f7f9 fa31 	bl	8007164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dd08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	483f      	ldr	r0, [pc, #252]	; (800de0c <MX_TIM1_Init+0x184>)
 800dd10:	f7f6 fd60 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800dd1a:	f7f9 fa23 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800dd1e:	483b      	ldr	r0, [pc, #236]	; (800de0c <MX_TIM1_Init+0x184>)
 800dd20:	f7f6 f994 	bl	800404c <HAL_TIM_PWM_Init>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800dd2a:	f7f9 fa1b 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800dd2e:	4837      	ldr	r0, [pc, #220]	; (800de0c <MX_TIM1_Init+0x184>)
 800dd30:	f7f6 f919 	bl	8003f66 <HAL_TIM_OC_Init>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800dd3a:	f7f9 fa13 	bl	8007164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800dd46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	482f      	ldr	r0, [pc, #188]	; (800de0c <MX_TIM1_Init+0x184>)
 800dd4e:	f7f7 f93a 	bl	8004fc6 <HAL_TIMEx_MasterConfigSynchronization>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800dd58:	f7f9 fa04 	bl	8007164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd5c:	2360      	movs	r3, #96	; 0x60
 800dd5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2-1;
 800dd60:	2301      	movs	r3, #1
 800dd62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd64:	2300      	movs	r3, #0
 800dd66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800dd70:	2300      	movs	r3, #0
 800dd72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800dd74:	2300      	movs	r3, #0
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4822      	ldr	r0, [pc, #136]	; (800de0c <MX_TIM1_Init+0x184>)
 800dd82:	f7f6 fc61 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800dd8c:	f7f9 f9ea 	bl	8007164 <Error_Handler>
  }
  sConfigOC.Pulse = 7000;
 800dd90:	f641 3358 	movw	r3, #7000	; 0x1b58
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dd96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd9a:	2204      	movs	r2, #4
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	481b      	ldr	r0, [pc, #108]	; (800de0c <MX_TIM1_Init+0x184>)
 800dda0:	f7f6 fc52 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800ddaa:	f7f9 f9db 	bl	8007164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ddae:	2330      	movs	r3, #48	; 0x30
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5760;
 800ddb2:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 800ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ddb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddbc:	2208      	movs	r2, #8
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	4812      	ldr	r0, [pc, #72]	; (800de0c <MX_TIM1_Init+0x184>)
 800ddc2:	f7f6 fbe1 	bl	8004588 <HAL_TIM_OC_ConfigChannel>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800ddcc:	f7f9 f9ca 	bl	8007164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800dddc:	2300      	movs	r3, #0
 800ddde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dde4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dde8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ddea:	2300      	movs	r3, #0
 800ddec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ddee:	1d3b      	adds	r3, r7, #4
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	4806      	ldr	r0, [pc, #24]	; (800de0c <MX_TIM1_Init+0x184>)
 800ddf4:	f7f7 f92c 	bl	8005050 <HAL_TIMEx_ConfigBreakDeadTime>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800ddfe:	f7f9 f9b1 	bl	8007164 <Error_Handler>
  }

}
 800de02:	bf00      	nop
 800de04:	3758      	adds	r7, #88	; 0x58
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	2001be88 	.word	0x2001be88
 800de10:	40010000 	.word	0x40010000

0800de14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b08c      	sub	sp, #48	; 0x30
 800de18:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800de1a:	f107 030c 	add.w	r3, r7, #12
 800de1e:	2224      	movs	r2, #36	; 0x24
 800de20:	2100      	movs	r1, #0
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fd5d 	bl	800e8e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de28:	1d3b      	adds	r3, r7, #4
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800de30:	4b21      	ldr	r3, [pc, #132]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800de36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800de38:	4b1f      	ldr	r3, [pc, #124]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de3e:	4b1e      	ldr	r3, [pc, #120]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de40:	2200      	movs	r2, #0
 800de42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800de44:	4b1c      	ldr	r3, [pc, #112]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de4c:	4b1a      	ldr	r3, [pc, #104]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de4e:	2200      	movs	r2, #0
 800de50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de52:	4b19      	ldr	r3, [pc, #100]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de54:	2200      	movs	r2, #0
 800de56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800de58:	2303      	movs	r3, #3
 800de5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800de5c:	2300      	movs	r3, #0
 800de5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800de60:	2301      	movs	r3, #1
 800de62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800de64:	2300      	movs	r3, #0
 800de66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800de68:	2300      	movs	r3, #0
 800de6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800de6c:	2300      	movs	r3, #0
 800de6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800de70:	2301      	movs	r3, #1
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800de74:	2300      	movs	r3, #0
 800de76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	4619      	mov	r1, r3
 800de82:	480d      	ldr	r0, [pc, #52]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800de84:	f7f6 f9ae 	bl	80041e4 <HAL_TIM_Encoder_Init>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800de8e:	f7f9 f969 	bl	8007164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de92:	2300      	movs	r3, #0
 800de94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de96:	2300      	movs	r3, #0
 800de98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800de9a:	1d3b      	adds	r3, r7, #4
 800de9c:	4619      	mov	r1, r3
 800de9e:	4806      	ldr	r0, [pc, #24]	; (800deb8 <MX_TIM2_Init+0xa4>)
 800dea0:	f7f7 f891 	bl	8004fc6 <HAL_TIMEx_MasterConfigSynchronization>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800deaa:	f7f9 f95b 	bl	8007164 <Error_Handler>
  }

}
 800deae:	bf00      	nop
 800deb0:	3730      	adds	r7, #48	; 0x30
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	2001bed8 	.word	0x2001bed8

0800debc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08c      	sub	sp, #48	; 0x30
 800dec0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800dec2:	f107 030c 	add.w	r3, r7, #12
 800dec6:	2224      	movs	r2, #36	; 0x24
 800dec8:	2100      	movs	r1, #0
 800deca:	4618      	mov	r0, r3
 800decc:	f000 fd09 	bl	800e8e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ded0:	1d3b      	adds	r3, r7, #4
 800ded2:	2200      	movs	r2, #0
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800ded8:	4b20      	ldr	r3, [pc, #128]	; (800df5c <MX_TIM3_Init+0xa0>)
 800deda:	4a21      	ldr	r2, [pc, #132]	; (800df60 <MX_TIM3_Init+0xa4>)
 800dedc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dede:	4b1f      	ldr	r3, [pc, #124]	; (800df5c <MX_TIM3_Init+0xa0>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dee4:	4b1d      	ldr	r3, [pc, #116]	; (800df5c <MX_TIM3_Init+0xa0>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800deea:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <MX_TIM3_Init+0xa0>)
 800deec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800def0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800def2:	4b1a      	ldr	r3, [pc, #104]	; (800df5c <MX_TIM3_Init+0xa0>)
 800def4:	2200      	movs	r2, #0
 800def6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800def8:	4b18      	ldr	r3, [pc, #96]	; (800df5c <MX_TIM3_Init+0xa0>)
 800defa:	2200      	movs	r2, #0
 800defc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800defe:	2303      	movs	r3, #3
 800df00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800df02:	2300      	movs	r3, #0
 800df04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800df06:	2301      	movs	r3, #1
 800df08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800df0a:	2300      	movs	r3, #0
 800df0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800df12:	2300      	movs	r3, #0
 800df14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800df16:	2301      	movs	r3, #1
 800df18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800df1a:	2300      	movs	r3, #0
 800df1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800df22:	f107 030c 	add.w	r3, r7, #12
 800df26:	4619      	mov	r1, r3
 800df28:	480c      	ldr	r0, [pc, #48]	; (800df5c <MX_TIM3_Init+0xa0>)
 800df2a:	f7f6 f95b 	bl	80041e4 <HAL_TIM_Encoder_Init>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800df34:	f7f9 f916 	bl	8007164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df38:	2300      	movs	r3, #0
 800df3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df3c:	2300      	movs	r3, #0
 800df3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800df40:	1d3b      	adds	r3, r7, #4
 800df42:	4619      	mov	r1, r3
 800df44:	4805      	ldr	r0, [pc, #20]	; (800df5c <MX_TIM3_Init+0xa0>)
 800df46:	f7f7 f83e 	bl	8004fc6 <HAL_TIMEx_MasterConfigSynchronization>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800df50:	f7f9 f908 	bl	8007164 <Error_Handler>
  }

}
 800df54:	bf00      	nop
 800df56:	3730      	adds	r7, #48	; 0x30
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	2001bdec 	.word	0x2001bdec
 800df60:	40000400 	.word	0x40000400

0800df64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08e      	sub	sp, #56	; 0x38
 800df68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	605a      	str	r2, [r3, #4]
 800df74:	609a      	str	r2, [r3, #8]
 800df76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df78:	f107 0320 	add.w	r3, r7, #32
 800df7c:	2200      	movs	r2, #0
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df82:	1d3b      	adds	r3, r7, #4
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	605a      	str	r2, [r3, #4]
 800df8a:	609a      	str	r2, [r3, #8]
 800df8c:	60da      	str	r2, [r3, #12]
 800df8e:	611a      	str	r2, [r3, #16]
 800df90:	615a      	str	r2, [r3, #20]
 800df92:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800df94:	4b3d      	ldr	r3, [pc, #244]	; (800e08c <MX_TIM4_Init+0x128>)
 800df96:	4a3e      	ldr	r2, [pc, #248]	; (800e090 <MX_TIM4_Init+0x12c>)
 800df98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800df9a:	4b3c      	ldr	r3, [pc, #240]	; (800e08c <MX_TIM4_Init+0x128>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dfa0:	4b3a      	ldr	r3, [pc, #232]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 960-1;
 800dfa6:	4b39      	ldr	r3, [pc, #228]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfa8:	f240 32bf 	movw	r2, #959	; 0x3bf
 800dfac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dfae:	4b37      	ldr	r3, [pc, #220]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dfb4:	4b35      	ldr	r3, [pc, #212]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800dfba:	4834      	ldr	r0, [pc, #208]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfbc:	f7f5 ff84 	bl	8003ec8 <HAL_TIM_Base_Init>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800dfc6:	f7f9 f8cd 	bl	8007164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800dfd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	482d      	ldr	r0, [pc, #180]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfd8:	f7f6 fbfc 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800dfe2:	f7f9 f8bf 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800dfe6:	4829      	ldr	r0, [pc, #164]	; (800e08c <MX_TIM4_Init+0x128>)
 800dfe8:	f7f6 f830 	bl	800404c <HAL_TIM_PWM_Init>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800dff2:	f7f9 f8b7 	bl	8007164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dff6:	2300      	movs	r3, #0
 800dff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dffa:	2300      	movs	r3, #0
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dffe:	f107 0320 	add.w	r3, r7, #32
 800e002:	4619      	mov	r1, r3
 800e004:	4821      	ldr	r0, [pc, #132]	; (800e08c <MX_TIM4_Init+0x128>)
 800e006:	f7f6 ffde 	bl	8004fc6 <HAL_TIMEx_MasterConfigSynchronization>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800e010:	f7f9 f8a8 	bl	8007164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800e014:	2370      	movs	r3, #112	; 0x70
 800e016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e020:	2300      	movs	r3, #0
 800e022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e024:	1d3b      	adds	r3, r7, #4
 800e026:	2200      	movs	r2, #0
 800e028:	4619      	mov	r1, r3
 800e02a:	4818      	ldr	r0, [pc, #96]	; (800e08c <MX_TIM4_Init+0x128>)
 800e02c:	f7f6 fb0c 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800e036:	f7f9 f895 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e03a:	1d3b      	adds	r3, r7, #4
 800e03c:	2204      	movs	r2, #4
 800e03e:	4619      	mov	r1, r3
 800e040:	4812      	ldr	r0, [pc, #72]	; (800e08c <MX_TIM4_Init+0x128>)
 800e042:	f7f6 fb01 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800e04c:	f7f9 f88a 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e050:	1d3b      	adds	r3, r7, #4
 800e052:	2208      	movs	r2, #8
 800e054:	4619      	mov	r1, r3
 800e056:	480d      	ldr	r0, [pc, #52]	; (800e08c <MX_TIM4_Init+0x128>)
 800e058:	f7f6 faf6 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800e062:	f7f9 f87f 	bl	8007164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e066:	1d3b      	adds	r3, r7, #4
 800e068:	220c      	movs	r2, #12
 800e06a:	4619      	mov	r1, r3
 800e06c:	4807      	ldr	r0, [pc, #28]	; (800e08c <MX_TIM4_Init+0x128>)
 800e06e:	f7f6 faeb 	bl	8004648 <HAL_TIM_PWM_ConfigChannel>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 800e078:	f7f9 f874 	bl	8007164 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800e07c:	4803      	ldr	r0, [pc, #12]	; (800e08c <MX_TIM4_Init+0x128>)
 800e07e:	f000 f999 	bl	800e3b4 <HAL_TIM_MspPostInit>

}
 800e082:	bf00      	nop
 800e084:	3738      	adds	r7, #56	; 0x38
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	2001bd44 	.word	0x2001bd44
 800e090:	40000800 	.word	0x40000800

0800e094 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e09a:	463b      	mov	r3, r7
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800e0a2:	4b15      	ldr	r3, [pc, #84]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0a4:	4a15      	ldr	r2, [pc, #84]	; (800e0fc <MX_TIM6_Init+0x68>)
 800e0a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4-1;
 800e0a8:	4b13      	ldr	r3, [pc, #76]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0aa:	2203      	movs	r2, #3
 800e0ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0ae:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24000-1;
 800e0b4:	4b10      	ldr	r3, [pc, #64]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0b6:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800e0ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0bc:	4b0e      	ldr	r3, [pc, #56]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e0c2:	480d      	ldr	r0, [pc, #52]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0c4:	f7f5 ff00 	bl	8003ec8 <HAL_TIM_Base_Init>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800e0ce:	f7f9 f849 	bl	8007164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e0da:	463b      	mov	r3, r7
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4806      	ldr	r0, [pc, #24]	; (800e0f8 <MX_TIM6_Init+0x64>)
 800e0e0:	f7f6 ff71 	bl	8004fc6 <HAL_TIMEx_MasterConfigSynchronization>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800e0ea:	f7f9 f83b 	bl	8007164 <Error_Handler>
  }

}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	2001be48 	.word	0x2001be48
 800e0fc:	40001000 	.word	0x40001000

0800e100 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a54      	ldr	r2, [pc, #336]	; (800e260 <HAL_TIM_Base_MspInit+0x160>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d172      	bne.n	800e1f8 <HAL_TIM_Base_MspInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e112:	2300      	movs	r3, #0
 800e114:	617b      	str	r3, [r7, #20]
 800e116:	4b53      	ldr	r3, [pc, #332]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11a:	4a52      	ldr	r2, [pc, #328]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e11c:	f043 0301 	orr.w	r3, r3, #1
 800e120:	6453      	str	r3, [r2, #68]	; 0x44
 800e122:	4b50      	ldr	r3, [pc, #320]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	617b      	str	r3, [r7, #20]
 800e12c:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800e12e:	4b4e      	ldr	r3, [pc, #312]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e130:	4a4e      	ldr	r2, [pc, #312]	; (800e26c <HAL_TIM_Base_MspInit+0x16c>)
 800e132:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800e134:	4b4c      	ldr	r3, [pc, #304]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e136:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e13a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e13c:	4b4a      	ldr	r3, [pc, #296]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e13e:	2240      	movs	r2, #64	; 0x40
 800e140:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e142:	4b49      	ldr	r3, [pc, #292]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e144:	2200      	movs	r2, #0
 800e146:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800e148:	4b47      	ldr	r3, [pc, #284]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e14a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e14e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e150:	4b45      	ldr	r3, [pc, #276]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e156:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e158:	4b43      	ldr	r3, [pc, #268]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e15a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e15e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800e160:	4b41      	ldr	r3, [pc, #260]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e162:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e166:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800e168:	4b3f      	ldr	r3, [pc, #252]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e16a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e16e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e170:	4b3d      	ldr	r3, [pc, #244]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e172:	2200      	movs	r2, #0
 800e174:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800e176:	483c      	ldr	r0, [pc, #240]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e178:	f7f3 fdbe 	bl	8001cf8 <HAL_DMA_Init>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800e182:	f7f8 ffef 	bl	8007164 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a37      	ldr	r2, [pc, #220]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24
 800e18c:	4a36      	ldr	r2, [pc, #216]	; (800e268 <HAL_TIM_Base_MspInit+0x168>)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 800e192:	4b37      	ldr	r3, [pc, #220]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e194:	4a37      	ldr	r2, [pc, #220]	; (800e274 <HAL_TIM_Base_MspInit+0x174>)
 800e196:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800e198:	4b35      	ldr	r3, [pc, #212]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e19a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e19e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e1a0:	4b33      	ldr	r3, [pc, #204]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1a2:	2240      	movs	r2, #64	; 0x40
 800e1a4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1a6:	4b32      	ldr	r3, [pc, #200]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800e1ac:	4b30      	ldr	r3, [pc, #192]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e1b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e1b4:	4b2e      	ldr	r3, [pc, #184]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1ba:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e1bc:	4b2c      	ldr	r3, [pc, #176]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e1c2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800e1c4:	4b2a      	ldr	r3, [pc, #168]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1ca:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800e1cc:	4b28      	ldr	r3, [pc, #160]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e1d2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e1d4:	4b26      	ldr	r3, [pc, #152]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800e1da:	4825      	ldr	r0, [pc, #148]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1dc:	f7f3 fd8c 	bl	8001cf8 <HAL_DMA_Init>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 800e1e6:	f7f8 ffbd 	bl	8007164 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a20      	ldr	r2, [pc, #128]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1ee:	629a      	str	r2, [r3, #40]	; 0x28
 800e1f0:	4a1f      	ldr	r2, [pc, #124]	; (800e270 <HAL_TIM_Base_MspInit+0x170>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e1f6:	e02e      	b.n	800e256 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a1e      	ldr	r2, [pc, #120]	; (800e278 <HAL_TIM_Base_MspInit+0x178>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d10e      	bne.n	800e220 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e202:	2300      	movs	r3, #0
 800e204:	613b      	str	r3, [r7, #16]
 800e206:	4b17      	ldr	r3, [pc, #92]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20a:	4a16      	ldr	r2, [pc, #88]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e20c:	f043 0304 	orr.w	r3, r3, #4
 800e210:	6413      	str	r3, [r2, #64]	; 0x40
 800e212:	4b14      	ldr	r3, [pc, #80]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e216:	f003 0304 	and.w	r3, r3, #4
 800e21a:	613b      	str	r3, [r7, #16]
 800e21c:	693b      	ldr	r3, [r7, #16]
}
 800e21e:	e01a      	b.n	800e256 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM6)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a15      	ldr	r2, [pc, #84]	; (800e27c <HAL_TIM_Base_MspInit+0x17c>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d115      	bne.n	800e256 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e22a:	2300      	movs	r3, #0
 800e22c:	60fb      	str	r3, [r7, #12]
 800e22e:	4b0d      	ldr	r3, [pc, #52]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e232:	4a0c      	ldr	r2, [pc, #48]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e234:	f043 0310 	orr.w	r3, r3, #16
 800e238:	6413      	str	r3, [r2, #64]	; 0x40
 800e23a:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <HAL_TIM_Base_MspInit+0x164>)
 800e23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e23e:	f003 0310 	and.w	r3, r3, #16
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800e246:	2200      	movs	r2, #0
 800e248:	2102      	movs	r1, #2
 800e24a:	2036      	movs	r0, #54	; 0x36
 800e24c:	f7f3 fd1d 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e250:	2036      	movs	r0, #54	; 0x36
 800e252:	f7f3 fd36 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
}
 800e256:	bf00      	nop
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	40010000 	.word	0x40010000
 800e264:	40023800 	.word	0x40023800
 800e268:	2001bce4 	.word	0x2001bce4
 800e26c:	40026428 	.word	0x40026428
 800e270:	2001bd8c 	.word	0x2001bd8c
 800e274:	40026440 	.word	0x40026440
 800e278:	40000800 	.word	0x40000800
 800e27c:	40001000 	.word	0x40001000

0800e280 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08c      	sub	sp, #48	; 0x30
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e288:	f107 031c 	add.w	r3, r7, #28
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	605a      	str	r2, [r3, #4]
 800e292:	609a      	str	r2, [r3, #8]
 800e294:	60da      	str	r2, [r3, #12]
 800e296:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2a0:	d14b      	bne.n	800e33a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61bb      	str	r3, [r7, #24]
 800e2a6:	4b3f      	ldr	r3, [pc, #252]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2aa:	4a3e      	ldr	r2, [pc, #248]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2ac:	f043 0301 	orr.w	r3, r3, #1
 800e2b0:	6413      	str	r3, [r2, #64]	; 0x40
 800e2b2:	4b3c      	ldr	r3, [pc, #240]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b6:	f003 0301 	and.w	r3, r3, #1
 800e2ba:	61bb      	str	r3, [r7, #24]
 800e2bc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]
 800e2c2:	4b38      	ldr	r3, [pc, #224]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c6:	4a37      	ldr	r2, [pc, #220]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2c8:	f043 0301 	orr.w	r3, r3, #1
 800e2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ce:	4b35      	ldr	r3, [pc, #212]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	617b      	str	r3, [r7, #20]
 800e2d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e2da:	2300      	movs	r3, #0
 800e2dc:	613b      	str	r3, [r7, #16]
 800e2de:	4b31      	ldr	r3, [pc, #196]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e2:	4a30      	ldr	r2, [pc, #192]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2e4:	f043 0302 	orr.w	r3, r3, #2
 800e2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ea:	4b2e      	ldr	r3, [pc, #184]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ee:	f003 0302 	and.w	r3, r3, #2
 800e2f2:	613b      	str	r3, [r7, #16]
 800e2f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800e2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e300:	2300      	movs	r3, #0
 800e302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e304:	2300      	movs	r3, #0
 800e306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e308:	2301      	movs	r3, #1
 800e30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e30c:	f107 031c 	add.w	r3, r7, #28
 800e310:	4619      	mov	r1, r3
 800e312:	4825      	ldr	r0, [pc, #148]	; (800e3a8 <HAL_TIM_Encoder_MspInit+0x128>)
 800e314:	f7f4 f8dc 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e318:	2308      	movs	r3, #8
 800e31a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e31c:	2302      	movs	r3, #2
 800e31e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e320:	2300      	movs	r3, #0
 800e322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e324:	2300      	movs	r3, #0
 800e326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e328:	2301      	movs	r3, #1
 800e32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e32c:	f107 031c 	add.w	r3, r7, #28
 800e330:	4619      	mov	r1, r3
 800e332:	481e      	ldr	r0, [pc, #120]	; (800e3ac <HAL_TIM_Encoder_MspInit+0x12c>)
 800e334:	f7f4 f8cc 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e338:	e030      	b.n	800e39c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a1c      	ldr	r2, [pc, #112]	; (800e3b0 <HAL_TIM_Encoder_MspInit+0x130>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d12b      	bne.n	800e39c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	4b16      	ldr	r3, [pc, #88]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34c:	4a15      	ldr	r2, [pc, #84]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e34e:	f043 0302 	orr.w	r3, r3, #2
 800e352:	6413      	str	r3, [r2, #64]	; 0x40
 800e354:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e358:	f003 0302 	and.w	r3, r3, #2
 800e35c:	60fb      	str	r3, [r7, #12]
 800e35e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e360:	2300      	movs	r3, #0
 800e362:	60bb      	str	r3, [r7, #8]
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e368:	4a0e      	ldr	r2, [pc, #56]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e36a:	f043 0302 	orr.w	r3, r3, #2
 800e36e:	6313      	str	r3, [r2, #48]	; 0x30
 800e370:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800e372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e374:	f003 0302 	and.w	r3, r3, #2
 800e378:	60bb      	str	r3, [r7, #8]
 800e37a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e37c:	2330      	movs	r3, #48	; 0x30
 800e37e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e380:	2302      	movs	r3, #2
 800e382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e384:	2300      	movs	r3, #0
 800e386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e388:	2300      	movs	r3, #0
 800e38a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e38c:	2302      	movs	r3, #2
 800e38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e390:	f107 031c 	add.w	r3, r7, #28
 800e394:	4619      	mov	r1, r3
 800e396:	4805      	ldr	r0, [pc, #20]	; (800e3ac <HAL_TIM_Encoder_MspInit+0x12c>)
 800e398:	f7f4 f89a 	bl	80024d0 <HAL_GPIO_Init>
}
 800e39c:	bf00      	nop
 800e39e:	3730      	adds	r7, #48	; 0x30
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	40023800 	.word	0x40023800
 800e3a8:	40020000 	.word	0x40020000
 800e3ac:	40020400 	.word	0x40020400
 800e3b0:	40000400 	.word	0x40000400

0800e3b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3bc:	f107 030c 	add.w	r3, r7, #12
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	605a      	str	r2, [r3, #4]
 800e3c6:	609a      	str	r2, [r3, #8]
 800e3c8:	60da      	str	r2, [r3, #12]
 800e3ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a12      	ldr	r2, [pc, #72]	; (800e41c <HAL_TIM_MspPostInit+0x68>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d11e      	bne.n	800e414 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60bb      	str	r3, [r7, #8]
 800e3da:	4b11      	ldr	r3, [pc, #68]	; (800e420 <HAL_TIM_MspPostInit+0x6c>)
 800e3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3de:	4a10      	ldr	r2, [pc, #64]	; (800e420 <HAL_TIM_MspPostInit+0x6c>)
 800e3e0:	f043 0302 	orr.w	r3, r3, #2
 800e3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800e3e6:	4b0e      	ldr	r3, [pc, #56]	; (800e420 <HAL_TIM_MspPostInit+0x6c>)
 800e3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ea:	f003 0302 	and.w	r3, r3, #2
 800e3ee:	60bb      	str	r3, [r7, #8]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = L_Forword_Pin|L_Reverse_Pin|R_Forword_Pin|R_Reverse_Pin;
 800e3f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e3f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e400:	2303      	movs	r3, #3
 800e402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e404:	2302      	movs	r3, #2
 800e406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e408:	f107 030c 	add.w	r3, r7, #12
 800e40c:	4619      	mov	r1, r3
 800e40e:	4805      	ldr	r0, [pc, #20]	; (800e424 <HAL_TIM_MspPostInit+0x70>)
 800e410:	f7f4 f85e 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e414:	bf00      	nop
 800e416:	3720      	adds	r7, #32
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	40000800 	.word	0x40000800
 800e420:	40023800 	.word	0x40023800
 800e424:	40020400 	.word	0x40020400

0800e428 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800e42c:	4b11      	ldr	r3, [pc, #68]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e42e:	4a12      	ldr	r2, [pc, #72]	; (800e478 <MX_USART1_UART_Init+0x50>)
 800e430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800e432:	4b10      	ldr	r3, [pc, #64]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e434:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800e438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e43a:	4b0e      	ldr	r3, [pc, #56]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e440:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e442:	2200      	movs	r2, #0
 800e444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e446:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e448:	2200      	movs	r2, #0
 800e44a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e44c:	4b09      	ldr	r3, [pc, #36]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e44e:	220c      	movs	r2, #12
 800e450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e454:	2200      	movs	r2, #0
 800e456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e458:	4b06      	ldr	r3, [pc, #24]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e45e:	4805      	ldr	r0, [pc, #20]	; (800e474 <MX_USART1_UART_Init+0x4c>)
 800e460:	f7f6 fe5c 	bl	800511c <HAL_UART_Init>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e46a:	f7f8 fe7b 	bl	8007164 <Error_Handler>
  }

}
 800e46e:	bf00      	nop
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	2001bf18 	.word	0x2001bf18
 800e478:	40011000 	.word	0x40011000

0800e47c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08a      	sub	sp, #40	; 0x28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e484:	f107 0314 	add.w	r3, r7, #20
 800e488:	2200      	movs	r2, #0
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	605a      	str	r2, [r3, #4]
 800e48e:	609a      	str	r2, [r3, #8]
 800e490:	60da      	str	r2, [r3, #12]
 800e492:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a19      	ldr	r2, [pc, #100]	; (800e500 <HAL_UART_MspInit+0x84>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d12c      	bne.n	800e4f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e49e:	2300      	movs	r3, #0
 800e4a0:	613b      	str	r3, [r7, #16]
 800e4a2:	4b18      	ldr	r3, [pc, #96]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a6:	4a17      	ldr	r2, [pc, #92]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4a8:	f043 0310 	orr.w	r3, r3, #16
 800e4ac:	6453      	str	r3, [r2, #68]	; 0x44
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	f003 0310 	and.w	r3, r3, #16
 800e4b6:	613b      	str	r3, [r7, #16]
 800e4b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	4b11      	ldr	r3, [pc, #68]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c2:	4a10      	ldr	r2, [pc, #64]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4c4:	f043 0301 	orr.w	r3, r3, #1
 800e4c8:	6313      	str	r3, [r2, #48]	; 0x30
 800e4ca:	4b0e      	ldr	r3, [pc, #56]	; (800e504 <HAL_UART_MspInit+0x88>)
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	f003 0301 	and.w	r3, r3, #1
 800e4d2:	60fb      	str	r3, [r7, #12]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e4d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e4da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e4e8:	2307      	movs	r3, #7
 800e4ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4ec:	f107 0314 	add.w	r3, r7, #20
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	4805      	ldr	r0, [pc, #20]	; (800e508 <HAL_UART_MspInit+0x8c>)
 800e4f4:	f7f3 ffec 	bl	80024d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800e4f8:	bf00      	nop
 800e4fa:	3728      	adds	r7, #40	; 0x28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	40011000 	.word	0x40011000
 800e504:	40023800 	.word	0x40023800
 800e508:	40020000 	.word	0x40020000

0800e50c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800e50c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e544 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800e510:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e512:	e003      	b.n	800e51c <LoopCopyDataInit>

0800e514 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e514:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e516:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e518:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e51a:	3104      	adds	r1, #4

0800e51c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e51c:	480b      	ldr	r0, [pc, #44]	; (800e54c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e51e:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e520:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e522:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e524:	d3f6      	bcc.n	800e514 <CopyDataInit>
  ldr  r2, =_sbss
 800e526:	4a0b      	ldr	r2, [pc, #44]	; (800e554 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e528:	e002      	b.n	800e530 <LoopFillZerobss>

0800e52a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800e52a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e52c:	f842 3b04 	str.w	r3, [r2], #4

0800e530 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e530:	4b09      	ldr	r3, [pc, #36]	; (800e558 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e532:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e534:	d3f9      	bcc.n	800e52a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e536:	f7fe f8f5 	bl	800c724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e53a:	f000 f9a3 	bl	800e884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e53e:	f7f8 fc05 	bl	8006d4c <main>
  bx  lr    
 800e542:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800e544:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800e548:	080139d4 	.word	0x080139d4
  ldr  r0, =_sdata
 800e54c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e550:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800e554:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800e558:	2001bf5c 	.word	0x2001bf5c

0800e55c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e55c:	e7fe      	b.n	800e55c <ADC_IRQHandler>
	...

0800e560 <__errno>:
 800e560:	4b01      	ldr	r3, [pc, #4]	; (800e568 <__errno+0x8>)
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	20000028 	.word	0x20000028

0800e56c <__sflush_r>:
 800e56c:	898a      	ldrh	r2, [r1, #12]
 800e56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e572:	4605      	mov	r5, r0
 800e574:	0710      	lsls	r0, r2, #28
 800e576:	460c      	mov	r4, r1
 800e578:	d458      	bmi.n	800e62c <__sflush_r+0xc0>
 800e57a:	684b      	ldr	r3, [r1, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	dc05      	bgt.n	800e58c <__sflush_r+0x20>
 800e580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e582:	2b00      	cmp	r3, #0
 800e584:	dc02      	bgt.n	800e58c <__sflush_r+0x20>
 800e586:	2000      	movs	r0, #0
 800e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e58e:	2e00      	cmp	r6, #0
 800e590:	d0f9      	beq.n	800e586 <__sflush_r+0x1a>
 800e592:	2300      	movs	r3, #0
 800e594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e598:	682f      	ldr	r7, [r5, #0]
 800e59a:	6a21      	ldr	r1, [r4, #32]
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	d032      	beq.n	800e606 <__sflush_r+0x9a>
 800e5a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5a2:	89a3      	ldrh	r3, [r4, #12]
 800e5a4:	075a      	lsls	r2, r3, #29
 800e5a6:	d505      	bpl.n	800e5b4 <__sflush_r+0x48>
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	1ac0      	subs	r0, r0, r3
 800e5ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5ae:	b10b      	cbz	r3, 800e5b4 <__sflush_r+0x48>
 800e5b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5b2:	1ac0      	subs	r0, r0, r3
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ba:	6a21      	ldr	r1, [r4, #32]
 800e5bc:	4628      	mov	r0, r5
 800e5be:	47b0      	blx	r6
 800e5c0:	1c43      	adds	r3, r0, #1
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	d106      	bne.n	800e5d4 <__sflush_r+0x68>
 800e5c6:	6829      	ldr	r1, [r5, #0]
 800e5c8:	291d      	cmp	r1, #29
 800e5ca:	d848      	bhi.n	800e65e <__sflush_r+0xf2>
 800e5cc:	4a29      	ldr	r2, [pc, #164]	; (800e674 <__sflush_r+0x108>)
 800e5ce:	40ca      	lsrs	r2, r1
 800e5d0:	07d6      	lsls	r6, r2, #31
 800e5d2:	d544      	bpl.n	800e65e <__sflush_r+0xf2>
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	6062      	str	r2, [r4, #4]
 800e5d8:	04d9      	lsls	r1, r3, #19
 800e5da:	6922      	ldr	r2, [r4, #16]
 800e5dc:	6022      	str	r2, [r4, #0]
 800e5de:	d504      	bpl.n	800e5ea <__sflush_r+0x7e>
 800e5e0:	1c42      	adds	r2, r0, #1
 800e5e2:	d101      	bne.n	800e5e8 <__sflush_r+0x7c>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b903      	cbnz	r3, 800e5ea <__sflush_r+0x7e>
 800e5e8:	6560      	str	r0, [r4, #84]	; 0x54
 800e5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5ec:	602f      	str	r7, [r5, #0]
 800e5ee:	2900      	cmp	r1, #0
 800e5f0:	d0c9      	beq.n	800e586 <__sflush_r+0x1a>
 800e5f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5f6:	4299      	cmp	r1, r3
 800e5f8:	d002      	beq.n	800e600 <__sflush_r+0x94>
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f000 f97a 	bl	800e8f4 <_free_r>
 800e600:	2000      	movs	r0, #0
 800e602:	6360      	str	r0, [r4, #52]	; 0x34
 800e604:	e7c0      	b.n	800e588 <__sflush_r+0x1c>
 800e606:	2301      	movs	r3, #1
 800e608:	4628      	mov	r0, r5
 800e60a:	47b0      	blx	r6
 800e60c:	1c41      	adds	r1, r0, #1
 800e60e:	d1c8      	bne.n	800e5a2 <__sflush_r+0x36>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d0c5      	beq.n	800e5a2 <__sflush_r+0x36>
 800e616:	2b1d      	cmp	r3, #29
 800e618:	d001      	beq.n	800e61e <__sflush_r+0xb2>
 800e61a:	2b16      	cmp	r3, #22
 800e61c:	d101      	bne.n	800e622 <__sflush_r+0xb6>
 800e61e:	602f      	str	r7, [r5, #0]
 800e620:	e7b1      	b.n	800e586 <__sflush_r+0x1a>
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e628:	81a3      	strh	r3, [r4, #12]
 800e62a:	e7ad      	b.n	800e588 <__sflush_r+0x1c>
 800e62c:	690f      	ldr	r7, [r1, #16]
 800e62e:	2f00      	cmp	r7, #0
 800e630:	d0a9      	beq.n	800e586 <__sflush_r+0x1a>
 800e632:	0793      	lsls	r3, r2, #30
 800e634:	680e      	ldr	r6, [r1, #0]
 800e636:	bf08      	it	eq
 800e638:	694b      	ldreq	r3, [r1, #20]
 800e63a:	600f      	str	r7, [r1, #0]
 800e63c:	bf18      	it	ne
 800e63e:	2300      	movne	r3, #0
 800e640:	eba6 0807 	sub.w	r8, r6, r7
 800e644:	608b      	str	r3, [r1, #8]
 800e646:	f1b8 0f00 	cmp.w	r8, #0
 800e64a:	dd9c      	ble.n	800e586 <__sflush_r+0x1a>
 800e64c:	4643      	mov	r3, r8
 800e64e:	463a      	mov	r2, r7
 800e650:	6a21      	ldr	r1, [r4, #32]
 800e652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e654:	4628      	mov	r0, r5
 800e656:	47b0      	blx	r6
 800e658:	2800      	cmp	r0, #0
 800e65a:	dc06      	bgt.n	800e66a <__sflush_r+0xfe>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e662:	81a3      	strh	r3, [r4, #12]
 800e664:	f04f 30ff 	mov.w	r0, #4294967295
 800e668:	e78e      	b.n	800e588 <__sflush_r+0x1c>
 800e66a:	4407      	add	r7, r0
 800e66c:	eba8 0800 	sub.w	r8, r8, r0
 800e670:	e7e9      	b.n	800e646 <__sflush_r+0xda>
 800e672:	bf00      	nop
 800e674:	20400001 	.word	0x20400001

0800e678 <_fflush_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	690b      	ldr	r3, [r1, #16]
 800e67c:	4605      	mov	r5, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	b1db      	cbz	r3, 800e6ba <_fflush_r+0x42>
 800e682:	b118      	cbz	r0, 800e68c <_fflush_r+0x14>
 800e684:	6983      	ldr	r3, [r0, #24]
 800e686:	b90b      	cbnz	r3, 800e68c <_fflush_r+0x14>
 800e688:	f000 f872 	bl	800e770 <__sinit>
 800e68c:	4b0c      	ldr	r3, [pc, #48]	; (800e6c0 <_fflush_r+0x48>)
 800e68e:	429c      	cmp	r4, r3
 800e690:	d109      	bne.n	800e6a6 <_fflush_r+0x2e>
 800e692:	686c      	ldr	r4, [r5, #4]
 800e694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e698:	b17b      	cbz	r3, 800e6ba <_fflush_r+0x42>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6a2:	f7ff bf63 	b.w	800e56c <__sflush_r>
 800e6a6:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <_fflush_r+0x4c>)
 800e6a8:	429c      	cmp	r4, r3
 800e6aa:	d101      	bne.n	800e6b0 <_fflush_r+0x38>
 800e6ac:	68ac      	ldr	r4, [r5, #8]
 800e6ae:	e7f1      	b.n	800e694 <_fflush_r+0x1c>
 800e6b0:	4b05      	ldr	r3, [pc, #20]	; (800e6c8 <_fflush_r+0x50>)
 800e6b2:	429c      	cmp	r4, r3
 800e6b4:	bf08      	it	eq
 800e6b6:	68ec      	ldreq	r4, [r5, #12]
 800e6b8:	e7ec      	b.n	800e694 <_fflush_r+0x1c>
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	bd38      	pop	{r3, r4, r5, pc}
 800e6be:	bf00      	nop
 800e6c0:	080136c4 	.word	0x080136c4
 800e6c4:	080136e4 	.word	0x080136e4
 800e6c8:	080136a4 	.word	0x080136a4

0800e6cc <fflush>:
 800e6cc:	4601      	mov	r1, r0
 800e6ce:	b920      	cbnz	r0, 800e6da <fflush+0xe>
 800e6d0:	4b04      	ldr	r3, [pc, #16]	; (800e6e4 <fflush+0x18>)
 800e6d2:	4905      	ldr	r1, [pc, #20]	; (800e6e8 <fflush+0x1c>)
 800e6d4:	6818      	ldr	r0, [r3, #0]
 800e6d6:	f000 b8b7 	b.w	800e848 <_fwalk_reent>
 800e6da:	4b04      	ldr	r3, [pc, #16]	; (800e6ec <fflush+0x20>)
 800e6dc:	6818      	ldr	r0, [r3, #0]
 800e6de:	f7ff bfcb 	b.w	800e678 <_fflush_r>
 800e6e2:	bf00      	nop
 800e6e4:	08013704 	.word	0x08013704
 800e6e8:	0800e679 	.word	0x0800e679
 800e6ec:	20000028 	.word	0x20000028

0800e6f0 <std>:
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800e6fa:	6083      	str	r3, [r0, #8]
 800e6fc:	8181      	strh	r1, [r0, #12]
 800e6fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e700:	81c2      	strh	r2, [r0, #14]
 800e702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e706:	6183      	str	r3, [r0, #24]
 800e708:	4619      	mov	r1, r3
 800e70a:	2208      	movs	r2, #8
 800e70c:	305c      	adds	r0, #92	; 0x5c
 800e70e:	f000 f8e8 	bl	800e8e2 <memset>
 800e712:	4b05      	ldr	r3, [pc, #20]	; (800e728 <std+0x38>)
 800e714:	6263      	str	r3, [r4, #36]	; 0x24
 800e716:	4b05      	ldr	r3, [pc, #20]	; (800e72c <std+0x3c>)
 800e718:	62a3      	str	r3, [r4, #40]	; 0x28
 800e71a:	4b05      	ldr	r3, [pc, #20]	; (800e730 <std+0x40>)
 800e71c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e71e:	4b05      	ldr	r3, [pc, #20]	; (800e734 <std+0x44>)
 800e720:	6224      	str	r4, [r4, #32]
 800e722:	6323      	str	r3, [r4, #48]	; 0x30
 800e724:	bd10      	pop	{r4, pc}
 800e726:	bf00      	nop
 800e728:	0800f991 	.word	0x0800f991
 800e72c:	0800f9b3 	.word	0x0800f9b3
 800e730:	0800f9eb 	.word	0x0800f9eb
 800e734:	0800fa0f 	.word	0x0800fa0f

0800e738 <_cleanup_r>:
 800e738:	4901      	ldr	r1, [pc, #4]	; (800e740 <_cleanup_r+0x8>)
 800e73a:	f000 b885 	b.w	800e848 <_fwalk_reent>
 800e73e:	bf00      	nop
 800e740:	0800e679 	.word	0x0800e679

0800e744 <__sfmoreglue>:
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	1e4a      	subs	r2, r1, #1
 800e748:	2568      	movs	r5, #104	; 0x68
 800e74a:	4355      	muls	r5, r2
 800e74c:	460e      	mov	r6, r1
 800e74e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e752:	f000 f91d 	bl	800e990 <_malloc_r>
 800e756:	4604      	mov	r4, r0
 800e758:	b140      	cbz	r0, 800e76c <__sfmoreglue+0x28>
 800e75a:	2100      	movs	r1, #0
 800e75c:	e9c0 1600 	strd	r1, r6, [r0]
 800e760:	300c      	adds	r0, #12
 800e762:	60a0      	str	r0, [r4, #8]
 800e764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e768:	f000 f8bb 	bl	800e8e2 <memset>
 800e76c:	4620      	mov	r0, r4
 800e76e:	bd70      	pop	{r4, r5, r6, pc}

0800e770 <__sinit>:
 800e770:	6983      	ldr	r3, [r0, #24]
 800e772:	b510      	push	{r4, lr}
 800e774:	4604      	mov	r4, r0
 800e776:	bb33      	cbnz	r3, 800e7c6 <__sinit+0x56>
 800e778:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e77c:	6503      	str	r3, [r0, #80]	; 0x50
 800e77e:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <__sinit+0x58>)
 800e780:	4a12      	ldr	r2, [pc, #72]	; (800e7cc <__sinit+0x5c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6282      	str	r2, [r0, #40]	; 0x28
 800e786:	4298      	cmp	r0, r3
 800e788:	bf04      	itt	eq
 800e78a:	2301      	moveq	r3, #1
 800e78c:	6183      	streq	r3, [r0, #24]
 800e78e:	f000 f81f 	bl	800e7d0 <__sfp>
 800e792:	6060      	str	r0, [r4, #4]
 800e794:	4620      	mov	r0, r4
 800e796:	f000 f81b 	bl	800e7d0 <__sfp>
 800e79a:	60a0      	str	r0, [r4, #8]
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 f817 	bl	800e7d0 <__sfp>
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	60e0      	str	r0, [r4, #12]
 800e7a6:	2104      	movs	r1, #4
 800e7a8:	6860      	ldr	r0, [r4, #4]
 800e7aa:	f7ff ffa1 	bl	800e6f0 <std>
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	2109      	movs	r1, #9
 800e7b2:	68a0      	ldr	r0, [r4, #8]
 800e7b4:	f7ff ff9c 	bl	800e6f0 <std>
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	2112      	movs	r1, #18
 800e7bc:	68e0      	ldr	r0, [r4, #12]
 800e7be:	f7ff ff97 	bl	800e6f0 <std>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	61a3      	str	r3, [r4, #24]
 800e7c6:	bd10      	pop	{r4, pc}
 800e7c8:	08013704 	.word	0x08013704
 800e7cc:	0800e739 	.word	0x0800e739

0800e7d0 <__sfp>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	4b1b      	ldr	r3, [pc, #108]	; (800e840 <__sfp+0x70>)
 800e7d4:	681e      	ldr	r6, [r3, #0]
 800e7d6:	69b3      	ldr	r3, [r6, #24]
 800e7d8:	4607      	mov	r7, r0
 800e7da:	b913      	cbnz	r3, 800e7e2 <__sfp+0x12>
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f7ff ffc7 	bl	800e770 <__sinit>
 800e7e2:	3648      	adds	r6, #72	; 0x48
 800e7e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	d503      	bpl.n	800e7f4 <__sfp+0x24>
 800e7ec:	6833      	ldr	r3, [r6, #0]
 800e7ee:	b133      	cbz	r3, 800e7fe <__sfp+0x2e>
 800e7f0:	6836      	ldr	r6, [r6, #0]
 800e7f2:	e7f7      	b.n	800e7e4 <__sfp+0x14>
 800e7f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7f8:	b16d      	cbz	r5, 800e816 <__sfp+0x46>
 800e7fa:	3468      	adds	r4, #104	; 0x68
 800e7fc:	e7f4      	b.n	800e7e8 <__sfp+0x18>
 800e7fe:	2104      	movs	r1, #4
 800e800:	4638      	mov	r0, r7
 800e802:	f7ff ff9f 	bl	800e744 <__sfmoreglue>
 800e806:	6030      	str	r0, [r6, #0]
 800e808:	2800      	cmp	r0, #0
 800e80a:	d1f1      	bne.n	800e7f0 <__sfp+0x20>
 800e80c:	230c      	movs	r3, #12
 800e80e:	603b      	str	r3, [r7, #0]
 800e810:	4604      	mov	r4, r0
 800e812:	4620      	mov	r0, r4
 800e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e816:	4b0b      	ldr	r3, [pc, #44]	; (800e844 <__sfp+0x74>)
 800e818:	6665      	str	r5, [r4, #100]	; 0x64
 800e81a:	e9c4 5500 	strd	r5, r5, [r4]
 800e81e:	60a5      	str	r5, [r4, #8]
 800e820:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e824:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e828:	2208      	movs	r2, #8
 800e82a:	4629      	mov	r1, r5
 800e82c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e830:	f000 f857 	bl	800e8e2 <memset>
 800e834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e83c:	e7e9      	b.n	800e812 <__sfp+0x42>
 800e83e:	bf00      	nop
 800e840:	08013704 	.word	0x08013704
 800e844:	ffff0001 	.word	0xffff0001

0800e848 <_fwalk_reent>:
 800e848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e84c:	4680      	mov	r8, r0
 800e84e:	4689      	mov	r9, r1
 800e850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e854:	2600      	movs	r6, #0
 800e856:	b914      	cbnz	r4, 800e85e <_fwalk_reent+0x16>
 800e858:	4630      	mov	r0, r6
 800e85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e85e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e862:	3f01      	subs	r7, #1
 800e864:	d501      	bpl.n	800e86a <_fwalk_reent+0x22>
 800e866:	6824      	ldr	r4, [r4, #0]
 800e868:	e7f5      	b.n	800e856 <_fwalk_reent+0xe>
 800e86a:	89ab      	ldrh	r3, [r5, #12]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d907      	bls.n	800e880 <_fwalk_reent+0x38>
 800e870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e874:	3301      	adds	r3, #1
 800e876:	d003      	beq.n	800e880 <_fwalk_reent+0x38>
 800e878:	4629      	mov	r1, r5
 800e87a:	4640      	mov	r0, r8
 800e87c:	47c8      	blx	r9
 800e87e:	4306      	orrs	r6, r0
 800e880:	3568      	adds	r5, #104	; 0x68
 800e882:	e7ee      	b.n	800e862 <_fwalk_reent+0x1a>

0800e884 <__libc_init_array>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	4e0d      	ldr	r6, [pc, #52]	; (800e8bc <__libc_init_array+0x38>)
 800e888:	4c0d      	ldr	r4, [pc, #52]	; (800e8c0 <__libc_init_array+0x3c>)
 800e88a:	1ba4      	subs	r4, r4, r6
 800e88c:	10a4      	asrs	r4, r4, #2
 800e88e:	2500      	movs	r5, #0
 800e890:	42a5      	cmp	r5, r4
 800e892:	d109      	bne.n	800e8a8 <__libc_init_array+0x24>
 800e894:	4e0b      	ldr	r6, [pc, #44]	; (800e8c4 <__libc_init_array+0x40>)
 800e896:	4c0c      	ldr	r4, [pc, #48]	; (800e8c8 <__libc_init_array+0x44>)
 800e898:	f004 fd16 	bl	80132c8 <_init>
 800e89c:	1ba4      	subs	r4, r4, r6
 800e89e:	10a4      	asrs	r4, r4, #2
 800e8a0:	2500      	movs	r5, #0
 800e8a2:	42a5      	cmp	r5, r4
 800e8a4:	d105      	bne.n	800e8b2 <__libc_init_array+0x2e>
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8ac:	4798      	blx	r3
 800e8ae:	3501      	adds	r5, #1
 800e8b0:	e7ee      	b.n	800e890 <__libc_init_array+0xc>
 800e8b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e8b6:	4798      	blx	r3
 800e8b8:	3501      	adds	r5, #1
 800e8ba:	e7f2      	b.n	800e8a2 <__libc_init_array+0x1e>
 800e8bc:	080139cc 	.word	0x080139cc
 800e8c0:	080139cc 	.word	0x080139cc
 800e8c4:	080139cc 	.word	0x080139cc
 800e8c8:	080139d0 	.word	0x080139d0

0800e8cc <memcpy>:
 800e8cc:	b510      	push	{r4, lr}
 800e8ce:	1e43      	subs	r3, r0, #1
 800e8d0:	440a      	add	r2, r1
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	d100      	bne.n	800e8d8 <memcpy+0xc>
 800e8d6:	bd10      	pop	{r4, pc}
 800e8d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8e0:	e7f7      	b.n	800e8d2 <memcpy+0x6>

0800e8e2 <memset>:
 800e8e2:	4402      	add	r2, r0
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d100      	bne.n	800e8ec <memset+0xa>
 800e8ea:	4770      	bx	lr
 800e8ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e8f0:	e7f9      	b.n	800e8e6 <memset+0x4>
	...

0800e8f4 <_free_r>:
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	2900      	cmp	r1, #0
 800e8fa:	d045      	beq.n	800e988 <_free_r+0x94>
 800e8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e900:	1f0c      	subs	r4, r1, #4
 800e902:	2b00      	cmp	r3, #0
 800e904:	bfb8      	it	lt
 800e906:	18e4      	addlt	r4, r4, r3
 800e908:	f003 fa24 	bl	8011d54 <__malloc_lock>
 800e90c:	4a1f      	ldr	r2, [pc, #124]	; (800e98c <_free_r+0x98>)
 800e90e:	6813      	ldr	r3, [r2, #0]
 800e910:	4610      	mov	r0, r2
 800e912:	b933      	cbnz	r3, 800e922 <_free_r+0x2e>
 800e914:	6063      	str	r3, [r4, #4]
 800e916:	6014      	str	r4, [r2, #0]
 800e918:	4628      	mov	r0, r5
 800e91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e91e:	f003 ba1a 	b.w	8011d56 <__malloc_unlock>
 800e922:	42a3      	cmp	r3, r4
 800e924:	d90c      	bls.n	800e940 <_free_r+0x4c>
 800e926:	6821      	ldr	r1, [r4, #0]
 800e928:	1862      	adds	r2, r4, r1
 800e92a:	4293      	cmp	r3, r2
 800e92c:	bf04      	itt	eq
 800e92e:	681a      	ldreq	r2, [r3, #0]
 800e930:	685b      	ldreq	r3, [r3, #4]
 800e932:	6063      	str	r3, [r4, #4]
 800e934:	bf04      	itt	eq
 800e936:	1852      	addeq	r2, r2, r1
 800e938:	6022      	streq	r2, [r4, #0]
 800e93a:	6004      	str	r4, [r0, #0]
 800e93c:	e7ec      	b.n	800e918 <_free_r+0x24>
 800e93e:	4613      	mov	r3, r2
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	b10a      	cbz	r2, 800e948 <_free_r+0x54>
 800e944:	42a2      	cmp	r2, r4
 800e946:	d9fa      	bls.n	800e93e <_free_r+0x4a>
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	1858      	adds	r0, r3, r1
 800e94c:	42a0      	cmp	r0, r4
 800e94e:	d10b      	bne.n	800e968 <_free_r+0x74>
 800e950:	6820      	ldr	r0, [r4, #0]
 800e952:	4401      	add	r1, r0
 800e954:	1858      	adds	r0, r3, r1
 800e956:	4282      	cmp	r2, r0
 800e958:	6019      	str	r1, [r3, #0]
 800e95a:	d1dd      	bne.n	800e918 <_free_r+0x24>
 800e95c:	6810      	ldr	r0, [r2, #0]
 800e95e:	6852      	ldr	r2, [r2, #4]
 800e960:	605a      	str	r2, [r3, #4]
 800e962:	4401      	add	r1, r0
 800e964:	6019      	str	r1, [r3, #0]
 800e966:	e7d7      	b.n	800e918 <_free_r+0x24>
 800e968:	d902      	bls.n	800e970 <_free_r+0x7c>
 800e96a:	230c      	movs	r3, #12
 800e96c:	602b      	str	r3, [r5, #0]
 800e96e:	e7d3      	b.n	800e918 <_free_r+0x24>
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	1821      	adds	r1, r4, r0
 800e974:	428a      	cmp	r2, r1
 800e976:	bf04      	itt	eq
 800e978:	6811      	ldreq	r1, [r2, #0]
 800e97a:	6852      	ldreq	r2, [r2, #4]
 800e97c:	6062      	str	r2, [r4, #4]
 800e97e:	bf04      	itt	eq
 800e980:	1809      	addeq	r1, r1, r0
 800e982:	6021      	streq	r1, [r4, #0]
 800e984:	605c      	str	r4, [r3, #4]
 800e986:	e7c7      	b.n	800e918 <_free_r+0x24>
 800e988:	bd38      	pop	{r3, r4, r5, pc}
 800e98a:	bf00      	nop
 800e98c:	2001b310 	.word	0x2001b310

0800e990 <_malloc_r>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	1ccd      	adds	r5, r1, #3
 800e994:	f025 0503 	bic.w	r5, r5, #3
 800e998:	3508      	adds	r5, #8
 800e99a:	2d0c      	cmp	r5, #12
 800e99c:	bf38      	it	cc
 800e99e:	250c      	movcc	r5, #12
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	db01      	blt.n	800e9aa <_malloc_r+0x1a>
 800e9a6:	42a9      	cmp	r1, r5
 800e9a8:	d903      	bls.n	800e9b2 <_malloc_r+0x22>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	bd70      	pop	{r4, r5, r6, pc}
 800e9b2:	f003 f9cf 	bl	8011d54 <__malloc_lock>
 800e9b6:	4a21      	ldr	r2, [pc, #132]	; (800ea3c <_malloc_r+0xac>)
 800e9b8:	6814      	ldr	r4, [r2, #0]
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	b991      	cbnz	r1, 800e9e4 <_malloc_r+0x54>
 800e9be:	4c20      	ldr	r4, [pc, #128]	; (800ea40 <_malloc_r+0xb0>)
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	b91b      	cbnz	r3, 800e9cc <_malloc_r+0x3c>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f000 fef7 	bl	800f7b8 <_sbrk_r>
 800e9ca:	6020      	str	r0, [r4, #0]
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f000 fef2 	bl	800f7b8 <_sbrk_r>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d124      	bne.n	800ea22 <_malloc_r+0x92>
 800e9d8:	230c      	movs	r3, #12
 800e9da:	6033      	str	r3, [r6, #0]
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f003 f9ba 	bl	8011d56 <__malloc_unlock>
 800e9e2:	e7e4      	b.n	800e9ae <_malloc_r+0x1e>
 800e9e4:	680b      	ldr	r3, [r1, #0]
 800e9e6:	1b5b      	subs	r3, r3, r5
 800e9e8:	d418      	bmi.n	800ea1c <_malloc_r+0x8c>
 800e9ea:	2b0b      	cmp	r3, #11
 800e9ec:	d90f      	bls.n	800ea0e <_malloc_r+0x7e>
 800e9ee:	600b      	str	r3, [r1, #0]
 800e9f0:	50cd      	str	r5, [r1, r3]
 800e9f2:	18cc      	adds	r4, r1, r3
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f003 f9ae 	bl	8011d56 <__malloc_unlock>
 800e9fa:	f104 000b 	add.w	r0, r4, #11
 800e9fe:	1d23      	adds	r3, r4, #4
 800ea00:	f020 0007 	bic.w	r0, r0, #7
 800ea04:	1ac3      	subs	r3, r0, r3
 800ea06:	d0d3      	beq.n	800e9b0 <_malloc_r+0x20>
 800ea08:	425a      	negs	r2, r3
 800ea0a:	50e2      	str	r2, [r4, r3]
 800ea0c:	e7d0      	b.n	800e9b0 <_malloc_r+0x20>
 800ea0e:	428c      	cmp	r4, r1
 800ea10:	684b      	ldr	r3, [r1, #4]
 800ea12:	bf16      	itet	ne
 800ea14:	6063      	strne	r3, [r4, #4]
 800ea16:	6013      	streq	r3, [r2, #0]
 800ea18:	460c      	movne	r4, r1
 800ea1a:	e7eb      	b.n	800e9f4 <_malloc_r+0x64>
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	6849      	ldr	r1, [r1, #4]
 800ea20:	e7cc      	b.n	800e9bc <_malloc_r+0x2c>
 800ea22:	1cc4      	adds	r4, r0, #3
 800ea24:	f024 0403 	bic.w	r4, r4, #3
 800ea28:	42a0      	cmp	r0, r4
 800ea2a:	d005      	beq.n	800ea38 <_malloc_r+0xa8>
 800ea2c:	1a21      	subs	r1, r4, r0
 800ea2e:	4630      	mov	r0, r6
 800ea30:	f000 fec2 	bl	800f7b8 <_sbrk_r>
 800ea34:	3001      	adds	r0, #1
 800ea36:	d0cf      	beq.n	800e9d8 <_malloc_r+0x48>
 800ea38:	6025      	str	r5, [r4, #0]
 800ea3a:	e7db      	b.n	800e9f4 <_malloc_r+0x64>
 800ea3c:	2001b310 	.word	0x2001b310
 800ea40:	2001b314 	.word	0x2001b314

0800ea44 <__cvt>:
 800ea44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea48:	ec55 4b10 	vmov	r4, r5, d0
 800ea4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ea4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	460e      	mov	r6, r1
 800ea56:	4691      	mov	r9, r2
 800ea58:	4619      	mov	r1, r3
 800ea5a:	bfb8      	it	lt
 800ea5c:	4622      	movlt	r2, r4
 800ea5e:	462b      	mov	r3, r5
 800ea60:	f027 0720 	bic.w	r7, r7, #32
 800ea64:	bfbb      	ittet	lt
 800ea66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea6a:	461d      	movlt	r5, r3
 800ea6c:	2300      	movge	r3, #0
 800ea6e:	232d      	movlt	r3, #45	; 0x2d
 800ea70:	bfb8      	it	lt
 800ea72:	4614      	movlt	r4, r2
 800ea74:	2f46      	cmp	r7, #70	; 0x46
 800ea76:	700b      	strb	r3, [r1, #0]
 800ea78:	d004      	beq.n	800ea84 <__cvt+0x40>
 800ea7a:	2f45      	cmp	r7, #69	; 0x45
 800ea7c:	d100      	bne.n	800ea80 <__cvt+0x3c>
 800ea7e:	3601      	adds	r6, #1
 800ea80:	2102      	movs	r1, #2
 800ea82:	e000      	b.n	800ea86 <__cvt+0x42>
 800ea84:	2103      	movs	r1, #3
 800ea86:	ab03      	add	r3, sp, #12
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	ab02      	add	r3, sp, #8
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	4632      	mov	r2, r6
 800ea90:	4653      	mov	r3, sl
 800ea92:	ec45 4b10 	vmov	d0, r4, r5
 800ea96:	f001 ffdb 	bl	8010a50 <_dtoa_r>
 800ea9a:	2f47      	cmp	r7, #71	; 0x47
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	d102      	bne.n	800eaa6 <__cvt+0x62>
 800eaa0:	f019 0f01 	tst.w	r9, #1
 800eaa4:	d026      	beq.n	800eaf4 <__cvt+0xb0>
 800eaa6:	2f46      	cmp	r7, #70	; 0x46
 800eaa8:	eb08 0906 	add.w	r9, r8, r6
 800eaac:	d111      	bne.n	800ead2 <__cvt+0x8e>
 800eaae:	f898 3000 	ldrb.w	r3, [r8]
 800eab2:	2b30      	cmp	r3, #48	; 0x30
 800eab4:	d10a      	bne.n	800eacc <__cvt+0x88>
 800eab6:	2200      	movs	r2, #0
 800eab8:	2300      	movs	r3, #0
 800eaba:	4620      	mov	r0, r4
 800eabc:	4629      	mov	r1, r5
 800eabe:	f7f2 f82b 	bl	8000b18 <__aeabi_dcmpeq>
 800eac2:	b918      	cbnz	r0, 800eacc <__cvt+0x88>
 800eac4:	f1c6 0601 	rsb	r6, r6, #1
 800eac8:	f8ca 6000 	str.w	r6, [sl]
 800eacc:	f8da 3000 	ldr.w	r3, [sl]
 800ead0:	4499      	add	r9, r3
 800ead2:	2200      	movs	r2, #0
 800ead4:	2300      	movs	r3, #0
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f2 f81d 	bl	8000b18 <__aeabi_dcmpeq>
 800eade:	b938      	cbnz	r0, 800eaf0 <__cvt+0xac>
 800eae0:	2230      	movs	r2, #48	; 0x30
 800eae2:	9b03      	ldr	r3, [sp, #12]
 800eae4:	454b      	cmp	r3, r9
 800eae6:	d205      	bcs.n	800eaf4 <__cvt+0xb0>
 800eae8:	1c59      	adds	r1, r3, #1
 800eaea:	9103      	str	r1, [sp, #12]
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	e7f8      	b.n	800eae2 <__cvt+0x9e>
 800eaf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800eaf4:	9b03      	ldr	r3, [sp, #12]
 800eaf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eaf8:	eba3 0308 	sub.w	r3, r3, r8
 800eafc:	4640      	mov	r0, r8
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	b004      	add	sp, #16
 800eb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eb06 <__exponent>:
 800eb06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb08:	2900      	cmp	r1, #0
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	bfba      	itte	lt
 800eb0e:	4249      	neglt	r1, r1
 800eb10:	232d      	movlt	r3, #45	; 0x2d
 800eb12:	232b      	movge	r3, #43	; 0x2b
 800eb14:	2909      	cmp	r1, #9
 800eb16:	f804 2b02 	strb.w	r2, [r4], #2
 800eb1a:	7043      	strb	r3, [r0, #1]
 800eb1c:	dd20      	ble.n	800eb60 <__exponent+0x5a>
 800eb1e:	f10d 0307 	add.w	r3, sp, #7
 800eb22:	461f      	mov	r7, r3
 800eb24:	260a      	movs	r6, #10
 800eb26:	fb91 f5f6 	sdiv	r5, r1, r6
 800eb2a:	fb06 1115 	mls	r1, r6, r5, r1
 800eb2e:	3130      	adds	r1, #48	; 0x30
 800eb30:	2d09      	cmp	r5, #9
 800eb32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb36:	f103 32ff 	add.w	r2, r3, #4294967295
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	dc09      	bgt.n	800eb52 <__exponent+0x4c>
 800eb3e:	3130      	adds	r1, #48	; 0x30
 800eb40:	3b02      	subs	r3, #2
 800eb42:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eb46:	42bb      	cmp	r3, r7
 800eb48:	4622      	mov	r2, r4
 800eb4a:	d304      	bcc.n	800eb56 <__exponent+0x50>
 800eb4c:	1a10      	subs	r0, r2, r0
 800eb4e:	b003      	add	sp, #12
 800eb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb52:	4613      	mov	r3, r2
 800eb54:	e7e7      	b.n	800eb26 <__exponent+0x20>
 800eb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb5a:	f804 2b01 	strb.w	r2, [r4], #1
 800eb5e:	e7f2      	b.n	800eb46 <__exponent+0x40>
 800eb60:	2330      	movs	r3, #48	; 0x30
 800eb62:	4419      	add	r1, r3
 800eb64:	7083      	strb	r3, [r0, #2]
 800eb66:	1d02      	adds	r2, r0, #4
 800eb68:	70c1      	strb	r1, [r0, #3]
 800eb6a:	e7ef      	b.n	800eb4c <__exponent+0x46>

0800eb6c <_printf_float>:
 800eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb70:	b08d      	sub	sp, #52	; 0x34
 800eb72:	460c      	mov	r4, r1
 800eb74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800eb78:	4616      	mov	r6, r2
 800eb7a:	461f      	mov	r7, r3
 800eb7c:	4605      	mov	r5, r0
 800eb7e:	f003 f84b 	bl	8011c18 <_localeconv_r>
 800eb82:	6803      	ldr	r3, [r0, #0]
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f1 fb4a 	bl	8000220 <strlen>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb90:	f8d8 3000 	ldr.w	r3, [r8]
 800eb94:	9005      	str	r0, [sp, #20]
 800eb96:	3307      	adds	r3, #7
 800eb98:	f023 0307 	bic.w	r3, r3, #7
 800eb9c:	f103 0208 	add.w	r2, r3, #8
 800eba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eba4:	f8d4 b000 	ldr.w	fp, [r4]
 800eba8:	f8c8 2000 	str.w	r2, [r8]
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ebb4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ebb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ebbc:	9307      	str	r3, [sp, #28]
 800ebbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800ebc2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc6:	4ba7      	ldr	r3, [pc, #668]	; (800ee64 <_printf_float+0x2f8>)
 800ebc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebcc:	f7f1 ffd6 	bl	8000b7c <__aeabi_dcmpun>
 800ebd0:	bb70      	cbnz	r0, 800ec30 <_printf_float+0xc4>
 800ebd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebd6:	4ba3      	ldr	r3, [pc, #652]	; (800ee64 <_printf_float+0x2f8>)
 800ebd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebdc:	f7f1 ffb0 	bl	8000b40 <__aeabi_dcmple>
 800ebe0:	bb30      	cbnz	r0, 800ec30 <_printf_float+0xc4>
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	4640      	mov	r0, r8
 800ebe8:	4649      	mov	r1, r9
 800ebea:	f7f1 ff9f 	bl	8000b2c <__aeabi_dcmplt>
 800ebee:	b110      	cbz	r0, 800ebf6 <_printf_float+0x8a>
 800ebf0:	232d      	movs	r3, #45	; 0x2d
 800ebf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebf6:	4a9c      	ldr	r2, [pc, #624]	; (800ee68 <_printf_float+0x2fc>)
 800ebf8:	4b9c      	ldr	r3, [pc, #624]	; (800ee6c <_printf_float+0x300>)
 800ebfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ebfe:	bf8c      	ite	hi
 800ec00:	4690      	movhi	r8, r2
 800ec02:	4698      	movls	r8, r3
 800ec04:	2303      	movs	r3, #3
 800ec06:	f02b 0204 	bic.w	r2, fp, #4
 800ec0a:	6123      	str	r3, [r4, #16]
 800ec0c:	6022      	str	r2, [r4, #0]
 800ec0e:	f04f 0900 	mov.w	r9, #0
 800ec12:	9700      	str	r7, [sp, #0]
 800ec14:	4633      	mov	r3, r6
 800ec16:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	f000 f9e6 	bl	800efec <_printf_common>
 800ec20:	3001      	adds	r0, #1
 800ec22:	f040 808d 	bne.w	800ed40 <_printf_float+0x1d4>
 800ec26:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2a:	b00d      	add	sp, #52	; 0x34
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	4642      	mov	r2, r8
 800ec32:	464b      	mov	r3, r9
 800ec34:	4640      	mov	r0, r8
 800ec36:	4649      	mov	r1, r9
 800ec38:	f7f1 ffa0 	bl	8000b7c <__aeabi_dcmpun>
 800ec3c:	b110      	cbz	r0, 800ec44 <_printf_float+0xd8>
 800ec3e:	4a8c      	ldr	r2, [pc, #560]	; (800ee70 <_printf_float+0x304>)
 800ec40:	4b8c      	ldr	r3, [pc, #560]	; (800ee74 <_printf_float+0x308>)
 800ec42:	e7da      	b.n	800ebfa <_printf_float+0x8e>
 800ec44:	6861      	ldr	r1, [r4, #4]
 800ec46:	1c4b      	adds	r3, r1, #1
 800ec48:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ec4c:	a80a      	add	r0, sp, #40	; 0x28
 800ec4e:	d13e      	bne.n	800ecce <_printf_float+0x162>
 800ec50:	2306      	movs	r3, #6
 800ec52:	6063      	str	r3, [r4, #4]
 800ec54:	2300      	movs	r3, #0
 800ec56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ec5a:	ab09      	add	r3, sp, #36	; 0x24
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	ec49 8b10 	vmov	d0, r8, r9
 800ec62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec66:	6022      	str	r2, [r4, #0]
 800ec68:	f8cd a004 	str.w	sl, [sp, #4]
 800ec6c:	6861      	ldr	r1, [r4, #4]
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f7ff fee8 	bl	800ea44 <__cvt>
 800ec74:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ec78:	2b47      	cmp	r3, #71	; 0x47
 800ec7a:	4680      	mov	r8, r0
 800ec7c:	d109      	bne.n	800ec92 <_printf_float+0x126>
 800ec7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec80:	1cd8      	adds	r0, r3, #3
 800ec82:	db02      	blt.n	800ec8a <_printf_float+0x11e>
 800ec84:	6862      	ldr	r2, [r4, #4]
 800ec86:	4293      	cmp	r3, r2
 800ec88:	dd47      	ble.n	800ed1a <_printf_float+0x1ae>
 800ec8a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ec8e:	fa5f fa8a 	uxtb.w	sl, sl
 800ec92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ec96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec98:	d824      	bhi.n	800ece4 <_printf_float+0x178>
 800ec9a:	3901      	subs	r1, #1
 800ec9c:	4652      	mov	r2, sl
 800ec9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eca2:	9109      	str	r1, [sp, #36]	; 0x24
 800eca4:	f7ff ff2f 	bl	800eb06 <__exponent>
 800eca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecaa:	1813      	adds	r3, r2, r0
 800ecac:	2a01      	cmp	r2, #1
 800ecae:	4681      	mov	r9, r0
 800ecb0:	6123      	str	r3, [r4, #16]
 800ecb2:	dc02      	bgt.n	800ecba <_printf_float+0x14e>
 800ecb4:	6822      	ldr	r2, [r4, #0]
 800ecb6:	07d1      	lsls	r1, r2, #31
 800ecb8:	d501      	bpl.n	800ecbe <_printf_float+0x152>
 800ecba:	3301      	adds	r3, #1
 800ecbc:	6123      	str	r3, [r4, #16]
 800ecbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d0a5      	beq.n	800ec12 <_printf_float+0xa6>
 800ecc6:	232d      	movs	r3, #45	; 0x2d
 800ecc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eccc:	e7a1      	b.n	800ec12 <_printf_float+0xa6>
 800ecce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ecd2:	f000 8177 	beq.w	800efc4 <_printf_float+0x458>
 800ecd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ecda:	d1bb      	bne.n	800ec54 <_printf_float+0xe8>
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	d1b9      	bne.n	800ec54 <_printf_float+0xe8>
 800ece0:	2301      	movs	r3, #1
 800ece2:	e7b6      	b.n	800ec52 <_printf_float+0xe6>
 800ece4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ece8:	d119      	bne.n	800ed1e <_printf_float+0x1b2>
 800ecea:	2900      	cmp	r1, #0
 800ecec:	6863      	ldr	r3, [r4, #4]
 800ecee:	dd0c      	ble.n	800ed0a <_printf_float+0x19e>
 800ecf0:	6121      	str	r1, [r4, #16]
 800ecf2:	b913      	cbnz	r3, 800ecfa <_printf_float+0x18e>
 800ecf4:	6822      	ldr	r2, [r4, #0]
 800ecf6:	07d2      	lsls	r2, r2, #31
 800ecf8:	d502      	bpl.n	800ed00 <_printf_float+0x194>
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	440b      	add	r3, r1
 800ecfe:	6123      	str	r3, [r4, #16]
 800ed00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed02:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed04:	f04f 0900 	mov.w	r9, #0
 800ed08:	e7d9      	b.n	800ecbe <_printf_float+0x152>
 800ed0a:	b913      	cbnz	r3, 800ed12 <_printf_float+0x1a6>
 800ed0c:	6822      	ldr	r2, [r4, #0]
 800ed0e:	07d0      	lsls	r0, r2, #31
 800ed10:	d501      	bpl.n	800ed16 <_printf_float+0x1aa>
 800ed12:	3302      	adds	r3, #2
 800ed14:	e7f3      	b.n	800ecfe <_printf_float+0x192>
 800ed16:	2301      	movs	r3, #1
 800ed18:	e7f1      	b.n	800ecfe <_printf_float+0x192>
 800ed1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ed1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ed22:	4293      	cmp	r3, r2
 800ed24:	db05      	blt.n	800ed32 <_printf_float+0x1c6>
 800ed26:	6822      	ldr	r2, [r4, #0]
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	07d1      	lsls	r1, r2, #31
 800ed2c:	d5e8      	bpl.n	800ed00 <_printf_float+0x194>
 800ed2e:	3301      	adds	r3, #1
 800ed30:	e7e5      	b.n	800ecfe <_printf_float+0x192>
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bfd4      	ite	le
 800ed36:	f1c3 0302 	rsble	r3, r3, #2
 800ed3a:	2301      	movgt	r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	e7de      	b.n	800ecfe <_printf_float+0x192>
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	055a      	lsls	r2, r3, #21
 800ed44:	d407      	bmi.n	800ed56 <_printf_float+0x1ea>
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	4642      	mov	r2, r8
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	47b8      	blx	r7
 800ed50:	3001      	adds	r0, #1
 800ed52:	d12b      	bne.n	800edac <_printf_float+0x240>
 800ed54:	e767      	b.n	800ec26 <_printf_float+0xba>
 800ed56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ed5a:	f240 80dc 	bls.w	800ef16 <_printf_float+0x3aa>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2300      	movs	r3, #0
 800ed62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed66:	f7f1 fed7 	bl	8000b18 <__aeabi_dcmpeq>
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d033      	beq.n	800edd6 <_printf_float+0x26a>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4a41      	ldr	r2, [pc, #260]	; (800ee78 <_printf_float+0x30c>)
 800ed72:	4631      	mov	r1, r6
 800ed74:	4628      	mov	r0, r5
 800ed76:	47b8      	blx	r7
 800ed78:	3001      	adds	r0, #1
 800ed7a:	f43f af54 	beq.w	800ec26 <_printf_float+0xba>
 800ed7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed82:	429a      	cmp	r2, r3
 800ed84:	db02      	blt.n	800ed8c <_printf_float+0x220>
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	07d8      	lsls	r0, r3, #31
 800ed8a:	d50f      	bpl.n	800edac <_printf_float+0x240>
 800ed8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed90:	4631      	mov	r1, r6
 800ed92:	4628      	mov	r0, r5
 800ed94:	47b8      	blx	r7
 800ed96:	3001      	adds	r0, #1
 800ed98:	f43f af45 	beq.w	800ec26 <_printf_float+0xba>
 800ed9c:	f04f 0800 	mov.w	r8, #0
 800eda0:	f104 091a 	add.w	r9, r4, #26
 800eda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda6:	3b01      	subs	r3, #1
 800eda8:	4543      	cmp	r3, r8
 800edaa:	dc09      	bgt.n	800edc0 <_printf_float+0x254>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	079b      	lsls	r3, r3, #30
 800edb0:	f100 8103 	bmi.w	800efba <_printf_float+0x44e>
 800edb4:	68e0      	ldr	r0, [r4, #12]
 800edb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edb8:	4298      	cmp	r0, r3
 800edba:	bfb8      	it	lt
 800edbc:	4618      	movlt	r0, r3
 800edbe:	e734      	b.n	800ec2a <_printf_float+0xbe>
 800edc0:	2301      	movs	r3, #1
 800edc2:	464a      	mov	r2, r9
 800edc4:	4631      	mov	r1, r6
 800edc6:	4628      	mov	r0, r5
 800edc8:	47b8      	blx	r7
 800edca:	3001      	adds	r0, #1
 800edcc:	f43f af2b 	beq.w	800ec26 <_printf_float+0xba>
 800edd0:	f108 0801 	add.w	r8, r8, #1
 800edd4:	e7e6      	b.n	800eda4 <_printf_float+0x238>
 800edd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd8:	2b00      	cmp	r3, #0
 800edda:	dc2b      	bgt.n	800ee34 <_printf_float+0x2c8>
 800eddc:	2301      	movs	r3, #1
 800edde:	4a26      	ldr	r2, [pc, #152]	; (800ee78 <_printf_float+0x30c>)
 800ede0:	4631      	mov	r1, r6
 800ede2:	4628      	mov	r0, r5
 800ede4:	47b8      	blx	r7
 800ede6:	3001      	adds	r0, #1
 800ede8:	f43f af1d 	beq.w	800ec26 <_printf_float+0xba>
 800edec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edee:	b923      	cbnz	r3, 800edfa <_printf_float+0x28e>
 800edf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edf2:	b913      	cbnz	r3, 800edfa <_printf_float+0x28e>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	07d9      	lsls	r1, r3, #31
 800edf8:	d5d8      	bpl.n	800edac <_printf_float+0x240>
 800edfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edfe:	4631      	mov	r1, r6
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	f43f af0e 	beq.w	800ec26 <_printf_float+0xba>
 800ee0a:	f04f 0900 	mov.w	r9, #0
 800ee0e:	f104 0a1a 	add.w	sl, r4, #26
 800ee12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee14:	425b      	negs	r3, r3
 800ee16:	454b      	cmp	r3, r9
 800ee18:	dc01      	bgt.n	800ee1e <_printf_float+0x2b2>
 800ee1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee1c:	e794      	b.n	800ed48 <_printf_float+0x1dc>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4652      	mov	r2, sl
 800ee22:	4631      	mov	r1, r6
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f aefc 	beq.w	800ec26 <_printf_float+0xba>
 800ee2e:	f109 0901 	add.w	r9, r9, #1
 800ee32:	e7ee      	b.n	800ee12 <_printf_float+0x2a6>
 800ee34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	bfa8      	it	ge
 800ee3c:	461a      	movge	r2, r3
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	4691      	mov	r9, r2
 800ee42:	dd07      	ble.n	800ee54 <_printf_float+0x2e8>
 800ee44:	4613      	mov	r3, r2
 800ee46:	4631      	mov	r1, r6
 800ee48:	4642      	mov	r2, r8
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f aee9 	beq.w	800ec26 <_printf_float+0xba>
 800ee54:	f104 031a 	add.w	r3, r4, #26
 800ee58:	f04f 0b00 	mov.w	fp, #0
 800ee5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee60:	9306      	str	r3, [sp, #24]
 800ee62:	e015      	b.n	800ee90 <_printf_float+0x324>
 800ee64:	7fefffff 	.word	0x7fefffff
 800ee68:	0801370c 	.word	0x0801370c
 800ee6c:	08013708 	.word	0x08013708
 800ee70:	08013714 	.word	0x08013714
 800ee74:	08013710 	.word	0x08013710
 800ee78:	08013718 	.word	0x08013718
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	9a06      	ldr	r2, [sp, #24]
 800ee80:	4631      	mov	r1, r6
 800ee82:	4628      	mov	r0, r5
 800ee84:	47b8      	blx	r7
 800ee86:	3001      	adds	r0, #1
 800ee88:	f43f aecd 	beq.w	800ec26 <_printf_float+0xba>
 800ee8c:	f10b 0b01 	add.w	fp, fp, #1
 800ee90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ee94:	ebaa 0309 	sub.w	r3, sl, r9
 800ee98:	455b      	cmp	r3, fp
 800ee9a:	dcef      	bgt.n	800ee7c <_printf_float+0x310>
 800ee9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eea0:	429a      	cmp	r2, r3
 800eea2:	44d0      	add	r8, sl
 800eea4:	db15      	blt.n	800eed2 <_printf_float+0x366>
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	07da      	lsls	r2, r3, #31
 800eeaa:	d412      	bmi.n	800eed2 <_printf_float+0x366>
 800eeac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eeb0:	eba3 020a 	sub.w	r2, r3, sl
 800eeb4:	eba3 0a01 	sub.w	sl, r3, r1
 800eeb8:	4592      	cmp	sl, r2
 800eeba:	bfa8      	it	ge
 800eebc:	4692      	movge	sl, r2
 800eebe:	f1ba 0f00 	cmp.w	sl, #0
 800eec2:	dc0e      	bgt.n	800eee2 <_printf_float+0x376>
 800eec4:	f04f 0800 	mov.w	r8, #0
 800eec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eecc:	f104 091a 	add.w	r9, r4, #26
 800eed0:	e019      	b.n	800ef06 <_printf_float+0x39a>
 800eed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eed6:	4631      	mov	r1, r6
 800eed8:	4628      	mov	r0, r5
 800eeda:	47b8      	blx	r7
 800eedc:	3001      	adds	r0, #1
 800eede:	d1e5      	bne.n	800eeac <_printf_float+0x340>
 800eee0:	e6a1      	b.n	800ec26 <_printf_float+0xba>
 800eee2:	4653      	mov	r3, sl
 800eee4:	4642      	mov	r2, r8
 800eee6:	4631      	mov	r1, r6
 800eee8:	4628      	mov	r0, r5
 800eeea:	47b8      	blx	r7
 800eeec:	3001      	adds	r0, #1
 800eeee:	d1e9      	bne.n	800eec4 <_printf_float+0x358>
 800eef0:	e699      	b.n	800ec26 <_printf_float+0xba>
 800eef2:	2301      	movs	r3, #1
 800eef4:	464a      	mov	r2, r9
 800eef6:	4631      	mov	r1, r6
 800eef8:	4628      	mov	r0, r5
 800eefa:	47b8      	blx	r7
 800eefc:	3001      	adds	r0, #1
 800eefe:	f43f ae92 	beq.w	800ec26 <_printf_float+0xba>
 800ef02:	f108 0801 	add.w	r8, r8, #1
 800ef06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef0a:	1a9b      	subs	r3, r3, r2
 800ef0c:	eba3 030a 	sub.w	r3, r3, sl
 800ef10:	4543      	cmp	r3, r8
 800ef12:	dcee      	bgt.n	800eef2 <_printf_float+0x386>
 800ef14:	e74a      	b.n	800edac <_printf_float+0x240>
 800ef16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef18:	2a01      	cmp	r2, #1
 800ef1a:	dc01      	bgt.n	800ef20 <_printf_float+0x3b4>
 800ef1c:	07db      	lsls	r3, r3, #31
 800ef1e:	d53a      	bpl.n	800ef96 <_printf_float+0x42a>
 800ef20:	2301      	movs	r3, #1
 800ef22:	4642      	mov	r2, r8
 800ef24:	4631      	mov	r1, r6
 800ef26:	4628      	mov	r0, r5
 800ef28:	47b8      	blx	r7
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	f43f ae7b 	beq.w	800ec26 <_printf_float+0xba>
 800ef30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef34:	4631      	mov	r1, r6
 800ef36:	4628      	mov	r0, r5
 800ef38:	47b8      	blx	r7
 800ef3a:	3001      	adds	r0, #1
 800ef3c:	f108 0801 	add.w	r8, r8, #1
 800ef40:	f43f ae71 	beq.w	800ec26 <_printf_float+0xba>
 800ef44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef46:	2200      	movs	r2, #0
 800ef48:	f103 3aff 	add.w	sl, r3, #4294967295
 800ef4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef50:	2300      	movs	r3, #0
 800ef52:	f7f1 fde1 	bl	8000b18 <__aeabi_dcmpeq>
 800ef56:	b9c8      	cbnz	r0, 800ef8c <_printf_float+0x420>
 800ef58:	4653      	mov	r3, sl
 800ef5a:	4642      	mov	r2, r8
 800ef5c:	4631      	mov	r1, r6
 800ef5e:	4628      	mov	r0, r5
 800ef60:	47b8      	blx	r7
 800ef62:	3001      	adds	r0, #1
 800ef64:	d10e      	bne.n	800ef84 <_printf_float+0x418>
 800ef66:	e65e      	b.n	800ec26 <_printf_float+0xba>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	4652      	mov	r2, sl
 800ef6c:	4631      	mov	r1, r6
 800ef6e:	4628      	mov	r0, r5
 800ef70:	47b8      	blx	r7
 800ef72:	3001      	adds	r0, #1
 800ef74:	f43f ae57 	beq.w	800ec26 <_printf_float+0xba>
 800ef78:	f108 0801 	add.w	r8, r8, #1
 800ef7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	4543      	cmp	r3, r8
 800ef82:	dcf1      	bgt.n	800ef68 <_printf_float+0x3fc>
 800ef84:	464b      	mov	r3, r9
 800ef86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef8a:	e6de      	b.n	800ed4a <_printf_float+0x1de>
 800ef8c:	f04f 0800 	mov.w	r8, #0
 800ef90:	f104 0a1a 	add.w	sl, r4, #26
 800ef94:	e7f2      	b.n	800ef7c <_printf_float+0x410>
 800ef96:	2301      	movs	r3, #1
 800ef98:	e7df      	b.n	800ef5a <_printf_float+0x3ee>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	464a      	mov	r2, r9
 800ef9e:	4631      	mov	r1, r6
 800efa0:	4628      	mov	r0, r5
 800efa2:	47b8      	blx	r7
 800efa4:	3001      	adds	r0, #1
 800efa6:	f43f ae3e 	beq.w	800ec26 <_printf_float+0xba>
 800efaa:	f108 0801 	add.w	r8, r8, #1
 800efae:	68e3      	ldr	r3, [r4, #12]
 800efb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efb2:	1a9b      	subs	r3, r3, r2
 800efb4:	4543      	cmp	r3, r8
 800efb6:	dcf0      	bgt.n	800ef9a <_printf_float+0x42e>
 800efb8:	e6fc      	b.n	800edb4 <_printf_float+0x248>
 800efba:	f04f 0800 	mov.w	r8, #0
 800efbe:	f104 0919 	add.w	r9, r4, #25
 800efc2:	e7f4      	b.n	800efae <_printf_float+0x442>
 800efc4:	2900      	cmp	r1, #0
 800efc6:	f43f ae8b 	beq.w	800ece0 <_printf_float+0x174>
 800efca:	2300      	movs	r3, #0
 800efcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800efd0:	ab09      	add	r3, sp, #36	; 0x24
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	ec49 8b10 	vmov	d0, r8, r9
 800efd8:	6022      	str	r2, [r4, #0]
 800efda:	f8cd a004 	str.w	sl, [sp, #4]
 800efde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efe2:	4628      	mov	r0, r5
 800efe4:	f7ff fd2e 	bl	800ea44 <__cvt>
 800efe8:	4680      	mov	r8, r0
 800efea:	e648      	b.n	800ec7e <_printf_float+0x112>

0800efec <_printf_common>:
 800efec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eff0:	4691      	mov	r9, r2
 800eff2:	461f      	mov	r7, r3
 800eff4:	688a      	ldr	r2, [r1, #8]
 800eff6:	690b      	ldr	r3, [r1, #16]
 800eff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800effc:	4293      	cmp	r3, r2
 800effe:	bfb8      	it	lt
 800f000:	4613      	movlt	r3, r2
 800f002:	f8c9 3000 	str.w	r3, [r9]
 800f006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f00a:	4606      	mov	r6, r0
 800f00c:	460c      	mov	r4, r1
 800f00e:	b112      	cbz	r2, 800f016 <_printf_common+0x2a>
 800f010:	3301      	adds	r3, #1
 800f012:	f8c9 3000 	str.w	r3, [r9]
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	0699      	lsls	r1, r3, #26
 800f01a:	bf42      	ittt	mi
 800f01c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f020:	3302      	addmi	r3, #2
 800f022:	f8c9 3000 	strmi.w	r3, [r9]
 800f026:	6825      	ldr	r5, [r4, #0]
 800f028:	f015 0506 	ands.w	r5, r5, #6
 800f02c:	d107      	bne.n	800f03e <_printf_common+0x52>
 800f02e:	f104 0a19 	add.w	sl, r4, #25
 800f032:	68e3      	ldr	r3, [r4, #12]
 800f034:	f8d9 2000 	ldr.w	r2, [r9]
 800f038:	1a9b      	subs	r3, r3, r2
 800f03a:	42ab      	cmp	r3, r5
 800f03c:	dc28      	bgt.n	800f090 <_printf_common+0xa4>
 800f03e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f042:	6822      	ldr	r2, [r4, #0]
 800f044:	3300      	adds	r3, #0
 800f046:	bf18      	it	ne
 800f048:	2301      	movne	r3, #1
 800f04a:	0692      	lsls	r2, r2, #26
 800f04c:	d42d      	bmi.n	800f0aa <_printf_common+0xbe>
 800f04e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f052:	4639      	mov	r1, r7
 800f054:	4630      	mov	r0, r6
 800f056:	47c0      	blx	r8
 800f058:	3001      	adds	r0, #1
 800f05a:	d020      	beq.n	800f09e <_printf_common+0xb2>
 800f05c:	6823      	ldr	r3, [r4, #0]
 800f05e:	68e5      	ldr	r5, [r4, #12]
 800f060:	f8d9 2000 	ldr.w	r2, [r9]
 800f064:	f003 0306 	and.w	r3, r3, #6
 800f068:	2b04      	cmp	r3, #4
 800f06a:	bf08      	it	eq
 800f06c:	1aad      	subeq	r5, r5, r2
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	6922      	ldr	r2, [r4, #16]
 800f072:	bf0c      	ite	eq
 800f074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f078:	2500      	movne	r5, #0
 800f07a:	4293      	cmp	r3, r2
 800f07c:	bfc4      	itt	gt
 800f07e:	1a9b      	subgt	r3, r3, r2
 800f080:	18ed      	addgt	r5, r5, r3
 800f082:	f04f 0900 	mov.w	r9, #0
 800f086:	341a      	adds	r4, #26
 800f088:	454d      	cmp	r5, r9
 800f08a:	d11a      	bne.n	800f0c2 <_printf_common+0xd6>
 800f08c:	2000      	movs	r0, #0
 800f08e:	e008      	b.n	800f0a2 <_printf_common+0xb6>
 800f090:	2301      	movs	r3, #1
 800f092:	4652      	mov	r2, sl
 800f094:	4639      	mov	r1, r7
 800f096:	4630      	mov	r0, r6
 800f098:	47c0      	blx	r8
 800f09a:	3001      	adds	r0, #1
 800f09c:	d103      	bne.n	800f0a6 <_printf_common+0xba>
 800f09e:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a6:	3501      	adds	r5, #1
 800f0a8:	e7c3      	b.n	800f032 <_printf_common+0x46>
 800f0aa:	18e1      	adds	r1, r4, r3
 800f0ac:	1c5a      	adds	r2, r3, #1
 800f0ae:	2030      	movs	r0, #48	; 0x30
 800f0b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f0b4:	4422      	add	r2, r4
 800f0b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f0ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f0be:	3302      	adds	r3, #2
 800f0c0:	e7c5      	b.n	800f04e <_printf_common+0x62>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	4639      	mov	r1, r7
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	47c0      	blx	r8
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d0e6      	beq.n	800f09e <_printf_common+0xb2>
 800f0d0:	f109 0901 	add.w	r9, r9, #1
 800f0d4:	e7d8      	b.n	800f088 <_printf_common+0x9c>
	...

0800f0d8 <_printf_i>:
 800f0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	7e09      	ldrb	r1, [r1, #24]
 800f0e4:	b085      	sub	sp, #20
 800f0e6:	296e      	cmp	r1, #110	; 0x6e
 800f0e8:	4617      	mov	r7, r2
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	4698      	mov	r8, r3
 800f0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0f0:	f000 80b3 	beq.w	800f25a <_printf_i+0x182>
 800f0f4:	d822      	bhi.n	800f13c <_printf_i+0x64>
 800f0f6:	2963      	cmp	r1, #99	; 0x63
 800f0f8:	d036      	beq.n	800f168 <_printf_i+0x90>
 800f0fa:	d80a      	bhi.n	800f112 <_printf_i+0x3a>
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	f000 80b9 	beq.w	800f274 <_printf_i+0x19c>
 800f102:	2958      	cmp	r1, #88	; 0x58
 800f104:	f000 8083 	beq.w	800f20e <_printf_i+0x136>
 800f108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f10c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f110:	e032      	b.n	800f178 <_printf_i+0xa0>
 800f112:	2964      	cmp	r1, #100	; 0x64
 800f114:	d001      	beq.n	800f11a <_printf_i+0x42>
 800f116:	2969      	cmp	r1, #105	; 0x69
 800f118:	d1f6      	bne.n	800f108 <_printf_i+0x30>
 800f11a:	6820      	ldr	r0, [r4, #0]
 800f11c:	6813      	ldr	r3, [r2, #0]
 800f11e:	0605      	lsls	r5, r0, #24
 800f120:	f103 0104 	add.w	r1, r3, #4
 800f124:	d52a      	bpl.n	800f17c <_printf_i+0xa4>
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6011      	str	r1, [r2, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da03      	bge.n	800f136 <_printf_i+0x5e>
 800f12e:	222d      	movs	r2, #45	; 0x2d
 800f130:	425b      	negs	r3, r3
 800f132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f136:	486f      	ldr	r0, [pc, #444]	; (800f2f4 <_printf_i+0x21c>)
 800f138:	220a      	movs	r2, #10
 800f13a:	e039      	b.n	800f1b0 <_printf_i+0xd8>
 800f13c:	2973      	cmp	r1, #115	; 0x73
 800f13e:	f000 809d 	beq.w	800f27c <_printf_i+0x1a4>
 800f142:	d808      	bhi.n	800f156 <_printf_i+0x7e>
 800f144:	296f      	cmp	r1, #111	; 0x6f
 800f146:	d020      	beq.n	800f18a <_printf_i+0xb2>
 800f148:	2970      	cmp	r1, #112	; 0x70
 800f14a:	d1dd      	bne.n	800f108 <_printf_i+0x30>
 800f14c:	6823      	ldr	r3, [r4, #0]
 800f14e:	f043 0320 	orr.w	r3, r3, #32
 800f152:	6023      	str	r3, [r4, #0]
 800f154:	e003      	b.n	800f15e <_printf_i+0x86>
 800f156:	2975      	cmp	r1, #117	; 0x75
 800f158:	d017      	beq.n	800f18a <_printf_i+0xb2>
 800f15a:	2978      	cmp	r1, #120	; 0x78
 800f15c:	d1d4      	bne.n	800f108 <_printf_i+0x30>
 800f15e:	2378      	movs	r3, #120	; 0x78
 800f160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f164:	4864      	ldr	r0, [pc, #400]	; (800f2f8 <_printf_i+0x220>)
 800f166:	e055      	b.n	800f214 <_printf_i+0x13c>
 800f168:	6813      	ldr	r3, [r2, #0]
 800f16a:	1d19      	adds	r1, r3, #4
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	6011      	str	r1, [r2, #0]
 800f170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f178:	2301      	movs	r3, #1
 800f17a:	e08c      	b.n	800f296 <_printf_i+0x1be>
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	6011      	str	r1, [r2, #0]
 800f180:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f184:	bf18      	it	ne
 800f186:	b21b      	sxthne	r3, r3
 800f188:	e7cf      	b.n	800f12a <_printf_i+0x52>
 800f18a:	6813      	ldr	r3, [r2, #0]
 800f18c:	6825      	ldr	r5, [r4, #0]
 800f18e:	1d18      	adds	r0, r3, #4
 800f190:	6010      	str	r0, [r2, #0]
 800f192:	0628      	lsls	r0, r5, #24
 800f194:	d501      	bpl.n	800f19a <_printf_i+0xc2>
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	e002      	b.n	800f1a0 <_printf_i+0xc8>
 800f19a:	0668      	lsls	r0, r5, #25
 800f19c:	d5fb      	bpl.n	800f196 <_printf_i+0xbe>
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	4854      	ldr	r0, [pc, #336]	; (800f2f4 <_printf_i+0x21c>)
 800f1a2:	296f      	cmp	r1, #111	; 0x6f
 800f1a4:	bf14      	ite	ne
 800f1a6:	220a      	movne	r2, #10
 800f1a8:	2208      	moveq	r2, #8
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1b0:	6865      	ldr	r5, [r4, #4]
 800f1b2:	60a5      	str	r5, [r4, #8]
 800f1b4:	2d00      	cmp	r5, #0
 800f1b6:	f2c0 8095 	blt.w	800f2e4 <_printf_i+0x20c>
 800f1ba:	6821      	ldr	r1, [r4, #0]
 800f1bc:	f021 0104 	bic.w	r1, r1, #4
 800f1c0:	6021      	str	r1, [r4, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d13d      	bne.n	800f242 <_printf_i+0x16a>
 800f1c6:	2d00      	cmp	r5, #0
 800f1c8:	f040 808e 	bne.w	800f2e8 <_printf_i+0x210>
 800f1cc:	4665      	mov	r5, ip
 800f1ce:	2a08      	cmp	r2, #8
 800f1d0:	d10b      	bne.n	800f1ea <_printf_i+0x112>
 800f1d2:	6823      	ldr	r3, [r4, #0]
 800f1d4:	07db      	lsls	r3, r3, #31
 800f1d6:	d508      	bpl.n	800f1ea <_printf_i+0x112>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	6862      	ldr	r2, [r4, #4]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	bfde      	ittt	le
 800f1e0:	2330      	movle	r3, #48	; 0x30
 800f1e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1ea:	ebac 0305 	sub.w	r3, ip, r5
 800f1ee:	6123      	str	r3, [r4, #16]
 800f1f0:	f8cd 8000 	str.w	r8, [sp]
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	aa03      	add	r2, sp, #12
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f7ff fef6 	bl	800efec <_printf_common>
 800f200:	3001      	adds	r0, #1
 800f202:	d14d      	bne.n	800f2a0 <_printf_i+0x1c8>
 800f204:	f04f 30ff 	mov.w	r0, #4294967295
 800f208:	b005      	add	sp, #20
 800f20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f20e:	4839      	ldr	r0, [pc, #228]	; (800f2f4 <_printf_i+0x21c>)
 800f210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f214:	6813      	ldr	r3, [r2, #0]
 800f216:	6821      	ldr	r1, [r4, #0]
 800f218:	1d1d      	adds	r5, r3, #4
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6015      	str	r5, [r2, #0]
 800f21e:	060a      	lsls	r2, r1, #24
 800f220:	d50b      	bpl.n	800f23a <_printf_i+0x162>
 800f222:	07ca      	lsls	r2, r1, #31
 800f224:	bf44      	itt	mi
 800f226:	f041 0120 	orrmi.w	r1, r1, #32
 800f22a:	6021      	strmi	r1, [r4, #0]
 800f22c:	b91b      	cbnz	r3, 800f236 <_printf_i+0x15e>
 800f22e:	6822      	ldr	r2, [r4, #0]
 800f230:	f022 0220 	bic.w	r2, r2, #32
 800f234:	6022      	str	r2, [r4, #0]
 800f236:	2210      	movs	r2, #16
 800f238:	e7b7      	b.n	800f1aa <_printf_i+0xd2>
 800f23a:	064d      	lsls	r5, r1, #25
 800f23c:	bf48      	it	mi
 800f23e:	b29b      	uxthmi	r3, r3
 800f240:	e7ef      	b.n	800f222 <_printf_i+0x14a>
 800f242:	4665      	mov	r5, ip
 800f244:	fbb3 f1f2 	udiv	r1, r3, r2
 800f248:	fb02 3311 	mls	r3, r2, r1, r3
 800f24c:	5cc3      	ldrb	r3, [r0, r3]
 800f24e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f252:	460b      	mov	r3, r1
 800f254:	2900      	cmp	r1, #0
 800f256:	d1f5      	bne.n	800f244 <_printf_i+0x16c>
 800f258:	e7b9      	b.n	800f1ce <_printf_i+0xf6>
 800f25a:	6813      	ldr	r3, [r2, #0]
 800f25c:	6825      	ldr	r5, [r4, #0]
 800f25e:	6961      	ldr	r1, [r4, #20]
 800f260:	1d18      	adds	r0, r3, #4
 800f262:	6010      	str	r0, [r2, #0]
 800f264:	0628      	lsls	r0, r5, #24
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	d501      	bpl.n	800f26e <_printf_i+0x196>
 800f26a:	6019      	str	r1, [r3, #0]
 800f26c:	e002      	b.n	800f274 <_printf_i+0x19c>
 800f26e:	066a      	lsls	r2, r5, #25
 800f270:	d5fb      	bpl.n	800f26a <_printf_i+0x192>
 800f272:	8019      	strh	r1, [r3, #0]
 800f274:	2300      	movs	r3, #0
 800f276:	6123      	str	r3, [r4, #16]
 800f278:	4665      	mov	r5, ip
 800f27a:	e7b9      	b.n	800f1f0 <_printf_i+0x118>
 800f27c:	6813      	ldr	r3, [r2, #0]
 800f27e:	1d19      	adds	r1, r3, #4
 800f280:	6011      	str	r1, [r2, #0]
 800f282:	681d      	ldr	r5, [r3, #0]
 800f284:	6862      	ldr	r2, [r4, #4]
 800f286:	2100      	movs	r1, #0
 800f288:	4628      	mov	r0, r5
 800f28a:	f7f0 ffd1 	bl	8000230 <memchr>
 800f28e:	b108      	cbz	r0, 800f294 <_printf_i+0x1bc>
 800f290:	1b40      	subs	r0, r0, r5
 800f292:	6060      	str	r0, [r4, #4]
 800f294:	6863      	ldr	r3, [r4, #4]
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	2300      	movs	r3, #0
 800f29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29e:	e7a7      	b.n	800f1f0 <_printf_i+0x118>
 800f2a0:	6923      	ldr	r3, [r4, #16]
 800f2a2:	462a      	mov	r2, r5
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	47c0      	blx	r8
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	d0aa      	beq.n	800f204 <_printf_i+0x12c>
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	079b      	lsls	r3, r3, #30
 800f2b2:	d413      	bmi.n	800f2dc <_printf_i+0x204>
 800f2b4:	68e0      	ldr	r0, [r4, #12]
 800f2b6:	9b03      	ldr	r3, [sp, #12]
 800f2b8:	4298      	cmp	r0, r3
 800f2ba:	bfb8      	it	lt
 800f2bc:	4618      	movlt	r0, r3
 800f2be:	e7a3      	b.n	800f208 <_printf_i+0x130>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	464a      	mov	r2, r9
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	47c0      	blx	r8
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	d09a      	beq.n	800f204 <_printf_i+0x12c>
 800f2ce:	3501      	adds	r5, #1
 800f2d0:	68e3      	ldr	r3, [r4, #12]
 800f2d2:	9a03      	ldr	r2, [sp, #12]
 800f2d4:	1a9b      	subs	r3, r3, r2
 800f2d6:	42ab      	cmp	r3, r5
 800f2d8:	dcf2      	bgt.n	800f2c0 <_printf_i+0x1e8>
 800f2da:	e7eb      	b.n	800f2b4 <_printf_i+0x1dc>
 800f2dc:	2500      	movs	r5, #0
 800f2de:	f104 0919 	add.w	r9, r4, #25
 800f2e2:	e7f5      	b.n	800f2d0 <_printf_i+0x1f8>
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1ac      	bne.n	800f242 <_printf_i+0x16a>
 800f2e8:	7803      	ldrb	r3, [r0, #0]
 800f2ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2f2:	e76c      	b.n	800f1ce <_printf_i+0xf6>
 800f2f4:	0801371a 	.word	0x0801371a
 800f2f8:	0801372b 	.word	0x0801372b

0800f2fc <_scanf_float>:
 800f2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f300:	469a      	mov	sl, r3
 800f302:	688b      	ldr	r3, [r1, #8]
 800f304:	4616      	mov	r6, r2
 800f306:	1e5a      	subs	r2, r3, #1
 800f308:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f30c:	b087      	sub	sp, #28
 800f30e:	bf83      	ittte	hi
 800f310:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800f314:	189b      	addhi	r3, r3, r2
 800f316:	9301      	strhi	r3, [sp, #4]
 800f318:	2300      	movls	r3, #0
 800f31a:	bf86      	itte	hi
 800f31c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f320:	608b      	strhi	r3, [r1, #8]
 800f322:	9301      	strls	r3, [sp, #4]
 800f324:	680b      	ldr	r3, [r1, #0]
 800f326:	4688      	mov	r8, r1
 800f328:	f04f 0b00 	mov.w	fp, #0
 800f32c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f330:	f848 3b1c 	str.w	r3, [r8], #28
 800f334:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800f338:	4607      	mov	r7, r0
 800f33a:	460c      	mov	r4, r1
 800f33c:	4645      	mov	r5, r8
 800f33e:	465a      	mov	r2, fp
 800f340:	46d9      	mov	r9, fp
 800f342:	f8cd b008 	str.w	fp, [sp, #8]
 800f346:	68a1      	ldr	r1, [r4, #8]
 800f348:	b181      	cbz	r1, 800f36c <_scanf_float+0x70>
 800f34a:	6833      	ldr	r3, [r6, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	2b49      	cmp	r3, #73	; 0x49
 800f350:	d071      	beq.n	800f436 <_scanf_float+0x13a>
 800f352:	d84d      	bhi.n	800f3f0 <_scanf_float+0xf4>
 800f354:	2b39      	cmp	r3, #57	; 0x39
 800f356:	d840      	bhi.n	800f3da <_scanf_float+0xde>
 800f358:	2b31      	cmp	r3, #49	; 0x31
 800f35a:	f080 8088 	bcs.w	800f46e <_scanf_float+0x172>
 800f35e:	2b2d      	cmp	r3, #45	; 0x2d
 800f360:	f000 8090 	beq.w	800f484 <_scanf_float+0x188>
 800f364:	d815      	bhi.n	800f392 <_scanf_float+0x96>
 800f366:	2b2b      	cmp	r3, #43	; 0x2b
 800f368:	f000 808c 	beq.w	800f484 <_scanf_float+0x188>
 800f36c:	f1b9 0f00 	cmp.w	r9, #0
 800f370:	d003      	beq.n	800f37a <_scanf_float+0x7e>
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	3a01      	subs	r2, #1
 800f37c:	2a01      	cmp	r2, #1
 800f37e:	f200 80ea 	bhi.w	800f556 <_scanf_float+0x25a>
 800f382:	4545      	cmp	r5, r8
 800f384:	f200 80dc 	bhi.w	800f540 <_scanf_float+0x244>
 800f388:	2601      	movs	r6, #1
 800f38a:	4630      	mov	r0, r6
 800f38c:	b007      	add	sp, #28
 800f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f392:	2b2e      	cmp	r3, #46	; 0x2e
 800f394:	f000 809f 	beq.w	800f4d6 <_scanf_float+0x1da>
 800f398:	2b30      	cmp	r3, #48	; 0x30
 800f39a:	d1e7      	bne.n	800f36c <_scanf_float+0x70>
 800f39c:	6820      	ldr	r0, [r4, #0]
 800f39e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800f3a2:	d064      	beq.n	800f46e <_scanf_float+0x172>
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800f3aa:	6020      	str	r0, [r4, #0]
 800f3ac:	f109 0901 	add.w	r9, r9, #1
 800f3b0:	b11b      	cbz	r3, 800f3ba <_scanf_float+0xbe>
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	3101      	adds	r1, #1
 800f3b6:	9301      	str	r3, [sp, #4]
 800f3b8:	60a1      	str	r1, [r4, #8]
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	60a3      	str	r3, [r4, #8]
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	6123      	str	r3, [r4, #16]
 800f3c6:	6873      	ldr	r3, [r6, #4]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	6073      	str	r3, [r6, #4]
 800f3ce:	f340 80ac 	ble.w	800f52a <_scanf_float+0x22e>
 800f3d2:	6833      	ldr	r3, [r6, #0]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	6033      	str	r3, [r6, #0]
 800f3d8:	e7b5      	b.n	800f346 <_scanf_float+0x4a>
 800f3da:	2b45      	cmp	r3, #69	; 0x45
 800f3dc:	f000 8085 	beq.w	800f4ea <_scanf_float+0x1ee>
 800f3e0:	2b46      	cmp	r3, #70	; 0x46
 800f3e2:	d06a      	beq.n	800f4ba <_scanf_float+0x1be>
 800f3e4:	2b41      	cmp	r3, #65	; 0x41
 800f3e6:	d1c1      	bne.n	800f36c <_scanf_float+0x70>
 800f3e8:	2a01      	cmp	r2, #1
 800f3ea:	d1bf      	bne.n	800f36c <_scanf_float+0x70>
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	e046      	b.n	800f47e <_scanf_float+0x182>
 800f3f0:	2b65      	cmp	r3, #101	; 0x65
 800f3f2:	d07a      	beq.n	800f4ea <_scanf_float+0x1ee>
 800f3f4:	d818      	bhi.n	800f428 <_scanf_float+0x12c>
 800f3f6:	2b54      	cmp	r3, #84	; 0x54
 800f3f8:	d066      	beq.n	800f4c8 <_scanf_float+0x1cc>
 800f3fa:	d811      	bhi.n	800f420 <_scanf_float+0x124>
 800f3fc:	2b4e      	cmp	r3, #78	; 0x4e
 800f3fe:	d1b5      	bne.n	800f36c <_scanf_float+0x70>
 800f400:	2a00      	cmp	r2, #0
 800f402:	d146      	bne.n	800f492 <_scanf_float+0x196>
 800f404:	f1b9 0f00 	cmp.w	r9, #0
 800f408:	d145      	bne.n	800f496 <_scanf_float+0x19a>
 800f40a:	6821      	ldr	r1, [r4, #0]
 800f40c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f410:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f414:	d13f      	bne.n	800f496 <_scanf_float+0x19a>
 800f416:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f41a:	6021      	str	r1, [r4, #0]
 800f41c:	2201      	movs	r2, #1
 800f41e:	e02e      	b.n	800f47e <_scanf_float+0x182>
 800f420:	2b59      	cmp	r3, #89	; 0x59
 800f422:	d01e      	beq.n	800f462 <_scanf_float+0x166>
 800f424:	2b61      	cmp	r3, #97	; 0x61
 800f426:	e7de      	b.n	800f3e6 <_scanf_float+0xea>
 800f428:	2b6e      	cmp	r3, #110	; 0x6e
 800f42a:	d0e9      	beq.n	800f400 <_scanf_float+0x104>
 800f42c:	d815      	bhi.n	800f45a <_scanf_float+0x15e>
 800f42e:	2b66      	cmp	r3, #102	; 0x66
 800f430:	d043      	beq.n	800f4ba <_scanf_float+0x1be>
 800f432:	2b69      	cmp	r3, #105	; 0x69
 800f434:	d19a      	bne.n	800f36c <_scanf_float+0x70>
 800f436:	f1bb 0f00 	cmp.w	fp, #0
 800f43a:	d138      	bne.n	800f4ae <_scanf_float+0x1b2>
 800f43c:	f1b9 0f00 	cmp.w	r9, #0
 800f440:	d197      	bne.n	800f372 <_scanf_float+0x76>
 800f442:	6821      	ldr	r1, [r4, #0]
 800f444:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f448:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f44c:	d195      	bne.n	800f37a <_scanf_float+0x7e>
 800f44e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f452:	6021      	str	r1, [r4, #0]
 800f454:	f04f 0b01 	mov.w	fp, #1
 800f458:	e011      	b.n	800f47e <_scanf_float+0x182>
 800f45a:	2b74      	cmp	r3, #116	; 0x74
 800f45c:	d034      	beq.n	800f4c8 <_scanf_float+0x1cc>
 800f45e:	2b79      	cmp	r3, #121	; 0x79
 800f460:	d184      	bne.n	800f36c <_scanf_float+0x70>
 800f462:	f1bb 0f07 	cmp.w	fp, #7
 800f466:	d181      	bne.n	800f36c <_scanf_float+0x70>
 800f468:	f04f 0b08 	mov.w	fp, #8
 800f46c:	e007      	b.n	800f47e <_scanf_float+0x182>
 800f46e:	eb12 0f0b 	cmn.w	r2, fp
 800f472:	f47f af7b 	bne.w	800f36c <_scanf_float+0x70>
 800f476:	6821      	ldr	r1, [r4, #0]
 800f478:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800f47c:	6021      	str	r1, [r4, #0]
 800f47e:	702b      	strb	r3, [r5, #0]
 800f480:	3501      	adds	r5, #1
 800f482:	e79a      	b.n	800f3ba <_scanf_float+0xbe>
 800f484:	6821      	ldr	r1, [r4, #0]
 800f486:	0608      	lsls	r0, r1, #24
 800f488:	f57f af70 	bpl.w	800f36c <_scanf_float+0x70>
 800f48c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f490:	e7f4      	b.n	800f47c <_scanf_float+0x180>
 800f492:	2a02      	cmp	r2, #2
 800f494:	d047      	beq.n	800f526 <_scanf_float+0x22a>
 800f496:	f1bb 0f01 	cmp.w	fp, #1
 800f49a:	d003      	beq.n	800f4a4 <_scanf_float+0x1a8>
 800f49c:	f1bb 0f04 	cmp.w	fp, #4
 800f4a0:	f47f af64 	bne.w	800f36c <_scanf_float+0x70>
 800f4a4:	f10b 0b01 	add.w	fp, fp, #1
 800f4a8:	fa5f fb8b 	uxtb.w	fp, fp
 800f4ac:	e7e7      	b.n	800f47e <_scanf_float+0x182>
 800f4ae:	f1bb 0f03 	cmp.w	fp, #3
 800f4b2:	d0f7      	beq.n	800f4a4 <_scanf_float+0x1a8>
 800f4b4:	f1bb 0f05 	cmp.w	fp, #5
 800f4b8:	e7f2      	b.n	800f4a0 <_scanf_float+0x1a4>
 800f4ba:	f1bb 0f02 	cmp.w	fp, #2
 800f4be:	f47f af55 	bne.w	800f36c <_scanf_float+0x70>
 800f4c2:	f04f 0b03 	mov.w	fp, #3
 800f4c6:	e7da      	b.n	800f47e <_scanf_float+0x182>
 800f4c8:	f1bb 0f06 	cmp.w	fp, #6
 800f4cc:	f47f af4e 	bne.w	800f36c <_scanf_float+0x70>
 800f4d0:	f04f 0b07 	mov.w	fp, #7
 800f4d4:	e7d3      	b.n	800f47e <_scanf_float+0x182>
 800f4d6:	6821      	ldr	r1, [r4, #0]
 800f4d8:	0588      	lsls	r0, r1, #22
 800f4da:	f57f af47 	bpl.w	800f36c <_scanf_float+0x70>
 800f4de:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f4e2:	6021      	str	r1, [r4, #0]
 800f4e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800f4e8:	e7c9      	b.n	800f47e <_scanf_float+0x182>
 800f4ea:	6821      	ldr	r1, [r4, #0]
 800f4ec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f4f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f4f4:	d006      	beq.n	800f504 <_scanf_float+0x208>
 800f4f6:	0548      	lsls	r0, r1, #21
 800f4f8:	f57f af38 	bpl.w	800f36c <_scanf_float+0x70>
 800f4fc:	f1b9 0f00 	cmp.w	r9, #0
 800f500:	f43f af3b 	beq.w	800f37a <_scanf_float+0x7e>
 800f504:	0588      	lsls	r0, r1, #22
 800f506:	bf58      	it	pl
 800f508:	9802      	ldrpl	r0, [sp, #8]
 800f50a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f50e:	bf58      	it	pl
 800f510:	eba9 0000 	subpl.w	r0, r9, r0
 800f514:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f518:	bf58      	it	pl
 800f51a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f51e:	6021      	str	r1, [r4, #0]
 800f520:	f04f 0900 	mov.w	r9, #0
 800f524:	e7ab      	b.n	800f47e <_scanf_float+0x182>
 800f526:	2203      	movs	r2, #3
 800f528:	e7a9      	b.n	800f47e <_scanf_float+0x182>
 800f52a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f52e:	9205      	str	r2, [sp, #20]
 800f530:	4631      	mov	r1, r6
 800f532:	4638      	mov	r0, r7
 800f534:	4798      	blx	r3
 800f536:	9a05      	ldr	r2, [sp, #20]
 800f538:	2800      	cmp	r0, #0
 800f53a:	f43f af04 	beq.w	800f346 <_scanf_float+0x4a>
 800f53e:	e715      	b.n	800f36c <_scanf_float+0x70>
 800f540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f544:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f548:	4632      	mov	r2, r6
 800f54a:	4638      	mov	r0, r7
 800f54c:	4798      	blx	r3
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	3b01      	subs	r3, #1
 800f552:	6123      	str	r3, [r4, #16]
 800f554:	e715      	b.n	800f382 <_scanf_float+0x86>
 800f556:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f55a:	2b06      	cmp	r3, #6
 800f55c:	d80a      	bhi.n	800f574 <_scanf_float+0x278>
 800f55e:	f1bb 0f02 	cmp.w	fp, #2
 800f562:	d968      	bls.n	800f636 <_scanf_float+0x33a>
 800f564:	f1ab 0b03 	sub.w	fp, fp, #3
 800f568:	fa5f fb8b 	uxtb.w	fp, fp
 800f56c:	eba5 0b0b 	sub.w	fp, r5, fp
 800f570:	455d      	cmp	r5, fp
 800f572:	d14b      	bne.n	800f60c <_scanf_float+0x310>
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	05da      	lsls	r2, r3, #23
 800f578:	d51f      	bpl.n	800f5ba <_scanf_float+0x2be>
 800f57a:	055b      	lsls	r3, r3, #21
 800f57c:	d468      	bmi.n	800f650 <_scanf_float+0x354>
 800f57e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f582:	6923      	ldr	r3, [r4, #16]
 800f584:	2965      	cmp	r1, #101	; 0x65
 800f586:	f103 33ff 	add.w	r3, r3, #4294967295
 800f58a:	f105 3bff 	add.w	fp, r5, #4294967295
 800f58e:	6123      	str	r3, [r4, #16]
 800f590:	d00d      	beq.n	800f5ae <_scanf_float+0x2b2>
 800f592:	2945      	cmp	r1, #69	; 0x45
 800f594:	d00b      	beq.n	800f5ae <_scanf_float+0x2b2>
 800f596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f59a:	4632      	mov	r2, r6
 800f59c:	4638      	mov	r0, r7
 800f59e:	4798      	blx	r3
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	f1a5 0b02 	sub.w	fp, r5, #2
 800f5ac:	6123      	str	r3, [r4, #16]
 800f5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5b2:	4632      	mov	r2, r6
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	4798      	blx	r3
 800f5b8:	465d      	mov	r5, fp
 800f5ba:	6826      	ldr	r6, [r4, #0]
 800f5bc:	f016 0610 	ands.w	r6, r6, #16
 800f5c0:	d17a      	bne.n	800f6b8 <_scanf_float+0x3bc>
 800f5c2:	702e      	strb	r6, [r5, #0]
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ce:	d142      	bne.n	800f656 <_scanf_float+0x35a>
 800f5d0:	9b02      	ldr	r3, [sp, #8]
 800f5d2:	eba9 0303 	sub.w	r3, r9, r3
 800f5d6:	425a      	negs	r2, r3
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d149      	bne.n	800f670 <_scanf_float+0x374>
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4641      	mov	r1, r8
 800f5e0:	4638      	mov	r0, r7
 800f5e2:	f001 f829 	bl	8010638 <_strtod_r>
 800f5e6:	6825      	ldr	r5, [r4, #0]
 800f5e8:	f8da 3000 	ldr.w	r3, [sl]
 800f5ec:	f015 0f02 	tst.w	r5, #2
 800f5f0:	f103 0204 	add.w	r2, r3, #4
 800f5f4:	ec59 8b10 	vmov	r8, r9, d0
 800f5f8:	f8ca 2000 	str.w	r2, [sl]
 800f5fc:	d043      	beq.n	800f686 <_scanf_float+0x38a>
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	e9c3 8900 	strd	r8, r9, [r3]
 800f604:	68e3      	ldr	r3, [r4, #12]
 800f606:	3301      	adds	r3, #1
 800f608:	60e3      	str	r3, [r4, #12]
 800f60a:	e6be      	b.n	800f38a <_scanf_float+0x8e>
 800f60c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f610:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f614:	4632      	mov	r2, r6
 800f616:	4638      	mov	r0, r7
 800f618:	4798      	blx	r3
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	3b01      	subs	r3, #1
 800f61e:	6123      	str	r3, [r4, #16]
 800f620:	e7a6      	b.n	800f570 <_scanf_float+0x274>
 800f622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f626:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f62a:	4632      	mov	r2, r6
 800f62c:	4638      	mov	r0, r7
 800f62e:	4798      	blx	r3
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	3b01      	subs	r3, #1
 800f634:	6123      	str	r3, [r4, #16]
 800f636:	4545      	cmp	r5, r8
 800f638:	d8f3      	bhi.n	800f622 <_scanf_float+0x326>
 800f63a:	e6a5      	b.n	800f388 <_scanf_float+0x8c>
 800f63c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f640:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f644:	4632      	mov	r2, r6
 800f646:	4638      	mov	r0, r7
 800f648:	4798      	blx	r3
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	6123      	str	r3, [r4, #16]
 800f650:	4545      	cmp	r5, r8
 800f652:	d8f3      	bhi.n	800f63c <_scanf_float+0x340>
 800f654:	e698      	b.n	800f388 <_scanf_float+0x8c>
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d0bf      	beq.n	800f5dc <_scanf_float+0x2e0>
 800f65c:	9904      	ldr	r1, [sp, #16]
 800f65e:	230a      	movs	r3, #10
 800f660:	4632      	mov	r2, r6
 800f662:	3101      	adds	r1, #1
 800f664:	4638      	mov	r0, r7
 800f666:	f001 f873 	bl	8010750 <_strtol_r>
 800f66a:	9b03      	ldr	r3, [sp, #12]
 800f66c:	9d04      	ldr	r5, [sp, #16]
 800f66e:	1ac2      	subs	r2, r0, r3
 800f670:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f674:	429d      	cmp	r5, r3
 800f676:	bf28      	it	cs
 800f678:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f67c:	490f      	ldr	r1, [pc, #60]	; (800f6bc <_scanf_float+0x3c0>)
 800f67e:	4628      	mov	r0, r5
 800f680:	f000 f966 	bl	800f950 <siprintf>
 800f684:	e7aa      	b.n	800f5dc <_scanf_float+0x2e0>
 800f686:	f015 0504 	ands.w	r5, r5, #4
 800f68a:	d1b8      	bne.n	800f5fe <_scanf_float+0x302>
 800f68c:	681f      	ldr	r7, [r3, #0]
 800f68e:	ee10 2a10 	vmov	r2, s0
 800f692:	464b      	mov	r3, r9
 800f694:	ee10 0a10 	vmov	r0, s0
 800f698:	4649      	mov	r1, r9
 800f69a:	f7f1 fa6f 	bl	8000b7c <__aeabi_dcmpun>
 800f69e:	b128      	cbz	r0, 800f6ac <_scanf_float+0x3b0>
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f000 f94f 	bl	800f944 <nanf>
 800f6a6:	ed87 0a00 	vstr	s0, [r7]
 800f6aa:	e7ab      	b.n	800f604 <_scanf_float+0x308>
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	4649      	mov	r1, r9
 800f6b0:	f7f1 fac2 	bl	8000c38 <__aeabi_d2f>
 800f6b4:	6038      	str	r0, [r7, #0]
 800f6b6:	e7a5      	b.n	800f604 <_scanf_float+0x308>
 800f6b8:	2600      	movs	r6, #0
 800f6ba:	e666      	b.n	800f38a <_scanf_float+0x8e>
 800f6bc:	0801373c 	.word	0x0801373c

0800f6c0 <iprintf>:
 800f6c0:	b40f      	push	{r0, r1, r2, r3}
 800f6c2:	4b0a      	ldr	r3, [pc, #40]	; (800f6ec <iprintf+0x2c>)
 800f6c4:	b513      	push	{r0, r1, r4, lr}
 800f6c6:	681c      	ldr	r4, [r3, #0]
 800f6c8:	b124      	cbz	r4, 800f6d4 <iprintf+0x14>
 800f6ca:	69a3      	ldr	r3, [r4, #24]
 800f6cc:	b913      	cbnz	r3, 800f6d4 <iprintf+0x14>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f7ff f84e 	bl	800e770 <__sinit>
 800f6d4:	ab05      	add	r3, sp, #20
 800f6d6:	9a04      	ldr	r2, [sp, #16]
 800f6d8:	68a1      	ldr	r1, [r4, #8]
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f003 f8c5 	bl	801286c <_vfiprintf_r>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6e8:	b004      	add	sp, #16
 800f6ea:	4770      	bx	lr
 800f6ec:	20000028 	.word	0x20000028

0800f6f0 <_puts_r>:
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	460e      	mov	r6, r1
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	b118      	cbz	r0, 800f700 <_puts_r+0x10>
 800f6f8:	6983      	ldr	r3, [r0, #24]
 800f6fa:	b90b      	cbnz	r3, 800f700 <_puts_r+0x10>
 800f6fc:	f7ff f838 	bl	800e770 <__sinit>
 800f700:	69ab      	ldr	r3, [r5, #24]
 800f702:	68ac      	ldr	r4, [r5, #8]
 800f704:	b913      	cbnz	r3, 800f70c <_puts_r+0x1c>
 800f706:	4628      	mov	r0, r5
 800f708:	f7ff f832 	bl	800e770 <__sinit>
 800f70c:	4b23      	ldr	r3, [pc, #140]	; (800f79c <_puts_r+0xac>)
 800f70e:	429c      	cmp	r4, r3
 800f710:	d117      	bne.n	800f742 <_puts_r+0x52>
 800f712:	686c      	ldr	r4, [r5, #4]
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	071b      	lsls	r3, r3, #28
 800f718:	d51d      	bpl.n	800f756 <_puts_r+0x66>
 800f71a:	6923      	ldr	r3, [r4, #16]
 800f71c:	b1db      	cbz	r3, 800f756 <_puts_r+0x66>
 800f71e:	3e01      	subs	r6, #1
 800f720:	68a3      	ldr	r3, [r4, #8]
 800f722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f726:	3b01      	subs	r3, #1
 800f728:	60a3      	str	r3, [r4, #8]
 800f72a:	b9e9      	cbnz	r1, 800f768 <_puts_r+0x78>
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	da2e      	bge.n	800f78e <_puts_r+0x9e>
 800f730:	4622      	mov	r2, r4
 800f732:	210a      	movs	r1, #10
 800f734:	4628      	mov	r0, r5
 800f736:	f001 f81d 	bl	8010774 <__swbuf_r>
 800f73a:	3001      	adds	r0, #1
 800f73c:	d011      	beq.n	800f762 <_puts_r+0x72>
 800f73e:	200a      	movs	r0, #10
 800f740:	e011      	b.n	800f766 <_puts_r+0x76>
 800f742:	4b17      	ldr	r3, [pc, #92]	; (800f7a0 <_puts_r+0xb0>)
 800f744:	429c      	cmp	r4, r3
 800f746:	d101      	bne.n	800f74c <_puts_r+0x5c>
 800f748:	68ac      	ldr	r4, [r5, #8]
 800f74a:	e7e3      	b.n	800f714 <_puts_r+0x24>
 800f74c:	4b15      	ldr	r3, [pc, #84]	; (800f7a4 <_puts_r+0xb4>)
 800f74e:	429c      	cmp	r4, r3
 800f750:	bf08      	it	eq
 800f752:	68ec      	ldreq	r4, [r5, #12]
 800f754:	e7de      	b.n	800f714 <_puts_r+0x24>
 800f756:	4621      	mov	r1, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	f001 f86f 	bl	801083c <__swsetup_r>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0dd      	beq.n	800f71e <_puts_r+0x2e>
 800f762:	f04f 30ff 	mov.w	r0, #4294967295
 800f766:	bd70      	pop	{r4, r5, r6, pc}
 800f768:	2b00      	cmp	r3, #0
 800f76a:	da04      	bge.n	800f776 <_puts_r+0x86>
 800f76c:	69a2      	ldr	r2, [r4, #24]
 800f76e:	429a      	cmp	r2, r3
 800f770:	dc06      	bgt.n	800f780 <_puts_r+0x90>
 800f772:	290a      	cmp	r1, #10
 800f774:	d004      	beq.n	800f780 <_puts_r+0x90>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	1c5a      	adds	r2, r3, #1
 800f77a:	6022      	str	r2, [r4, #0]
 800f77c:	7019      	strb	r1, [r3, #0]
 800f77e:	e7cf      	b.n	800f720 <_puts_r+0x30>
 800f780:	4622      	mov	r2, r4
 800f782:	4628      	mov	r0, r5
 800f784:	f000 fff6 	bl	8010774 <__swbuf_r>
 800f788:	3001      	adds	r0, #1
 800f78a:	d1c9      	bne.n	800f720 <_puts_r+0x30>
 800f78c:	e7e9      	b.n	800f762 <_puts_r+0x72>
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	200a      	movs	r0, #10
 800f792:	1c5a      	adds	r2, r3, #1
 800f794:	6022      	str	r2, [r4, #0]
 800f796:	7018      	strb	r0, [r3, #0]
 800f798:	e7e5      	b.n	800f766 <_puts_r+0x76>
 800f79a:	bf00      	nop
 800f79c:	080136c4 	.word	0x080136c4
 800f7a0:	080136e4 	.word	0x080136e4
 800f7a4:	080136a4 	.word	0x080136a4

0800f7a8 <puts>:
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <puts+0xc>)
 800f7aa:	4601      	mov	r1, r0
 800f7ac:	6818      	ldr	r0, [r3, #0]
 800f7ae:	f7ff bf9f 	b.w	800f6f0 <_puts_r>
 800f7b2:	bf00      	nop
 800f7b4:	20000028 	.word	0x20000028

0800f7b8 <_sbrk_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4c06      	ldr	r4, [pc, #24]	; (800f7d4 <_sbrk_r+0x1c>)
 800f7bc:	2300      	movs	r3, #0
 800f7be:	4605      	mov	r5, r0
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	6023      	str	r3, [r4, #0]
 800f7c4:	f7fc ff82 	bl	800c6cc <_sbrk>
 800f7c8:	1c43      	adds	r3, r0, #1
 800f7ca:	d102      	bne.n	800f7d2 <_sbrk_r+0x1a>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	b103      	cbz	r3, 800f7d2 <_sbrk_r+0x1a>
 800f7d0:	602b      	str	r3, [r5, #0]
 800f7d2:	bd38      	pop	{r3, r4, r5, pc}
 800f7d4:	2001bf58 	.word	0x2001bf58

0800f7d8 <setbuf>:
 800f7d8:	2900      	cmp	r1, #0
 800f7da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7de:	bf0c      	ite	eq
 800f7e0:	2202      	moveq	r2, #2
 800f7e2:	2200      	movne	r2, #0
 800f7e4:	f000 b800 	b.w	800f7e8 <setvbuf>

0800f7e8 <setvbuf>:
 800f7e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7ec:	461d      	mov	r5, r3
 800f7ee:	4b51      	ldr	r3, [pc, #324]	; (800f934 <setvbuf+0x14c>)
 800f7f0:	681e      	ldr	r6, [r3, #0]
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	460f      	mov	r7, r1
 800f7f6:	4690      	mov	r8, r2
 800f7f8:	b126      	cbz	r6, 800f804 <setvbuf+0x1c>
 800f7fa:	69b3      	ldr	r3, [r6, #24]
 800f7fc:	b913      	cbnz	r3, 800f804 <setvbuf+0x1c>
 800f7fe:	4630      	mov	r0, r6
 800f800:	f7fe ffb6 	bl	800e770 <__sinit>
 800f804:	4b4c      	ldr	r3, [pc, #304]	; (800f938 <setvbuf+0x150>)
 800f806:	429c      	cmp	r4, r3
 800f808:	d152      	bne.n	800f8b0 <setvbuf+0xc8>
 800f80a:	6874      	ldr	r4, [r6, #4]
 800f80c:	f1b8 0f02 	cmp.w	r8, #2
 800f810:	d006      	beq.n	800f820 <setvbuf+0x38>
 800f812:	f1b8 0f01 	cmp.w	r8, #1
 800f816:	f200 8089 	bhi.w	800f92c <setvbuf+0x144>
 800f81a:	2d00      	cmp	r5, #0
 800f81c:	f2c0 8086 	blt.w	800f92c <setvbuf+0x144>
 800f820:	4621      	mov	r1, r4
 800f822:	4630      	mov	r0, r6
 800f824:	f7fe ff28 	bl	800e678 <_fflush_r>
 800f828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f82a:	b141      	cbz	r1, 800f83e <setvbuf+0x56>
 800f82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f830:	4299      	cmp	r1, r3
 800f832:	d002      	beq.n	800f83a <setvbuf+0x52>
 800f834:	4630      	mov	r0, r6
 800f836:	f7ff f85d 	bl	800e8f4 <_free_r>
 800f83a:	2300      	movs	r3, #0
 800f83c:	6363      	str	r3, [r4, #52]	; 0x34
 800f83e:	2300      	movs	r3, #0
 800f840:	61a3      	str	r3, [r4, #24]
 800f842:	6063      	str	r3, [r4, #4]
 800f844:	89a3      	ldrh	r3, [r4, #12]
 800f846:	061b      	lsls	r3, r3, #24
 800f848:	d503      	bpl.n	800f852 <setvbuf+0x6a>
 800f84a:	6921      	ldr	r1, [r4, #16]
 800f84c:	4630      	mov	r0, r6
 800f84e:	f7ff f851 	bl	800e8f4 <_free_r>
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f858:	f023 0303 	bic.w	r3, r3, #3
 800f85c:	f1b8 0f02 	cmp.w	r8, #2
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	d05d      	beq.n	800f920 <setvbuf+0x138>
 800f864:	ab01      	add	r3, sp, #4
 800f866:	466a      	mov	r2, sp
 800f868:	4621      	mov	r1, r4
 800f86a:	4630      	mov	r0, r6
 800f86c:	f002 f9f4 	bl	8011c58 <__swhatbuf_r>
 800f870:	89a3      	ldrh	r3, [r4, #12]
 800f872:	4318      	orrs	r0, r3
 800f874:	81a0      	strh	r0, [r4, #12]
 800f876:	bb2d      	cbnz	r5, 800f8c4 <setvbuf+0xdc>
 800f878:	9d00      	ldr	r5, [sp, #0]
 800f87a:	4628      	mov	r0, r5
 800f87c:	f002 fa50 	bl	8011d20 <malloc>
 800f880:	4607      	mov	r7, r0
 800f882:	2800      	cmp	r0, #0
 800f884:	d14e      	bne.n	800f924 <setvbuf+0x13c>
 800f886:	f8dd 9000 	ldr.w	r9, [sp]
 800f88a:	45a9      	cmp	r9, r5
 800f88c:	d13c      	bne.n	800f908 <setvbuf+0x120>
 800f88e:	f04f 30ff 	mov.w	r0, #4294967295
 800f892:	89a3      	ldrh	r3, [r4, #12]
 800f894:	f043 0302 	orr.w	r3, r3, #2
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	2300      	movs	r3, #0
 800f89c:	60a3      	str	r3, [r4, #8]
 800f89e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8a2:	6023      	str	r3, [r4, #0]
 800f8a4:	6123      	str	r3, [r4, #16]
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	6163      	str	r3, [r4, #20]
 800f8aa:	b003      	add	sp, #12
 800f8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8b0:	4b22      	ldr	r3, [pc, #136]	; (800f93c <setvbuf+0x154>)
 800f8b2:	429c      	cmp	r4, r3
 800f8b4:	d101      	bne.n	800f8ba <setvbuf+0xd2>
 800f8b6:	68b4      	ldr	r4, [r6, #8]
 800f8b8:	e7a8      	b.n	800f80c <setvbuf+0x24>
 800f8ba:	4b21      	ldr	r3, [pc, #132]	; (800f940 <setvbuf+0x158>)
 800f8bc:	429c      	cmp	r4, r3
 800f8be:	bf08      	it	eq
 800f8c0:	68f4      	ldreq	r4, [r6, #12]
 800f8c2:	e7a3      	b.n	800f80c <setvbuf+0x24>
 800f8c4:	2f00      	cmp	r7, #0
 800f8c6:	d0d8      	beq.n	800f87a <setvbuf+0x92>
 800f8c8:	69b3      	ldr	r3, [r6, #24]
 800f8ca:	b913      	cbnz	r3, 800f8d2 <setvbuf+0xea>
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f7fe ff4f 	bl	800e770 <__sinit>
 800f8d2:	f1b8 0f01 	cmp.w	r8, #1
 800f8d6:	bf08      	it	eq
 800f8d8:	89a3      	ldrheq	r3, [r4, #12]
 800f8da:	6027      	str	r7, [r4, #0]
 800f8dc:	bf04      	itt	eq
 800f8de:	f043 0301 	orreq.w	r3, r3, #1
 800f8e2:	81a3      	strheq	r3, [r4, #12]
 800f8e4:	89a3      	ldrh	r3, [r4, #12]
 800f8e6:	f013 0008 	ands.w	r0, r3, #8
 800f8ea:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800f8ee:	d01b      	beq.n	800f928 <setvbuf+0x140>
 800f8f0:	f013 0001 	ands.w	r0, r3, #1
 800f8f4:	bf18      	it	ne
 800f8f6:	426d      	negne	r5, r5
 800f8f8:	f04f 0300 	mov.w	r3, #0
 800f8fc:	bf1d      	ittte	ne
 800f8fe:	60a3      	strne	r3, [r4, #8]
 800f900:	61a5      	strne	r5, [r4, #24]
 800f902:	4618      	movne	r0, r3
 800f904:	60a5      	streq	r5, [r4, #8]
 800f906:	e7d0      	b.n	800f8aa <setvbuf+0xc2>
 800f908:	4648      	mov	r0, r9
 800f90a:	f002 fa09 	bl	8011d20 <malloc>
 800f90e:	4607      	mov	r7, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d0bc      	beq.n	800f88e <setvbuf+0xa6>
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f91a:	81a3      	strh	r3, [r4, #12]
 800f91c:	464d      	mov	r5, r9
 800f91e:	e7d3      	b.n	800f8c8 <setvbuf+0xe0>
 800f920:	2000      	movs	r0, #0
 800f922:	e7b6      	b.n	800f892 <setvbuf+0xaa>
 800f924:	46a9      	mov	r9, r5
 800f926:	e7f5      	b.n	800f914 <setvbuf+0x12c>
 800f928:	60a0      	str	r0, [r4, #8]
 800f92a:	e7be      	b.n	800f8aa <setvbuf+0xc2>
 800f92c:	f04f 30ff 	mov.w	r0, #4294967295
 800f930:	e7bb      	b.n	800f8aa <setvbuf+0xc2>
 800f932:	bf00      	nop
 800f934:	20000028 	.word	0x20000028
 800f938:	080136c4 	.word	0x080136c4
 800f93c:	080136e4 	.word	0x080136e4
 800f940:	080136a4 	.word	0x080136a4

0800f944 <nanf>:
 800f944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f94c <nanf+0x8>
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	7fc00000 	.word	0x7fc00000

0800f950 <siprintf>:
 800f950:	b40e      	push	{r1, r2, r3}
 800f952:	b500      	push	{lr}
 800f954:	b09c      	sub	sp, #112	; 0x70
 800f956:	ab1d      	add	r3, sp, #116	; 0x74
 800f958:	9002      	str	r0, [sp, #8]
 800f95a:	9006      	str	r0, [sp, #24]
 800f95c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f960:	4809      	ldr	r0, [pc, #36]	; (800f988 <siprintf+0x38>)
 800f962:	9107      	str	r1, [sp, #28]
 800f964:	9104      	str	r1, [sp, #16]
 800f966:	4909      	ldr	r1, [pc, #36]	; (800f98c <siprintf+0x3c>)
 800f968:	f853 2b04 	ldr.w	r2, [r3], #4
 800f96c:	9105      	str	r1, [sp, #20]
 800f96e:	6800      	ldr	r0, [r0, #0]
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	a902      	add	r1, sp, #8
 800f974:	f002 fe58 	bl	8012628 <_svfiprintf_r>
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	2200      	movs	r2, #0
 800f97c:	701a      	strb	r2, [r3, #0]
 800f97e:	b01c      	add	sp, #112	; 0x70
 800f980:	f85d eb04 	ldr.w	lr, [sp], #4
 800f984:	b003      	add	sp, #12
 800f986:	4770      	bx	lr
 800f988:	20000028 	.word	0x20000028
 800f98c:	ffff0208 	.word	0xffff0208

0800f990 <__sread>:
 800f990:	b510      	push	{r4, lr}
 800f992:	460c      	mov	r4, r1
 800f994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f998:	f003 f87e 	bl	8012a98 <_read_r>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	bfab      	itete	ge
 800f9a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f9a4:	181b      	addge	r3, r3, r0
 800f9a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9aa:	bfac      	ite	ge
 800f9ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9ae:	81a3      	strhlt	r3, [r4, #12]
 800f9b0:	bd10      	pop	{r4, pc}

0800f9b2 <__swrite>:
 800f9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b6:	461f      	mov	r7, r3
 800f9b8:	898b      	ldrh	r3, [r1, #12]
 800f9ba:	05db      	lsls	r3, r3, #23
 800f9bc:	4605      	mov	r5, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	4616      	mov	r6, r2
 800f9c2:	d505      	bpl.n	800f9d0 <__swrite+0x1e>
 800f9c4:	2302      	movs	r3, #2
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9cc:	f002 f932 	bl	8011c34 <_lseek_r>
 800f9d0:	89a3      	ldrh	r3, [r4, #12]
 800f9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9da:	81a3      	strh	r3, [r4, #12]
 800f9dc:	4632      	mov	r2, r6
 800f9de:	463b      	mov	r3, r7
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e6:	f000 bf17 	b.w	8010818 <_write_r>

0800f9ea <__sseek>:
 800f9ea:	b510      	push	{r4, lr}
 800f9ec:	460c      	mov	r4, r1
 800f9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f2:	f002 f91f 	bl	8011c34 <_lseek_r>
 800f9f6:	1c43      	adds	r3, r0, #1
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	bf15      	itete	ne
 800f9fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa06:	81a3      	strheq	r3, [r4, #12]
 800fa08:	bf18      	it	ne
 800fa0a:	81a3      	strhne	r3, [r4, #12]
 800fa0c:	bd10      	pop	{r4, pc}

0800fa0e <__sclose>:
 800fa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa12:	f000 bf81 	b.w	8010918 <_close_r>

0800fa16 <sulp>:
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	4604      	mov	r4, r0
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	ec45 4b10 	vmov	d0, r4, r5
 800fa20:	4616      	mov	r6, r2
 800fa22:	f002 fc65 	bl	80122f0 <__ulp>
 800fa26:	ec51 0b10 	vmov	r0, r1, d0
 800fa2a:	b17e      	cbz	r6, 800fa4c <sulp+0x36>
 800fa2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fa30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dd09      	ble.n	800fa4c <sulp+0x36>
 800fa38:	051b      	lsls	r3, r3, #20
 800fa3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa3e:	2400      	movs	r4, #0
 800fa40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa44:	4622      	mov	r2, r4
 800fa46:	462b      	mov	r3, r5
 800fa48:	f7f0 fdfe 	bl	8000648 <__aeabi_dmul>
 800fa4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa50 <_strtod_l>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	461f      	mov	r7, r3
 800fa56:	b0a1      	sub	sp, #132	; 0x84
 800fa58:	2300      	movs	r3, #0
 800fa5a:	4681      	mov	r9, r0
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	460e      	mov	r6, r1
 800fa60:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa62:	931c      	str	r3, [sp, #112]	; 0x70
 800fa64:	f002 f8d5 	bl	8011c12 <__localeconv_l>
 800fa68:	4680      	mov	r8, r0
 800fa6a:	6800      	ldr	r0, [r0, #0]
 800fa6c:	f7f0 fbd8 	bl	8000220 <strlen>
 800fa70:	f04f 0a00 	mov.w	sl, #0
 800fa74:	4604      	mov	r4, r0
 800fa76:	f04f 0b00 	mov.w	fp, #0
 800fa7a:	961b      	str	r6, [sp, #108]	; 0x6c
 800fa7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa7e:	781a      	ldrb	r2, [r3, #0]
 800fa80:	2a0d      	cmp	r2, #13
 800fa82:	d832      	bhi.n	800faea <_strtod_l+0x9a>
 800fa84:	2a09      	cmp	r2, #9
 800fa86:	d236      	bcs.n	800faf6 <_strtod_l+0xa6>
 800fa88:	2a00      	cmp	r2, #0
 800fa8a:	d03e      	beq.n	800fb0a <_strtod_l+0xba>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	930d      	str	r3, [sp, #52]	; 0x34
 800fa90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800fa92:	782b      	ldrb	r3, [r5, #0]
 800fa94:	2b30      	cmp	r3, #48	; 0x30
 800fa96:	f040 80ac 	bne.w	800fbf2 <_strtod_l+0x1a2>
 800fa9a:	786b      	ldrb	r3, [r5, #1]
 800fa9c:	2b58      	cmp	r3, #88	; 0x58
 800fa9e:	d001      	beq.n	800faa4 <_strtod_l+0x54>
 800faa0:	2b78      	cmp	r3, #120	; 0x78
 800faa2:	d167      	bne.n	800fb74 <_strtod_l+0x124>
 800faa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	ab1c      	add	r3, sp, #112	; 0x70
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	9702      	str	r7, [sp, #8]
 800faae:	ab1d      	add	r3, sp, #116	; 0x74
 800fab0:	4a88      	ldr	r2, [pc, #544]	; (800fcd4 <_strtod_l+0x284>)
 800fab2:	a91b      	add	r1, sp, #108	; 0x6c
 800fab4:	4648      	mov	r0, r9
 800fab6:	f001 fdd2 	bl	801165e <__gethex>
 800faba:	f010 0407 	ands.w	r4, r0, #7
 800fabe:	4606      	mov	r6, r0
 800fac0:	d005      	beq.n	800face <_strtod_l+0x7e>
 800fac2:	2c06      	cmp	r4, #6
 800fac4:	d12b      	bne.n	800fb1e <_strtod_l+0xce>
 800fac6:	3501      	adds	r5, #1
 800fac8:	2300      	movs	r3, #0
 800faca:	951b      	str	r5, [sp, #108]	; 0x6c
 800facc:	930d      	str	r3, [sp, #52]	; 0x34
 800face:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f040 859a 	bne.w	801060a <_strtod_l+0xbba>
 800fad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fad8:	b1e3      	cbz	r3, 800fb14 <_strtod_l+0xc4>
 800fada:	4652      	mov	r2, sl
 800fadc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fae0:	ec43 2b10 	vmov	d0, r2, r3
 800fae4:	b021      	add	sp, #132	; 0x84
 800fae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faea:	2a2b      	cmp	r2, #43	; 0x2b
 800faec:	d015      	beq.n	800fb1a <_strtod_l+0xca>
 800faee:	2a2d      	cmp	r2, #45	; 0x2d
 800faf0:	d004      	beq.n	800fafc <_strtod_l+0xac>
 800faf2:	2a20      	cmp	r2, #32
 800faf4:	d1ca      	bne.n	800fa8c <_strtod_l+0x3c>
 800faf6:	3301      	adds	r3, #1
 800faf8:	931b      	str	r3, [sp, #108]	; 0x6c
 800fafa:	e7bf      	b.n	800fa7c <_strtod_l+0x2c>
 800fafc:	2201      	movs	r2, #1
 800fafe:	920d      	str	r2, [sp, #52]	; 0x34
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb04:	785b      	ldrb	r3, [r3, #1]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1c2      	bne.n	800fa90 <_strtod_l+0x40>
 800fb0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb0c:	961b      	str	r6, [sp, #108]	; 0x6c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f040 8579 	bne.w	8010606 <_strtod_l+0xbb6>
 800fb14:	4652      	mov	r2, sl
 800fb16:	465b      	mov	r3, fp
 800fb18:	e7e2      	b.n	800fae0 <_strtod_l+0x90>
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	e7ef      	b.n	800fafe <_strtod_l+0xae>
 800fb1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fb20:	b13a      	cbz	r2, 800fb32 <_strtod_l+0xe2>
 800fb22:	2135      	movs	r1, #53	; 0x35
 800fb24:	a81e      	add	r0, sp, #120	; 0x78
 800fb26:	f002 fcdb 	bl	80124e0 <__copybits>
 800fb2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fb2c:	4648      	mov	r0, r9
 800fb2e:	f002 f947 	bl	8011dc0 <_Bfree>
 800fb32:	3c01      	subs	r4, #1
 800fb34:	2c04      	cmp	r4, #4
 800fb36:	d806      	bhi.n	800fb46 <_strtod_l+0xf6>
 800fb38:	e8df f004 	tbb	[pc, r4]
 800fb3c:	1714030a 	.word	0x1714030a
 800fb40:	0a          	.byte	0x0a
 800fb41:	00          	.byte	0x00
 800fb42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800fb46:	0730      	lsls	r0, r6, #28
 800fb48:	d5c1      	bpl.n	800face <_strtod_l+0x7e>
 800fb4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb4e:	e7be      	b.n	800face <_strtod_l+0x7e>
 800fb50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800fb54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fb56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb62:	e7f0      	b.n	800fb46 <_strtod_l+0xf6>
 800fb64:	f8df b170 	ldr.w	fp, [pc, #368]	; 800fcd8 <_strtod_l+0x288>
 800fb68:	e7ed      	b.n	800fb46 <_strtod_l+0xf6>
 800fb6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fb6e:	f04f 3aff 	mov.w	sl, #4294967295
 800fb72:	e7e8      	b.n	800fb46 <_strtod_l+0xf6>
 800fb74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb76:	1c5a      	adds	r2, r3, #1
 800fb78:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb7a:	785b      	ldrb	r3, [r3, #1]
 800fb7c:	2b30      	cmp	r3, #48	; 0x30
 800fb7e:	d0f9      	beq.n	800fb74 <_strtod_l+0x124>
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d0a4      	beq.n	800face <_strtod_l+0x7e>
 800fb84:	2301      	movs	r3, #1
 800fb86:	2500      	movs	r5, #0
 800fb88:	9306      	str	r3, [sp, #24]
 800fb8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb8c:	9308      	str	r3, [sp, #32]
 800fb8e:	9507      	str	r5, [sp, #28]
 800fb90:	9505      	str	r5, [sp, #20]
 800fb92:	220a      	movs	r2, #10
 800fb94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fb96:	7807      	ldrb	r7, [r0, #0]
 800fb98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800fb9c:	b2d9      	uxtb	r1, r3
 800fb9e:	2909      	cmp	r1, #9
 800fba0:	d929      	bls.n	800fbf6 <_strtod_l+0x1a6>
 800fba2:	4622      	mov	r2, r4
 800fba4:	f8d8 1000 	ldr.w	r1, [r8]
 800fba8:	f002 ff88 	bl	8012abc <strncmp>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d031      	beq.n	800fc14 <_strtod_l+0x1c4>
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	9c05      	ldr	r4, [sp, #20]
 800fbb4:	9004      	str	r0, [sp, #16]
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	4602      	mov	r2, r0
 800fbba:	2b65      	cmp	r3, #101	; 0x65
 800fbbc:	d001      	beq.n	800fbc2 <_strtod_l+0x172>
 800fbbe:	2b45      	cmp	r3, #69	; 0x45
 800fbc0:	d114      	bne.n	800fbec <_strtod_l+0x19c>
 800fbc2:	b924      	cbnz	r4, 800fbce <_strtod_l+0x17e>
 800fbc4:	b910      	cbnz	r0, 800fbcc <_strtod_l+0x17c>
 800fbc6:	9b06      	ldr	r3, [sp, #24]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d09e      	beq.n	800fb0a <_strtod_l+0xba>
 800fbcc:	2400      	movs	r4, #0
 800fbce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fbd0:	1c73      	adds	r3, r6, #1
 800fbd2:	931b      	str	r3, [sp, #108]	; 0x6c
 800fbd4:	7873      	ldrb	r3, [r6, #1]
 800fbd6:	2b2b      	cmp	r3, #43	; 0x2b
 800fbd8:	d078      	beq.n	800fccc <_strtod_l+0x27c>
 800fbda:	2b2d      	cmp	r3, #45	; 0x2d
 800fbdc:	d070      	beq.n	800fcc0 <_strtod_l+0x270>
 800fbde:	f04f 0c00 	mov.w	ip, #0
 800fbe2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800fbe6:	2f09      	cmp	r7, #9
 800fbe8:	d97c      	bls.n	800fce4 <_strtod_l+0x294>
 800fbea:	961b      	str	r6, [sp, #108]	; 0x6c
 800fbec:	f04f 0e00 	mov.w	lr, #0
 800fbf0:	e09a      	b.n	800fd28 <_strtod_l+0x2d8>
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	e7c7      	b.n	800fb86 <_strtod_l+0x136>
 800fbf6:	9905      	ldr	r1, [sp, #20]
 800fbf8:	2908      	cmp	r1, #8
 800fbfa:	bfdd      	ittte	le
 800fbfc:	9907      	ldrle	r1, [sp, #28]
 800fbfe:	fb02 3301 	mlale	r3, r2, r1, r3
 800fc02:	9307      	strle	r3, [sp, #28]
 800fc04:	fb02 3505 	mlagt	r5, r2, r5, r3
 800fc08:	9b05      	ldr	r3, [sp, #20]
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	9305      	str	r3, [sp, #20]
 800fc10:	901b      	str	r0, [sp, #108]	; 0x6c
 800fc12:	e7bf      	b.n	800fb94 <_strtod_l+0x144>
 800fc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc16:	191a      	adds	r2, r3, r4
 800fc18:	921b      	str	r2, [sp, #108]	; 0x6c
 800fc1a:	9a05      	ldr	r2, [sp, #20]
 800fc1c:	5d1b      	ldrb	r3, [r3, r4]
 800fc1e:	2a00      	cmp	r2, #0
 800fc20:	d037      	beq.n	800fc92 <_strtod_l+0x242>
 800fc22:	9c05      	ldr	r4, [sp, #20]
 800fc24:	4602      	mov	r2, r0
 800fc26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fc2a:	2909      	cmp	r1, #9
 800fc2c:	d913      	bls.n	800fc56 <_strtod_l+0x206>
 800fc2e:	2101      	movs	r1, #1
 800fc30:	9104      	str	r1, [sp, #16]
 800fc32:	e7c2      	b.n	800fbba <_strtod_l+0x16a>
 800fc34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc36:	1c5a      	adds	r2, r3, #1
 800fc38:	921b      	str	r2, [sp, #108]	; 0x6c
 800fc3a:	785b      	ldrb	r3, [r3, #1]
 800fc3c:	3001      	adds	r0, #1
 800fc3e:	2b30      	cmp	r3, #48	; 0x30
 800fc40:	d0f8      	beq.n	800fc34 <_strtod_l+0x1e4>
 800fc42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fc46:	2a08      	cmp	r2, #8
 800fc48:	f200 84e4 	bhi.w	8010614 <_strtod_l+0xbc4>
 800fc4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fc4e:	9208      	str	r2, [sp, #32]
 800fc50:	4602      	mov	r2, r0
 800fc52:	2000      	movs	r0, #0
 800fc54:	4604      	mov	r4, r0
 800fc56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800fc5a:	f100 0101 	add.w	r1, r0, #1
 800fc5e:	d012      	beq.n	800fc86 <_strtod_l+0x236>
 800fc60:	440a      	add	r2, r1
 800fc62:	eb00 0c04 	add.w	ip, r0, r4
 800fc66:	4621      	mov	r1, r4
 800fc68:	270a      	movs	r7, #10
 800fc6a:	458c      	cmp	ip, r1
 800fc6c:	d113      	bne.n	800fc96 <_strtod_l+0x246>
 800fc6e:	1821      	adds	r1, r4, r0
 800fc70:	2908      	cmp	r1, #8
 800fc72:	f104 0401 	add.w	r4, r4, #1
 800fc76:	4404      	add	r4, r0
 800fc78:	dc19      	bgt.n	800fcae <_strtod_l+0x25e>
 800fc7a:	9b07      	ldr	r3, [sp, #28]
 800fc7c:	210a      	movs	r1, #10
 800fc7e:	fb01 e303 	mla	r3, r1, r3, lr
 800fc82:	9307      	str	r3, [sp, #28]
 800fc84:	2100      	movs	r1, #0
 800fc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc88:	1c58      	adds	r0, r3, #1
 800fc8a:	901b      	str	r0, [sp, #108]	; 0x6c
 800fc8c:	785b      	ldrb	r3, [r3, #1]
 800fc8e:	4608      	mov	r0, r1
 800fc90:	e7c9      	b.n	800fc26 <_strtod_l+0x1d6>
 800fc92:	9805      	ldr	r0, [sp, #20]
 800fc94:	e7d3      	b.n	800fc3e <_strtod_l+0x1ee>
 800fc96:	2908      	cmp	r1, #8
 800fc98:	f101 0101 	add.w	r1, r1, #1
 800fc9c:	dc03      	bgt.n	800fca6 <_strtod_l+0x256>
 800fc9e:	9b07      	ldr	r3, [sp, #28]
 800fca0:	437b      	muls	r3, r7
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	e7e1      	b.n	800fc6a <_strtod_l+0x21a>
 800fca6:	2910      	cmp	r1, #16
 800fca8:	bfd8      	it	le
 800fcaa:	437d      	mulle	r5, r7
 800fcac:	e7dd      	b.n	800fc6a <_strtod_l+0x21a>
 800fcae:	2c10      	cmp	r4, #16
 800fcb0:	bfdc      	itt	le
 800fcb2:	210a      	movle	r1, #10
 800fcb4:	fb01 e505 	mlale	r5, r1, r5, lr
 800fcb8:	e7e4      	b.n	800fc84 <_strtod_l+0x234>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	9304      	str	r3, [sp, #16]
 800fcbe:	e781      	b.n	800fbc4 <_strtod_l+0x174>
 800fcc0:	f04f 0c01 	mov.w	ip, #1
 800fcc4:	1cb3      	adds	r3, r6, #2
 800fcc6:	931b      	str	r3, [sp, #108]	; 0x6c
 800fcc8:	78b3      	ldrb	r3, [r6, #2]
 800fcca:	e78a      	b.n	800fbe2 <_strtod_l+0x192>
 800fccc:	f04f 0c00 	mov.w	ip, #0
 800fcd0:	e7f8      	b.n	800fcc4 <_strtod_l+0x274>
 800fcd2:	bf00      	nop
 800fcd4:	08013744 	.word	0x08013744
 800fcd8:	7ff00000 	.word	0x7ff00000
 800fcdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcde:	1c5f      	adds	r7, r3, #1
 800fce0:	971b      	str	r7, [sp, #108]	; 0x6c
 800fce2:	785b      	ldrb	r3, [r3, #1]
 800fce4:	2b30      	cmp	r3, #48	; 0x30
 800fce6:	d0f9      	beq.n	800fcdc <_strtod_l+0x28c>
 800fce8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800fcec:	2f08      	cmp	r7, #8
 800fcee:	f63f af7d 	bhi.w	800fbec <_strtod_l+0x19c>
 800fcf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fcf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcf8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcfc:	1c5f      	adds	r7, r3, #1
 800fcfe:	971b      	str	r7, [sp, #108]	; 0x6c
 800fd00:	785b      	ldrb	r3, [r3, #1]
 800fd02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800fd06:	f1b8 0f09 	cmp.w	r8, #9
 800fd0a:	d937      	bls.n	800fd7c <_strtod_l+0x32c>
 800fd0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd0e:	1a7f      	subs	r7, r7, r1
 800fd10:	2f08      	cmp	r7, #8
 800fd12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fd16:	dc37      	bgt.n	800fd88 <_strtod_l+0x338>
 800fd18:	45be      	cmp	lr, r7
 800fd1a:	bfa8      	it	ge
 800fd1c:	46be      	movge	lr, r7
 800fd1e:	f1bc 0f00 	cmp.w	ip, #0
 800fd22:	d001      	beq.n	800fd28 <_strtod_l+0x2d8>
 800fd24:	f1ce 0e00 	rsb	lr, lr, #0
 800fd28:	2c00      	cmp	r4, #0
 800fd2a:	d151      	bne.n	800fdd0 <_strtod_l+0x380>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f47f aece 	bne.w	800face <_strtod_l+0x7e>
 800fd32:	9a06      	ldr	r2, [sp, #24]
 800fd34:	2a00      	cmp	r2, #0
 800fd36:	f47f aeca 	bne.w	800face <_strtod_l+0x7e>
 800fd3a:	9a04      	ldr	r2, [sp, #16]
 800fd3c:	2a00      	cmp	r2, #0
 800fd3e:	f47f aee4 	bne.w	800fb0a <_strtod_l+0xba>
 800fd42:	2b4e      	cmp	r3, #78	; 0x4e
 800fd44:	d027      	beq.n	800fd96 <_strtod_l+0x346>
 800fd46:	dc21      	bgt.n	800fd8c <_strtod_l+0x33c>
 800fd48:	2b49      	cmp	r3, #73	; 0x49
 800fd4a:	f47f aede 	bne.w	800fb0a <_strtod_l+0xba>
 800fd4e:	49a0      	ldr	r1, [pc, #640]	; (800ffd0 <_strtod_l+0x580>)
 800fd50:	a81b      	add	r0, sp, #108	; 0x6c
 800fd52:	f001 feb7 	bl	8011ac4 <__match>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f43f aed7 	beq.w	800fb0a <_strtod_l+0xba>
 800fd5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd5e:	499d      	ldr	r1, [pc, #628]	; (800ffd4 <_strtod_l+0x584>)
 800fd60:	3b01      	subs	r3, #1
 800fd62:	a81b      	add	r0, sp, #108	; 0x6c
 800fd64:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd66:	f001 fead 	bl	8011ac4 <__match>
 800fd6a:	b910      	cbnz	r0, 800fd72 <_strtod_l+0x322>
 800fd6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd6e:	3301      	adds	r3, #1
 800fd70:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd72:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ffe8 <_strtod_l+0x598>
 800fd76:	f04f 0a00 	mov.w	sl, #0
 800fd7a:	e6a8      	b.n	800face <_strtod_l+0x7e>
 800fd7c:	210a      	movs	r1, #10
 800fd7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd86:	e7b8      	b.n	800fcfa <_strtod_l+0x2aa>
 800fd88:	46be      	mov	lr, r7
 800fd8a:	e7c8      	b.n	800fd1e <_strtod_l+0x2ce>
 800fd8c:	2b69      	cmp	r3, #105	; 0x69
 800fd8e:	d0de      	beq.n	800fd4e <_strtod_l+0x2fe>
 800fd90:	2b6e      	cmp	r3, #110	; 0x6e
 800fd92:	f47f aeba 	bne.w	800fb0a <_strtod_l+0xba>
 800fd96:	4990      	ldr	r1, [pc, #576]	; (800ffd8 <_strtod_l+0x588>)
 800fd98:	a81b      	add	r0, sp, #108	; 0x6c
 800fd9a:	f001 fe93 	bl	8011ac4 <__match>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	f43f aeb3 	beq.w	800fb0a <_strtod_l+0xba>
 800fda4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b28      	cmp	r3, #40	; 0x28
 800fdaa:	d10e      	bne.n	800fdca <_strtod_l+0x37a>
 800fdac:	aa1e      	add	r2, sp, #120	; 0x78
 800fdae:	498b      	ldr	r1, [pc, #556]	; (800ffdc <_strtod_l+0x58c>)
 800fdb0:	a81b      	add	r0, sp, #108	; 0x6c
 800fdb2:	f001 fe9b 	bl	8011aec <__hexnan>
 800fdb6:	2805      	cmp	r0, #5
 800fdb8:	d107      	bne.n	800fdca <_strtod_l+0x37a>
 800fdba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fdbc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fdc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fdc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fdc8:	e681      	b.n	800face <_strtod_l+0x7e>
 800fdca:	f8df b224 	ldr.w	fp, [pc, #548]	; 800fff0 <_strtod_l+0x5a0>
 800fdce:	e7d2      	b.n	800fd76 <_strtod_l+0x326>
 800fdd0:	ebae 0302 	sub.w	r3, lr, r2
 800fdd4:	9306      	str	r3, [sp, #24]
 800fdd6:	9b05      	ldr	r3, [sp, #20]
 800fdd8:	9807      	ldr	r0, [sp, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	bf08      	it	eq
 800fdde:	4623      	moveq	r3, r4
 800fde0:	2c10      	cmp	r4, #16
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	46a0      	mov	r8, r4
 800fde6:	bfa8      	it	ge
 800fde8:	f04f 0810 	movge.w	r8, #16
 800fdec:	f7f0 fbb2 	bl	8000554 <__aeabi_ui2d>
 800fdf0:	2c09      	cmp	r4, #9
 800fdf2:	4682      	mov	sl, r0
 800fdf4:	468b      	mov	fp, r1
 800fdf6:	dc13      	bgt.n	800fe20 <_strtod_l+0x3d0>
 800fdf8:	9b06      	ldr	r3, [sp, #24]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f43f ae67 	beq.w	800face <_strtod_l+0x7e>
 800fe00:	9b06      	ldr	r3, [sp, #24]
 800fe02:	dd7a      	ble.n	800fefa <_strtod_l+0x4aa>
 800fe04:	2b16      	cmp	r3, #22
 800fe06:	dc61      	bgt.n	800fecc <_strtod_l+0x47c>
 800fe08:	4a75      	ldr	r2, [pc, #468]	; (800ffe0 <_strtod_l+0x590>)
 800fe0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fe0e:	e9de 0100 	ldrd	r0, r1, [lr]
 800fe12:	4652      	mov	r2, sl
 800fe14:	465b      	mov	r3, fp
 800fe16:	f7f0 fc17 	bl	8000648 <__aeabi_dmul>
 800fe1a:	4682      	mov	sl, r0
 800fe1c:	468b      	mov	fp, r1
 800fe1e:	e656      	b.n	800face <_strtod_l+0x7e>
 800fe20:	4b6f      	ldr	r3, [pc, #444]	; (800ffe0 <_strtod_l+0x590>)
 800fe22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fe26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fe2a:	f7f0 fc0d 	bl	8000648 <__aeabi_dmul>
 800fe2e:	4606      	mov	r6, r0
 800fe30:	4628      	mov	r0, r5
 800fe32:	460f      	mov	r7, r1
 800fe34:	f7f0 fb8e 	bl	8000554 <__aeabi_ui2d>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	460b      	mov	r3, r1
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	4639      	mov	r1, r7
 800fe40:	f7f0 fa4c 	bl	80002dc <__adddf3>
 800fe44:	2c0f      	cmp	r4, #15
 800fe46:	4682      	mov	sl, r0
 800fe48:	468b      	mov	fp, r1
 800fe4a:	ddd5      	ble.n	800fdf8 <_strtod_l+0x3a8>
 800fe4c:	9b06      	ldr	r3, [sp, #24]
 800fe4e:	eba4 0808 	sub.w	r8, r4, r8
 800fe52:	4498      	add	r8, r3
 800fe54:	f1b8 0f00 	cmp.w	r8, #0
 800fe58:	f340 8096 	ble.w	800ff88 <_strtod_l+0x538>
 800fe5c:	f018 030f 	ands.w	r3, r8, #15
 800fe60:	d00a      	beq.n	800fe78 <_strtod_l+0x428>
 800fe62:	495f      	ldr	r1, [pc, #380]	; (800ffe0 <_strtod_l+0x590>)
 800fe64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe68:	4652      	mov	r2, sl
 800fe6a:	465b      	mov	r3, fp
 800fe6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe70:	f7f0 fbea 	bl	8000648 <__aeabi_dmul>
 800fe74:	4682      	mov	sl, r0
 800fe76:	468b      	mov	fp, r1
 800fe78:	f038 080f 	bics.w	r8, r8, #15
 800fe7c:	d073      	beq.n	800ff66 <_strtod_l+0x516>
 800fe7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe82:	dd47      	ble.n	800ff14 <_strtod_l+0x4c4>
 800fe84:	2400      	movs	r4, #0
 800fe86:	46a0      	mov	r8, r4
 800fe88:	9407      	str	r4, [sp, #28]
 800fe8a:	9405      	str	r4, [sp, #20]
 800fe8c:	2322      	movs	r3, #34	; 0x22
 800fe8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ffe8 <_strtod_l+0x598>
 800fe92:	f8c9 3000 	str.w	r3, [r9]
 800fe96:	f04f 0a00 	mov.w	sl, #0
 800fe9a:	9b07      	ldr	r3, [sp, #28]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f43f ae16 	beq.w	800face <_strtod_l+0x7e>
 800fea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fea4:	4648      	mov	r0, r9
 800fea6:	f001 ff8b 	bl	8011dc0 <_Bfree>
 800feaa:	9905      	ldr	r1, [sp, #20]
 800feac:	4648      	mov	r0, r9
 800feae:	f001 ff87 	bl	8011dc0 <_Bfree>
 800feb2:	4641      	mov	r1, r8
 800feb4:	4648      	mov	r0, r9
 800feb6:	f001 ff83 	bl	8011dc0 <_Bfree>
 800feba:	9907      	ldr	r1, [sp, #28]
 800febc:	4648      	mov	r0, r9
 800febe:	f001 ff7f 	bl	8011dc0 <_Bfree>
 800fec2:	4621      	mov	r1, r4
 800fec4:	4648      	mov	r0, r9
 800fec6:	f001 ff7b 	bl	8011dc0 <_Bfree>
 800feca:	e600      	b.n	800face <_strtod_l+0x7e>
 800fecc:	9a06      	ldr	r2, [sp, #24]
 800fece:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fed2:	4293      	cmp	r3, r2
 800fed4:	dbba      	blt.n	800fe4c <_strtod_l+0x3fc>
 800fed6:	4d42      	ldr	r5, [pc, #264]	; (800ffe0 <_strtod_l+0x590>)
 800fed8:	f1c4 040f 	rsb	r4, r4, #15
 800fedc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fee0:	4652      	mov	r2, sl
 800fee2:	465b      	mov	r3, fp
 800fee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee8:	f7f0 fbae 	bl	8000648 <__aeabi_dmul>
 800feec:	9b06      	ldr	r3, [sp, #24]
 800feee:	1b1c      	subs	r4, r3, r4
 800fef0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fef8:	e78d      	b.n	800fe16 <_strtod_l+0x3c6>
 800fefa:	f113 0f16 	cmn.w	r3, #22
 800fefe:	dba5      	blt.n	800fe4c <_strtod_l+0x3fc>
 800ff00:	4a37      	ldr	r2, [pc, #220]	; (800ffe0 <_strtod_l+0x590>)
 800ff02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ff06:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	4659      	mov	r1, fp
 800ff0e:	f7f0 fcc5 	bl	800089c <__aeabi_ddiv>
 800ff12:	e782      	b.n	800fe1a <_strtod_l+0x3ca>
 800ff14:	2300      	movs	r3, #0
 800ff16:	4e33      	ldr	r6, [pc, #204]	; (800ffe4 <_strtod_l+0x594>)
 800ff18:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	4659      	mov	r1, fp
 800ff20:	461d      	mov	r5, r3
 800ff22:	f1b8 0f01 	cmp.w	r8, #1
 800ff26:	dc21      	bgt.n	800ff6c <_strtod_l+0x51c>
 800ff28:	b10b      	cbz	r3, 800ff2e <_strtod_l+0x4de>
 800ff2a:	4682      	mov	sl, r0
 800ff2c:	468b      	mov	fp, r1
 800ff2e:	4b2d      	ldr	r3, [pc, #180]	; (800ffe4 <_strtod_l+0x594>)
 800ff30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ff38:	4652      	mov	r2, sl
 800ff3a:	465b      	mov	r3, fp
 800ff3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ff40:	f7f0 fb82 	bl	8000648 <__aeabi_dmul>
 800ff44:	4b28      	ldr	r3, [pc, #160]	; (800ffe8 <_strtod_l+0x598>)
 800ff46:	460a      	mov	r2, r1
 800ff48:	400b      	ands	r3, r1
 800ff4a:	4928      	ldr	r1, [pc, #160]	; (800ffec <_strtod_l+0x59c>)
 800ff4c:	428b      	cmp	r3, r1
 800ff4e:	4682      	mov	sl, r0
 800ff50:	d898      	bhi.n	800fe84 <_strtod_l+0x434>
 800ff52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff56:	428b      	cmp	r3, r1
 800ff58:	bf86      	itte	hi
 800ff5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fff4 <_strtod_l+0x5a4>
 800ff5e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff66:	2300      	movs	r3, #0
 800ff68:	9304      	str	r3, [sp, #16]
 800ff6a:	e077      	b.n	801005c <_strtod_l+0x60c>
 800ff6c:	f018 0f01 	tst.w	r8, #1
 800ff70:	d006      	beq.n	800ff80 <_strtod_l+0x530>
 800ff72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f7f0 fb65 	bl	8000648 <__aeabi_dmul>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	3501      	adds	r5, #1
 800ff82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff86:	e7cc      	b.n	800ff22 <_strtod_l+0x4d2>
 800ff88:	d0ed      	beq.n	800ff66 <_strtod_l+0x516>
 800ff8a:	f1c8 0800 	rsb	r8, r8, #0
 800ff8e:	f018 020f 	ands.w	r2, r8, #15
 800ff92:	d00a      	beq.n	800ffaa <_strtod_l+0x55a>
 800ff94:	4b12      	ldr	r3, [pc, #72]	; (800ffe0 <_strtod_l+0x590>)
 800ff96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9a:	4650      	mov	r0, sl
 800ff9c:	4659      	mov	r1, fp
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 fc7b 	bl	800089c <__aeabi_ddiv>
 800ffa6:	4682      	mov	sl, r0
 800ffa8:	468b      	mov	fp, r1
 800ffaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ffae:	d0da      	beq.n	800ff66 <_strtod_l+0x516>
 800ffb0:	f1b8 0f1f 	cmp.w	r8, #31
 800ffb4:	dd20      	ble.n	800fff8 <_strtod_l+0x5a8>
 800ffb6:	2400      	movs	r4, #0
 800ffb8:	46a0      	mov	r8, r4
 800ffba:	9407      	str	r4, [sp, #28]
 800ffbc:	9405      	str	r4, [sp, #20]
 800ffbe:	2322      	movs	r3, #34	; 0x22
 800ffc0:	f04f 0a00 	mov.w	sl, #0
 800ffc4:	f04f 0b00 	mov.w	fp, #0
 800ffc8:	f8c9 3000 	str.w	r3, [r9]
 800ffcc:	e765      	b.n	800fe9a <_strtod_l+0x44a>
 800ffce:	bf00      	nop
 800ffd0:	0801370d 	.word	0x0801370d
 800ffd4:	0801379b 	.word	0x0801379b
 800ffd8:	08013715 	.word	0x08013715
 800ffdc:	08013758 	.word	0x08013758
 800ffe0:	080137d8 	.word	0x080137d8
 800ffe4:	080137b0 	.word	0x080137b0
 800ffe8:	7ff00000 	.word	0x7ff00000
 800ffec:	7ca00000 	.word	0x7ca00000
 800fff0:	fff80000 	.word	0xfff80000
 800fff4:	7fefffff 	.word	0x7fefffff
 800fff8:	f018 0310 	ands.w	r3, r8, #16
 800fffc:	bf18      	it	ne
 800fffe:	236a      	movne	r3, #106	; 0x6a
 8010000:	4da0      	ldr	r5, [pc, #640]	; (8010284 <_strtod_l+0x834>)
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	4650      	mov	r0, sl
 8010006:	4659      	mov	r1, fp
 8010008:	2300      	movs	r3, #0
 801000a:	f1b8 0f00 	cmp.w	r8, #0
 801000e:	f300 810a 	bgt.w	8010226 <_strtod_l+0x7d6>
 8010012:	b10b      	cbz	r3, 8010018 <_strtod_l+0x5c8>
 8010014:	4682      	mov	sl, r0
 8010016:	468b      	mov	fp, r1
 8010018:	9b04      	ldr	r3, [sp, #16]
 801001a:	b1bb      	cbz	r3, 801004c <_strtod_l+0x5fc>
 801001c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010024:	2b00      	cmp	r3, #0
 8010026:	4659      	mov	r1, fp
 8010028:	dd10      	ble.n	801004c <_strtod_l+0x5fc>
 801002a:	2b1f      	cmp	r3, #31
 801002c:	f340 8107 	ble.w	801023e <_strtod_l+0x7ee>
 8010030:	2b34      	cmp	r3, #52	; 0x34
 8010032:	bfde      	ittt	le
 8010034:	3b20      	suble	r3, #32
 8010036:	f04f 32ff 	movle.w	r2, #4294967295
 801003a:	fa02 f303 	lslle.w	r3, r2, r3
 801003e:	f04f 0a00 	mov.w	sl, #0
 8010042:	bfcc      	ite	gt
 8010044:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010048:	ea03 0b01 	andle.w	fp, r3, r1
 801004c:	2200      	movs	r2, #0
 801004e:	2300      	movs	r3, #0
 8010050:	4650      	mov	r0, sl
 8010052:	4659      	mov	r1, fp
 8010054:	f7f0 fd60 	bl	8000b18 <__aeabi_dcmpeq>
 8010058:	2800      	cmp	r0, #0
 801005a:	d1ac      	bne.n	800ffb6 <_strtod_l+0x566>
 801005c:	9b07      	ldr	r3, [sp, #28]
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	9a05      	ldr	r2, [sp, #20]
 8010062:	9908      	ldr	r1, [sp, #32]
 8010064:	4623      	mov	r3, r4
 8010066:	4648      	mov	r0, r9
 8010068:	f001 fefc 	bl	8011e64 <__s2b>
 801006c:	9007      	str	r0, [sp, #28]
 801006e:	2800      	cmp	r0, #0
 8010070:	f43f af08 	beq.w	800fe84 <_strtod_l+0x434>
 8010074:	9a06      	ldr	r2, [sp, #24]
 8010076:	9b06      	ldr	r3, [sp, #24]
 8010078:	2a00      	cmp	r2, #0
 801007a:	f1c3 0300 	rsb	r3, r3, #0
 801007e:	bfa8      	it	ge
 8010080:	2300      	movge	r3, #0
 8010082:	930e      	str	r3, [sp, #56]	; 0x38
 8010084:	2400      	movs	r4, #0
 8010086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801008a:	9316      	str	r3, [sp, #88]	; 0x58
 801008c:	46a0      	mov	r8, r4
 801008e:	9b07      	ldr	r3, [sp, #28]
 8010090:	4648      	mov	r0, r9
 8010092:	6859      	ldr	r1, [r3, #4]
 8010094:	f001 fe60 	bl	8011d58 <_Balloc>
 8010098:	9005      	str	r0, [sp, #20]
 801009a:	2800      	cmp	r0, #0
 801009c:	f43f aef6 	beq.w	800fe8c <_strtod_l+0x43c>
 80100a0:	9b07      	ldr	r3, [sp, #28]
 80100a2:	691a      	ldr	r2, [r3, #16]
 80100a4:	3202      	adds	r2, #2
 80100a6:	f103 010c 	add.w	r1, r3, #12
 80100aa:	0092      	lsls	r2, r2, #2
 80100ac:	300c      	adds	r0, #12
 80100ae:	f7fe fc0d 	bl	800e8cc <memcpy>
 80100b2:	aa1e      	add	r2, sp, #120	; 0x78
 80100b4:	a91d      	add	r1, sp, #116	; 0x74
 80100b6:	ec4b ab10 	vmov	d0, sl, fp
 80100ba:	4648      	mov	r0, r9
 80100bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80100c0:	f002 f98c 	bl	80123dc <__d2b>
 80100c4:	901c      	str	r0, [sp, #112]	; 0x70
 80100c6:	2800      	cmp	r0, #0
 80100c8:	f43f aee0 	beq.w	800fe8c <_strtod_l+0x43c>
 80100cc:	2101      	movs	r1, #1
 80100ce:	4648      	mov	r0, r9
 80100d0:	f001 ff54 	bl	8011f7c <__i2b>
 80100d4:	4680      	mov	r8, r0
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f43f aed8 	beq.w	800fe8c <_strtod_l+0x43c>
 80100dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80100de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80100e0:	2e00      	cmp	r6, #0
 80100e2:	bfab      	itete	ge
 80100e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80100e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80100e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80100ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80100ec:	bfac      	ite	ge
 80100ee:	18f7      	addge	r7, r6, r3
 80100f0:	1b9d      	sublt	r5, r3, r6
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	1af6      	subs	r6, r6, r3
 80100f6:	4416      	add	r6, r2
 80100f8:	4b63      	ldr	r3, [pc, #396]	; (8010288 <_strtod_l+0x838>)
 80100fa:	3e01      	subs	r6, #1
 80100fc:	429e      	cmp	r6, r3
 80100fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010102:	f280 80af 	bge.w	8010264 <_strtod_l+0x814>
 8010106:	1b9b      	subs	r3, r3, r6
 8010108:	2b1f      	cmp	r3, #31
 801010a:	eba2 0203 	sub.w	r2, r2, r3
 801010e:	f04f 0101 	mov.w	r1, #1
 8010112:	f300 809b 	bgt.w	801024c <_strtod_l+0x7fc>
 8010116:	fa01 f303 	lsl.w	r3, r1, r3
 801011a:	930f      	str	r3, [sp, #60]	; 0x3c
 801011c:	2300      	movs	r3, #0
 801011e:	930a      	str	r3, [sp, #40]	; 0x28
 8010120:	18be      	adds	r6, r7, r2
 8010122:	9b04      	ldr	r3, [sp, #16]
 8010124:	42b7      	cmp	r7, r6
 8010126:	4415      	add	r5, r2
 8010128:	441d      	add	r5, r3
 801012a:	463b      	mov	r3, r7
 801012c:	bfa8      	it	ge
 801012e:	4633      	movge	r3, r6
 8010130:	42ab      	cmp	r3, r5
 8010132:	bfa8      	it	ge
 8010134:	462b      	movge	r3, r5
 8010136:	2b00      	cmp	r3, #0
 8010138:	bfc2      	ittt	gt
 801013a:	1af6      	subgt	r6, r6, r3
 801013c:	1aed      	subgt	r5, r5, r3
 801013e:	1aff      	subgt	r7, r7, r3
 8010140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010142:	b1bb      	cbz	r3, 8010174 <_strtod_l+0x724>
 8010144:	4641      	mov	r1, r8
 8010146:	461a      	mov	r2, r3
 8010148:	4648      	mov	r0, r9
 801014a:	f001 ffb7 	bl	80120bc <__pow5mult>
 801014e:	4680      	mov	r8, r0
 8010150:	2800      	cmp	r0, #0
 8010152:	f43f ae9b 	beq.w	800fe8c <_strtod_l+0x43c>
 8010156:	4601      	mov	r1, r0
 8010158:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801015a:	4648      	mov	r0, r9
 801015c:	f001 ff17 	bl	8011f8e <__multiply>
 8010160:	900c      	str	r0, [sp, #48]	; 0x30
 8010162:	2800      	cmp	r0, #0
 8010164:	f43f ae92 	beq.w	800fe8c <_strtod_l+0x43c>
 8010168:	991c      	ldr	r1, [sp, #112]	; 0x70
 801016a:	4648      	mov	r0, r9
 801016c:	f001 fe28 	bl	8011dc0 <_Bfree>
 8010170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010172:	931c      	str	r3, [sp, #112]	; 0x70
 8010174:	2e00      	cmp	r6, #0
 8010176:	dc7a      	bgt.n	801026e <_strtod_l+0x81e>
 8010178:	9b06      	ldr	r3, [sp, #24]
 801017a:	2b00      	cmp	r3, #0
 801017c:	dd08      	ble.n	8010190 <_strtod_l+0x740>
 801017e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010180:	9905      	ldr	r1, [sp, #20]
 8010182:	4648      	mov	r0, r9
 8010184:	f001 ff9a 	bl	80120bc <__pow5mult>
 8010188:	9005      	str	r0, [sp, #20]
 801018a:	2800      	cmp	r0, #0
 801018c:	f43f ae7e 	beq.w	800fe8c <_strtod_l+0x43c>
 8010190:	2d00      	cmp	r5, #0
 8010192:	dd08      	ble.n	80101a6 <_strtod_l+0x756>
 8010194:	462a      	mov	r2, r5
 8010196:	9905      	ldr	r1, [sp, #20]
 8010198:	4648      	mov	r0, r9
 801019a:	f001 ffdd 	bl	8012158 <__lshift>
 801019e:	9005      	str	r0, [sp, #20]
 80101a0:	2800      	cmp	r0, #0
 80101a2:	f43f ae73 	beq.w	800fe8c <_strtod_l+0x43c>
 80101a6:	2f00      	cmp	r7, #0
 80101a8:	dd08      	ble.n	80101bc <_strtod_l+0x76c>
 80101aa:	4641      	mov	r1, r8
 80101ac:	463a      	mov	r2, r7
 80101ae:	4648      	mov	r0, r9
 80101b0:	f001 ffd2 	bl	8012158 <__lshift>
 80101b4:	4680      	mov	r8, r0
 80101b6:	2800      	cmp	r0, #0
 80101b8:	f43f ae68 	beq.w	800fe8c <_strtod_l+0x43c>
 80101bc:	9a05      	ldr	r2, [sp, #20]
 80101be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80101c0:	4648      	mov	r0, r9
 80101c2:	f002 f837 	bl	8012234 <__mdiff>
 80101c6:	4604      	mov	r4, r0
 80101c8:	2800      	cmp	r0, #0
 80101ca:	f43f ae5f 	beq.w	800fe8c <_strtod_l+0x43c>
 80101ce:	68c3      	ldr	r3, [r0, #12]
 80101d0:	930c      	str	r3, [sp, #48]	; 0x30
 80101d2:	2300      	movs	r3, #0
 80101d4:	60c3      	str	r3, [r0, #12]
 80101d6:	4641      	mov	r1, r8
 80101d8:	f002 f812 	bl	8012200 <__mcmp>
 80101dc:	2800      	cmp	r0, #0
 80101de:	da55      	bge.n	801028c <_strtod_l+0x83c>
 80101e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101e2:	b9e3      	cbnz	r3, 801021e <_strtod_l+0x7ce>
 80101e4:	f1ba 0f00 	cmp.w	sl, #0
 80101e8:	d119      	bne.n	801021e <_strtod_l+0x7ce>
 80101ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101ee:	b9b3      	cbnz	r3, 801021e <_strtod_l+0x7ce>
 80101f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101f4:	0d1b      	lsrs	r3, r3, #20
 80101f6:	051b      	lsls	r3, r3, #20
 80101f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101fc:	d90f      	bls.n	801021e <_strtod_l+0x7ce>
 80101fe:	6963      	ldr	r3, [r4, #20]
 8010200:	b913      	cbnz	r3, 8010208 <_strtod_l+0x7b8>
 8010202:	6923      	ldr	r3, [r4, #16]
 8010204:	2b01      	cmp	r3, #1
 8010206:	dd0a      	ble.n	801021e <_strtod_l+0x7ce>
 8010208:	4621      	mov	r1, r4
 801020a:	2201      	movs	r2, #1
 801020c:	4648      	mov	r0, r9
 801020e:	f001 ffa3 	bl	8012158 <__lshift>
 8010212:	4641      	mov	r1, r8
 8010214:	4604      	mov	r4, r0
 8010216:	f001 fff3 	bl	8012200 <__mcmp>
 801021a:	2800      	cmp	r0, #0
 801021c:	dc67      	bgt.n	80102ee <_strtod_l+0x89e>
 801021e:	9b04      	ldr	r3, [sp, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d171      	bne.n	8010308 <_strtod_l+0x8b8>
 8010224:	e63d      	b.n	800fea2 <_strtod_l+0x452>
 8010226:	f018 0f01 	tst.w	r8, #1
 801022a:	d004      	beq.n	8010236 <_strtod_l+0x7e6>
 801022c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010230:	f7f0 fa0a 	bl	8000648 <__aeabi_dmul>
 8010234:	2301      	movs	r3, #1
 8010236:	ea4f 0868 	mov.w	r8, r8, asr #1
 801023a:	3508      	adds	r5, #8
 801023c:	e6e5      	b.n	801000a <_strtod_l+0x5ba>
 801023e:	f04f 32ff 	mov.w	r2, #4294967295
 8010242:	fa02 f303 	lsl.w	r3, r2, r3
 8010246:	ea03 0a0a 	and.w	sl, r3, sl
 801024a:	e6ff      	b.n	801004c <_strtod_l+0x5fc>
 801024c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010250:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010254:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010258:	36e2      	adds	r6, #226	; 0xe2
 801025a:	fa01 f306 	lsl.w	r3, r1, r6
 801025e:	930a      	str	r3, [sp, #40]	; 0x28
 8010260:	910f      	str	r1, [sp, #60]	; 0x3c
 8010262:	e75d      	b.n	8010120 <_strtod_l+0x6d0>
 8010264:	2300      	movs	r3, #0
 8010266:	930a      	str	r3, [sp, #40]	; 0x28
 8010268:	2301      	movs	r3, #1
 801026a:	930f      	str	r3, [sp, #60]	; 0x3c
 801026c:	e758      	b.n	8010120 <_strtod_l+0x6d0>
 801026e:	4632      	mov	r2, r6
 8010270:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010272:	4648      	mov	r0, r9
 8010274:	f001 ff70 	bl	8012158 <__lshift>
 8010278:	901c      	str	r0, [sp, #112]	; 0x70
 801027a:	2800      	cmp	r0, #0
 801027c:	f47f af7c 	bne.w	8010178 <_strtod_l+0x728>
 8010280:	e604      	b.n	800fe8c <_strtod_l+0x43c>
 8010282:	bf00      	nop
 8010284:	08013770 	.word	0x08013770
 8010288:	fffffc02 	.word	0xfffffc02
 801028c:	465d      	mov	r5, fp
 801028e:	f040 8086 	bne.w	801039e <_strtod_l+0x94e>
 8010292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010298:	b32a      	cbz	r2, 80102e6 <_strtod_l+0x896>
 801029a:	4aaf      	ldr	r2, [pc, #700]	; (8010558 <_strtod_l+0xb08>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d153      	bne.n	8010348 <_strtod_l+0x8f8>
 80102a0:	9b04      	ldr	r3, [sp, #16]
 80102a2:	4650      	mov	r0, sl
 80102a4:	b1d3      	cbz	r3, 80102dc <_strtod_l+0x88c>
 80102a6:	4aad      	ldr	r2, [pc, #692]	; (801055c <_strtod_l+0xb0c>)
 80102a8:	402a      	ands	r2, r5
 80102aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80102ae:	f04f 31ff 	mov.w	r1, #4294967295
 80102b2:	d816      	bhi.n	80102e2 <_strtod_l+0x892>
 80102b4:	0d12      	lsrs	r2, r2, #20
 80102b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102ba:	fa01 f303 	lsl.w	r3, r1, r3
 80102be:	4298      	cmp	r0, r3
 80102c0:	d142      	bne.n	8010348 <_strtod_l+0x8f8>
 80102c2:	4ba7      	ldr	r3, [pc, #668]	; (8010560 <_strtod_l+0xb10>)
 80102c4:	429d      	cmp	r5, r3
 80102c6:	d102      	bne.n	80102ce <_strtod_l+0x87e>
 80102c8:	3001      	adds	r0, #1
 80102ca:	f43f addf 	beq.w	800fe8c <_strtod_l+0x43c>
 80102ce:	4ba3      	ldr	r3, [pc, #652]	; (801055c <_strtod_l+0xb0c>)
 80102d0:	402b      	ands	r3, r5
 80102d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80102d6:	f04f 0a00 	mov.w	sl, #0
 80102da:	e7a0      	b.n	801021e <_strtod_l+0x7ce>
 80102dc:	f04f 33ff 	mov.w	r3, #4294967295
 80102e0:	e7ed      	b.n	80102be <_strtod_l+0x86e>
 80102e2:	460b      	mov	r3, r1
 80102e4:	e7eb      	b.n	80102be <_strtod_l+0x86e>
 80102e6:	bb7b      	cbnz	r3, 8010348 <_strtod_l+0x8f8>
 80102e8:	f1ba 0f00 	cmp.w	sl, #0
 80102ec:	d12c      	bne.n	8010348 <_strtod_l+0x8f8>
 80102ee:	9904      	ldr	r1, [sp, #16]
 80102f0:	4a9a      	ldr	r2, [pc, #616]	; (801055c <_strtod_l+0xb0c>)
 80102f2:	465b      	mov	r3, fp
 80102f4:	b1f1      	cbz	r1, 8010334 <_strtod_l+0x8e4>
 80102f6:	ea02 010b 	and.w	r1, r2, fp
 80102fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80102fe:	dc19      	bgt.n	8010334 <_strtod_l+0x8e4>
 8010300:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010304:	f77f ae5b 	ble.w	800ffbe <_strtod_l+0x56e>
 8010308:	4a96      	ldr	r2, [pc, #600]	; (8010564 <_strtod_l+0xb14>)
 801030a:	2300      	movs	r3, #0
 801030c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010310:	4650      	mov	r0, sl
 8010312:	4659      	mov	r1, fp
 8010314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010318:	f7f0 f996 	bl	8000648 <__aeabi_dmul>
 801031c:	4682      	mov	sl, r0
 801031e:	468b      	mov	fp, r1
 8010320:	2900      	cmp	r1, #0
 8010322:	f47f adbe 	bne.w	800fea2 <_strtod_l+0x452>
 8010326:	2800      	cmp	r0, #0
 8010328:	f47f adbb 	bne.w	800fea2 <_strtod_l+0x452>
 801032c:	2322      	movs	r3, #34	; 0x22
 801032e:	f8c9 3000 	str.w	r3, [r9]
 8010332:	e5b6      	b.n	800fea2 <_strtod_l+0x452>
 8010334:	4013      	ands	r3, r2
 8010336:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801033a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801033e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010342:	f04f 3aff 	mov.w	sl, #4294967295
 8010346:	e76a      	b.n	801021e <_strtod_l+0x7ce>
 8010348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801034a:	b193      	cbz	r3, 8010372 <_strtod_l+0x922>
 801034c:	422b      	tst	r3, r5
 801034e:	f43f af66 	beq.w	801021e <_strtod_l+0x7ce>
 8010352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010354:	9a04      	ldr	r2, [sp, #16]
 8010356:	4650      	mov	r0, sl
 8010358:	4659      	mov	r1, fp
 801035a:	b173      	cbz	r3, 801037a <_strtod_l+0x92a>
 801035c:	f7ff fb5b 	bl	800fa16 <sulp>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010368:	f7ef ffb8 	bl	80002dc <__adddf3>
 801036c:	4682      	mov	sl, r0
 801036e:	468b      	mov	fp, r1
 8010370:	e755      	b.n	801021e <_strtod_l+0x7ce>
 8010372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010374:	ea13 0f0a 	tst.w	r3, sl
 8010378:	e7e9      	b.n	801034e <_strtod_l+0x8fe>
 801037a:	f7ff fb4c 	bl	800fa16 <sulp>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010386:	f7ef ffa7 	bl	80002d8 <__aeabi_dsub>
 801038a:	2200      	movs	r2, #0
 801038c:	2300      	movs	r3, #0
 801038e:	4682      	mov	sl, r0
 8010390:	468b      	mov	fp, r1
 8010392:	f7f0 fbc1 	bl	8000b18 <__aeabi_dcmpeq>
 8010396:	2800      	cmp	r0, #0
 8010398:	f47f ae11 	bne.w	800ffbe <_strtod_l+0x56e>
 801039c:	e73f      	b.n	801021e <_strtod_l+0x7ce>
 801039e:	4641      	mov	r1, r8
 80103a0:	4620      	mov	r0, r4
 80103a2:	f002 f86a 	bl	801247a <__ratio>
 80103a6:	ec57 6b10 	vmov	r6, r7, d0
 80103aa:	2200      	movs	r2, #0
 80103ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103b0:	ee10 0a10 	vmov	r0, s0
 80103b4:	4639      	mov	r1, r7
 80103b6:	f7f0 fbc3 	bl	8000b40 <__aeabi_dcmple>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d077      	beq.n	80104ae <_strtod_l+0xa5e>
 80103be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d04a      	beq.n	801045a <_strtod_l+0xa0a>
 80103c4:	4b68      	ldr	r3, [pc, #416]	; (8010568 <_strtod_l+0xb18>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80103cc:	4f66      	ldr	r7, [pc, #408]	; (8010568 <_strtod_l+0xb18>)
 80103ce:	2600      	movs	r6, #0
 80103d0:	4b62      	ldr	r3, [pc, #392]	; (801055c <_strtod_l+0xb0c>)
 80103d2:	402b      	ands	r3, r5
 80103d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80103d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103d8:	4b64      	ldr	r3, [pc, #400]	; (801056c <_strtod_l+0xb1c>)
 80103da:	429a      	cmp	r2, r3
 80103dc:	f040 80ce 	bne.w	801057c <_strtod_l+0xb2c>
 80103e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80103ec:	ec4b ab10 	vmov	d0, sl, fp
 80103f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80103f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80103f8:	f001 ff7a 	bl	80122f0 <__ulp>
 80103fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010400:	ec53 2b10 	vmov	r2, r3, d0
 8010404:	f7f0 f920 	bl	8000648 <__aeabi_dmul>
 8010408:	4652      	mov	r2, sl
 801040a:	465b      	mov	r3, fp
 801040c:	f7ef ff66 	bl	80002dc <__adddf3>
 8010410:	460b      	mov	r3, r1
 8010412:	4952      	ldr	r1, [pc, #328]	; (801055c <_strtod_l+0xb0c>)
 8010414:	4a56      	ldr	r2, [pc, #344]	; (8010570 <_strtod_l+0xb20>)
 8010416:	4019      	ands	r1, r3
 8010418:	4291      	cmp	r1, r2
 801041a:	4682      	mov	sl, r0
 801041c:	d95b      	bls.n	80104d6 <_strtod_l+0xa86>
 801041e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010420:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010424:	4293      	cmp	r3, r2
 8010426:	d103      	bne.n	8010430 <_strtod_l+0x9e0>
 8010428:	9b08      	ldr	r3, [sp, #32]
 801042a:	3301      	adds	r3, #1
 801042c:	f43f ad2e 	beq.w	800fe8c <_strtod_l+0x43c>
 8010430:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010560 <_strtod_l+0xb10>
 8010434:	f04f 3aff 	mov.w	sl, #4294967295
 8010438:	991c      	ldr	r1, [sp, #112]	; 0x70
 801043a:	4648      	mov	r0, r9
 801043c:	f001 fcc0 	bl	8011dc0 <_Bfree>
 8010440:	9905      	ldr	r1, [sp, #20]
 8010442:	4648      	mov	r0, r9
 8010444:	f001 fcbc 	bl	8011dc0 <_Bfree>
 8010448:	4641      	mov	r1, r8
 801044a:	4648      	mov	r0, r9
 801044c:	f001 fcb8 	bl	8011dc0 <_Bfree>
 8010450:	4621      	mov	r1, r4
 8010452:	4648      	mov	r0, r9
 8010454:	f001 fcb4 	bl	8011dc0 <_Bfree>
 8010458:	e619      	b.n	801008e <_strtod_l+0x63e>
 801045a:	f1ba 0f00 	cmp.w	sl, #0
 801045e:	d11a      	bne.n	8010496 <_strtod_l+0xa46>
 8010460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010464:	b9eb      	cbnz	r3, 80104a2 <_strtod_l+0xa52>
 8010466:	2200      	movs	r2, #0
 8010468:	4b3f      	ldr	r3, [pc, #252]	; (8010568 <_strtod_l+0xb18>)
 801046a:	4630      	mov	r0, r6
 801046c:	4639      	mov	r1, r7
 801046e:	f7f0 fb5d 	bl	8000b2c <__aeabi_dcmplt>
 8010472:	b9c8      	cbnz	r0, 80104a8 <_strtod_l+0xa58>
 8010474:	4630      	mov	r0, r6
 8010476:	4639      	mov	r1, r7
 8010478:	2200      	movs	r2, #0
 801047a:	4b3e      	ldr	r3, [pc, #248]	; (8010574 <_strtod_l+0xb24>)
 801047c:	f7f0 f8e4 	bl	8000648 <__aeabi_dmul>
 8010480:	4606      	mov	r6, r0
 8010482:	460f      	mov	r7, r1
 8010484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010488:	9618      	str	r6, [sp, #96]	; 0x60
 801048a:	9319      	str	r3, [sp, #100]	; 0x64
 801048c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010494:	e79c      	b.n	80103d0 <_strtod_l+0x980>
 8010496:	f1ba 0f01 	cmp.w	sl, #1
 801049a:	d102      	bne.n	80104a2 <_strtod_l+0xa52>
 801049c:	2d00      	cmp	r5, #0
 801049e:	f43f ad8e 	beq.w	800ffbe <_strtod_l+0x56e>
 80104a2:	2200      	movs	r2, #0
 80104a4:	4b34      	ldr	r3, [pc, #208]	; (8010578 <_strtod_l+0xb28>)
 80104a6:	e78f      	b.n	80103c8 <_strtod_l+0x978>
 80104a8:	2600      	movs	r6, #0
 80104aa:	4f32      	ldr	r7, [pc, #200]	; (8010574 <_strtod_l+0xb24>)
 80104ac:	e7ea      	b.n	8010484 <_strtod_l+0xa34>
 80104ae:	4b31      	ldr	r3, [pc, #196]	; (8010574 <_strtod_l+0xb24>)
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	2200      	movs	r2, #0
 80104b6:	f7f0 f8c7 	bl	8000648 <__aeabi_dmul>
 80104ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104bc:	4606      	mov	r6, r0
 80104be:	460f      	mov	r7, r1
 80104c0:	b933      	cbnz	r3, 80104d0 <_strtod_l+0xa80>
 80104c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104c6:	9010      	str	r0, [sp, #64]	; 0x40
 80104c8:	9311      	str	r3, [sp, #68]	; 0x44
 80104ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80104ce:	e7df      	b.n	8010490 <_strtod_l+0xa40>
 80104d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80104d4:	e7f9      	b.n	80104ca <_strtod_l+0xa7a>
 80104d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80104da:	9b04      	ldr	r3, [sp, #16]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1ab      	bne.n	8010438 <_strtod_l+0x9e8>
 80104e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104e4:	0d1b      	lsrs	r3, r3, #20
 80104e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104e8:	051b      	lsls	r3, r3, #20
 80104ea:	429a      	cmp	r2, r3
 80104ec:	465d      	mov	r5, fp
 80104ee:	d1a3      	bne.n	8010438 <_strtod_l+0x9e8>
 80104f0:	4639      	mov	r1, r7
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7f0 fb58 	bl	8000ba8 <__aeabi_d2iz>
 80104f8:	f7f0 f83c 	bl	8000574 <__aeabi_i2d>
 80104fc:	460b      	mov	r3, r1
 80104fe:	4602      	mov	r2, r0
 8010500:	4639      	mov	r1, r7
 8010502:	4630      	mov	r0, r6
 8010504:	f7ef fee8 	bl	80002d8 <__aeabi_dsub>
 8010508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801050a:	4606      	mov	r6, r0
 801050c:	460f      	mov	r7, r1
 801050e:	b933      	cbnz	r3, 801051e <_strtod_l+0xace>
 8010510:	f1ba 0f00 	cmp.w	sl, #0
 8010514:	d103      	bne.n	801051e <_strtod_l+0xace>
 8010516:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801051a:	2d00      	cmp	r5, #0
 801051c:	d06d      	beq.n	80105fa <_strtod_l+0xbaa>
 801051e:	a30a      	add	r3, pc, #40	; (adr r3, 8010548 <_strtod_l+0xaf8>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	4630      	mov	r0, r6
 8010526:	4639      	mov	r1, r7
 8010528:	f7f0 fb00 	bl	8000b2c <__aeabi_dcmplt>
 801052c:	2800      	cmp	r0, #0
 801052e:	f47f acb8 	bne.w	800fea2 <_strtod_l+0x452>
 8010532:	a307      	add	r3, pc, #28	; (adr r3, 8010550 <_strtod_l+0xb00>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	4630      	mov	r0, r6
 801053a:	4639      	mov	r1, r7
 801053c:	f7f0 fb14 	bl	8000b68 <__aeabi_dcmpgt>
 8010540:	2800      	cmp	r0, #0
 8010542:	f43f af79 	beq.w	8010438 <_strtod_l+0x9e8>
 8010546:	e4ac      	b.n	800fea2 <_strtod_l+0x452>
 8010548:	94a03595 	.word	0x94a03595
 801054c:	3fdfffff 	.word	0x3fdfffff
 8010550:	35afe535 	.word	0x35afe535
 8010554:	3fe00000 	.word	0x3fe00000
 8010558:	000fffff 	.word	0x000fffff
 801055c:	7ff00000 	.word	0x7ff00000
 8010560:	7fefffff 	.word	0x7fefffff
 8010564:	39500000 	.word	0x39500000
 8010568:	3ff00000 	.word	0x3ff00000
 801056c:	7fe00000 	.word	0x7fe00000
 8010570:	7c9fffff 	.word	0x7c9fffff
 8010574:	3fe00000 	.word	0x3fe00000
 8010578:	bff00000 	.word	0xbff00000
 801057c:	9b04      	ldr	r3, [sp, #16]
 801057e:	b333      	cbz	r3, 80105ce <_strtod_l+0xb7e>
 8010580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010582:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010586:	d822      	bhi.n	80105ce <_strtod_l+0xb7e>
 8010588:	a327      	add	r3, pc, #156	; (adr r3, 8010628 <_strtod_l+0xbd8>)
 801058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058e:	4630      	mov	r0, r6
 8010590:	4639      	mov	r1, r7
 8010592:	f7f0 fad5 	bl	8000b40 <__aeabi_dcmple>
 8010596:	b1a0      	cbz	r0, 80105c2 <_strtod_l+0xb72>
 8010598:	4639      	mov	r1, r7
 801059a:	4630      	mov	r0, r6
 801059c:	f7f0 fb2c 	bl	8000bf8 <__aeabi_d2uiz>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	bf08      	it	eq
 80105a4:	2001      	moveq	r0, #1
 80105a6:	f7ef ffd5 	bl	8000554 <__aeabi_ui2d>
 80105aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105ac:	4606      	mov	r6, r0
 80105ae:	460f      	mov	r7, r1
 80105b0:	bb03      	cbnz	r3, 80105f4 <_strtod_l+0xba4>
 80105b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105b6:	9012      	str	r0, [sp, #72]	; 0x48
 80105b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80105ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80105be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80105c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80105ca:	1a9b      	subs	r3, r3, r2
 80105cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80105ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80105d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80105d6:	f001 fe8b 	bl	80122f0 <__ulp>
 80105da:	4650      	mov	r0, sl
 80105dc:	ec53 2b10 	vmov	r2, r3, d0
 80105e0:	4659      	mov	r1, fp
 80105e2:	f7f0 f831 	bl	8000648 <__aeabi_dmul>
 80105e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80105ea:	f7ef fe77 	bl	80002dc <__adddf3>
 80105ee:	4682      	mov	sl, r0
 80105f0:	468b      	mov	fp, r1
 80105f2:	e772      	b.n	80104da <_strtod_l+0xa8a>
 80105f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80105f8:	e7df      	b.n	80105ba <_strtod_l+0xb6a>
 80105fa:	a30d      	add	r3, pc, #52	; (adr r3, 8010630 <_strtod_l+0xbe0>)
 80105fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010600:	f7f0 fa94 	bl	8000b2c <__aeabi_dcmplt>
 8010604:	e79c      	b.n	8010540 <_strtod_l+0xaf0>
 8010606:	2300      	movs	r3, #0
 8010608:	930d      	str	r3, [sp, #52]	; 0x34
 801060a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801060c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801060e:	6013      	str	r3, [r2, #0]
 8010610:	f7ff ba61 	b.w	800fad6 <_strtod_l+0x86>
 8010614:	2b65      	cmp	r3, #101	; 0x65
 8010616:	f04f 0200 	mov.w	r2, #0
 801061a:	f43f ab4e 	beq.w	800fcba <_strtod_l+0x26a>
 801061e:	2101      	movs	r1, #1
 8010620:	4614      	mov	r4, r2
 8010622:	9104      	str	r1, [sp, #16]
 8010624:	f7ff bacb 	b.w	800fbbe <_strtod_l+0x16e>
 8010628:	ffc00000 	.word	0xffc00000
 801062c:	41dfffff 	.word	0x41dfffff
 8010630:	94a03595 	.word	0x94a03595
 8010634:	3fcfffff 	.word	0x3fcfffff

08010638 <_strtod_r>:
 8010638:	4b05      	ldr	r3, [pc, #20]	; (8010650 <_strtod_r+0x18>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	b410      	push	{r4}
 801063e:	6a1b      	ldr	r3, [r3, #32]
 8010640:	4c04      	ldr	r4, [pc, #16]	; (8010654 <_strtod_r+0x1c>)
 8010642:	2b00      	cmp	r3, #0
 8010644:	bf08      	it	eq
 8010646:	4623      	moveq	r3, r4
 8010648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801064c:	f7ff ba00 	b.w	800fa50 <_strtod_l>
 8010650:	20000028 	.word	0x20000028
 8010654:	2000008c 	.word	0x2000008c

08010658 <_strtol_l.isra.0>:
 8010658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801065c:	4680      	mov	r8, r0
 801065e:	4689      	mov	r9, r1
 8010660:	4692      	mov	sl, r2
 8010662:	461e      	mov	r6, r3
 8010664:	460f      	mov	r7, r1
 8010666:	463d      	mov	r5, r7
 8010668:	9808      	ldr	r0, [sp, #32]
 801066a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801066e:	f001 facd 	bl	8011c0c <__locale_ctype_ptr_l>
 8010672:	4420      	add	r0, r4
 8010674:	7843      	ldrb	r3, [r0, #1]
 8010676:	f013 0308 	ands.w	r3, r3, #8
 801067a:	d132      	bne.n	80106e2 <_strtol_l.isra.0+0x8a>
 801067c:	2c2d      	cmp	r4, #45	; 0x2d
 801067e:	d132      	bne.n	80106e6 <_strtol_l.isra.0+0x8e>
 8010680:	787c      	ldrb	r4, [r7, #1]
 8010682:	1cbd      	adds	r5, r7, #2
 8010684:	2201      	movs	r2, #1
 8010686:	2e00      	cmp	r6, #0
 8010688:	d05d      	beq.n	8010746 <_strtol_l.isra.0+0xee>
 801068a:	2e10      	cmp	r6, #16
 801068c:	d109      	bne.n	80106a2 <_strtol_l.isra.0+0x4a>
 801068e:	2c30      	cmp	r4, #48	; 0x30
 8010690:	d107      	bne.n	80106a2 <_strtol_l.isra.0+0x4a>
 8010692:	782b      	ldrb	r3, [r5, #0]
 8010694:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010698:	2b58      	cmp	r3, #88	; 0x58
 801069a:	d14f      	bne.n	801073c <_strtol_l.isra.0+0xe4>
 801069c:	786c      	ldrb	r4, [r5, #1]
 801069e:	2610      	movs	r6, #16
 80106a0:	3502      	adds	r5, #2
 80106a2:	2a00      	cmp	r2, #0
 80106a4:	bf14      	ite	ne
 80106a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80106aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80106ae:	2700      	movs	r7, #0
 80106b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80106b4:	4638      	mov	r0, r7
 80106b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80106ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80106be:	2b09      	cmp	r3, #9
 80106c0:	d817      	bhi.n	80106f2 <_strtol_l.isra.0+0x9a>
 80106c2:	461c      	mov	r4, r3
 80106c4:	42a6      	cmp	r6, r4
 80106c6:	dd23      	ble.n	8010710 <_strtol_l.isra.0+0xb8>
 80106c8:	1c7b      	adds	r3, r7, #1
 80106ca:	d007      	beq.n	80106dc <_strtol_l.isra.0+0x84>
 80106cc:	4584      	cmp	ip, r0
 80106ce:	d31c      	bcc.n	801070a <_strtol_l.isra.0+0xb2>
 80106d0:	d101      	bne.n	80106d6 <_strtol_l.isra.0+0x7e>
 80106d2:	45a6      	cmp	lr, r4
 80106d4:	db19      	blt.n	801070a <_strtol_l.isra.0+0xb2>
 80106d6:	fb00 4006 	mla	r0, r0, r6, r4
 80106da:	2701      	movs	r7, #1
 80106dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106e0:	e7eb      	b.n	80106ba <_strtol_l.isra.0+0x62>
 80106e2:	462f      	mov	r7, r5
 80106e4:	e7bf      	b.n	8010666 <_strtol_l.isra.0+0xe>
 80106e6:	2c2b      	cmp	r4, #43	; 0x2b
 80106e8:	bf04      	itt	eq
 80106ea:	1cbd      	addeq	r5, r7, #2
 80106ec:	787c      	ldrbeq	r4, [r7, #1]
 80106ee:	461a      	mov	r2, r3
 80106f0:	e7c9      	b.n	8010686 <_strtol_l.isra.0+0x2e>
 80106f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80106f6:	2b19      	cmp	r3, #25
 80106f8:	d801      	bhi.n	80106fe <_strtol_l.isra.0+0xa6>
 80106fa:	3c37      	subs	r4, #55	; 0x37
 80106fc:	e7e2      	b.n	80106c4 <_strtol_l.isra.0+0x6c>
 80106fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010702:	2b19      	cmp	r3, #25
 8010704:	d804      	bhi.n	8010710 <_strtol_l.isra.0+0xb8>
 8010706:	3c57      	subs	r4, #87	; 0x57
 8010708:	e7dc      	b.n	80106c4 <_strtol_l.isra.0+0x6c>
 801070a:	f04f 37ff 	mov.w	r7, #4294967295
 801070e:	e7e5      	b.n	80106dc <_strtol_l.isra.0+0x84>
 8010710:	1c7b      	adds	r3, r7, #1
 8010712:	d108      	bne.n	8010726 <_strtol_l.isra.0+0xce>
 8010714:	2322      	movs	r3, #34	; 0x22
 8010716:	f8c8 3000 	str.w	r3, [r8]
 801071a:	4608      	mov	r0, r1
 801071c:	f1ba 0f00 	cmp.w	sl, #0
 8010720:	d107      	bne.n	8010732 <_strtol_l.isra.0+0xda>
 8010722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010726:	b102      	cbz	r2, 801072a <_strtol_l.isra.0+0xd2>
 8010728:	4240      	negs	r0, r0
 801072a:	f1ba 0f00 	cmp.w	sl, #0
 801072e:	d0f8      	beq.n	8010722 <_strtol_l.isra.0+0xca>
 8010730:	b10f      	cbz	r7, 8010736 <_strtol_l.isra.0+0xde>
 8010732:	f105 39ff 	add.w	r9, r5, #4294967295
 8010736:	f8ca 9000 	str.w	r9, [sl]
 801073a:	e7f2      	b.n	8010722 <_strtol_l.isra.0+0xca>
 801073c:	2430      	movs	r4, #48	; 0x30
 801073e:	2e00      	cmp	r6, #0
 8010740:	d1af      	bne.n	80106a2 <_strtol_l.isra.0+0x4a>
 8010742:	2608      	movs	r6, #8
 8010744:	e7ad      	b.n	80106a2 <_strtol_l.isra.0+0x4a>
 8010746:	2c30      	cmp	r4, #48	; 0x30
 8010748:	d0a3      	beq.n	8010692 <_strtol_l.isra.0+0x3a>
 801074a:	260a      	movs	r6, #10
 801074c:	e7a9      	b.n	80106a2 <_strtol_l.isra.0+0x4a>
	...

08010750 <_strtol_r>:
 8010750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010752:	4c06      	ldr	r4, [pc, #24]	; (801076c <_strtol_r+0x1c>)
 8010754:	4d06      	ldr	r5, [pc, #24]	; (8010770 <_strtol_r+0x20>)
 8010756:	6824      	ldr	r4, [r4, #0]
 8010758:	6a24      	ldr	r4, [r4, #32]
 801075a:	2c00      	cmp	r4, #0
 801075c:	bf08      	it	eq
 801075e:	462c      	moveq	r4, r5
 8010760:	9400      	str	r4, [sp, #0]
 8010762:	f7ff ff79 	bl	8010658 <_strtol_l.isra.0>
 8010766:	b003      	add	sp, #12
 8010768:	bd30      	pop	{r4, r5, pc}
 801076a:	bf00      	nop
 801076c:	20000028 	.word	0x20000028
 8010770:	2000008c 	.word	0x2000008c

08010774 <__swbuf_r>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	460e      	mov	r6, r1
 8010778:	4614      	mov	r4, r2
 801077a:	4605      	mov	r5, r0
 801077c:	b118      	cbz	r0, 8010786 <__swbuf_r+0x12>
 801077e:	6983      	ldr	r3, [r0, #24]
 8010780:	b90b      	cbnz	r3, 8010786 <__swbuf_r+0x12>
 8010782:	f7fd fff5 	bl	800e770 <__sinit>
 8010786:	4b21      	ldr	r3, [pc, #132]	; (801080c <__swbuf_r+0x98>)
 8010788:	429c      	cmp	r4, r3
 801078a:	d12a      	bne.n	80107e2 <__swbuf_r+0x6e>
 801078c:	686c      	ldr	r4, [r5, #4]
 801078e:	69a3      	ldr	r3, [r4, #24]
 8010790:	60a3      	str	r3, [r4, #8]
 8010792:	89a3      	ldrh	r3, [r4, #12]
 8010794:	071a      	lsls	r2, r3, #28
 8010796:	d52e      	bpl.n	80107f6 <__swbuf_r+0x82>
 8010798:	6923      	ldr	r3, [r4, #16]
 801079a:	b363      	cbz	r3, 80107f6 <__swbuf_r+0x82>
 801079c:	6923      	ldr	r3, [r4, #16]
 801079e:	6820      	ldr	r0, [r4, #0]
 80107a0:	1ac0      	subs	r0, r0, r3
 80107a2:	6963      	ldr	r3, [r4, #20]
 80107a4:	b2f6      	uxtb	r6, r6
 80107a6:	4283      	cmp	r3, r0
 80107a8:	4637      	mov	r7, r6
 80107aa:	dc04      	bgt.n	80107b6 <__swbuf_r+0x42>
 80107ac:	4621      	mov	r1, r4
 80107ae:	4628      	mov	r0, r5
 80107b0:	f7fd ff62 	bl	800e678 <_fflush_r>
 80107b4:	bb28      	cbnz	r0, 8010802 <__swbuf_r+0x8e>
 80107b6:	68a3      	ldr	r3, [r4, #8]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	60a3      	str	r3, [r4, #8]
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	6022      	str	r2, [r4, #0]
 80107c2:	701e      	strb	r6, [r3, #0]
 80107c4:	6963      	ldr	r3, [r4, #20]
 80107c6:	3001      	adds	r0, #1
 80107c8:	4283      	cmp	r3, r0
 80107ca:	d004      	beq.n	80107d6 <__swbuf_r+0x62>
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	07db      	lsls	r3, r3, #31
 80107d0:	d519      	bpl.n	8010806 <__swbuf_r+0x92>
 80107d2:	2e0a      	cmp	r6, #10
 80107d4:	d117      	bne.n	8010806 <__swbuf_r+0x92>
 80107d6:	4621      	mov	r1, r4
 80107d8:	4628      	mov	r0, r5
 80107da:	f7fd ff4d 	bl	800e678 <_fflush_r>
 80107de:	b190      	cbz	r0, 8010806 <__swbuf_r+0x92>
 80107e0:	e00f      	b.n	8010802 <__swbuf_r+0x8e>
 80107e2:	4b0b      	ldr	r3, [pc, #44]	; (8010810 <__swbuf_r+0x9c>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d101      	bne.n	80107ec <__swbuf_r+0x78>
 80107e8:	68ac      	ldr	r4, [r5, #8]
 80107ea:	e7d0      	b.n	801078e <__swbuf_r+0x1a>
 80107ec:	4b09      	ldr	r3, [pc, #36]	; (8010814 <__swbuf_r+0xa0>)
 80107ee:	429c      	cmp	r4, r3
 80107f0:	bf08      	it	eq
 80107f2:	68ec      	ldreq	r4, [r5, #12]
 80107f4:	e7cb      	b.n	801078e <__swbuf_r+0x1a>
 80107f6:	4621      	mov	r1, r4
 80107f8:	4628      	mov	r0, r5
 80107fa:	f000 f81f 	bl	801083c <__swsetup_r>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d0cc      	beq.n	801079c <__swbuf_r+0x28>
 8010802:	f04f 37ff 	mov.w	r7, #4294967295
 8010806:	4638      	mov	r0, r7
 8010808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801080a:	bf00      	nop
 801080c:	080136c4 	.word	0x080136c4
 8010810:	080136e4 	.word	0x080136e4
 8010814:	080136a4 	.word	0x080136a4

08010818 <_write_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4c07      	ldr	r4, [pc, #28]	; (8010838 <_write_r+0x20>)
 801081c:	4605      	mov	r5, r0
 801081e:	4608      	mov	r0, r1
 8010820:	4611      	mov	r1, r2
 8010822:	2200      	movs	r2, #0
 8010824:	6022      	str	r2, [r4, #0]
 8010826:	461a      	mov	r2, r3
 8010828:	f7fb feff 	bl	800c62a <_write>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_write_r+0x1e>
 8010830:	6823      	ldr	r3, [r4, #0]
 8010832:	b103      	cbz	r3, 8010836 <_write_r+0x1e>
 8010834:	602b      	str	r3, [r5, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	2001bf58 	.word	0x2001bf58

0801083c <__swsetup_r>:
 801083c:	4b32      	ldr	r3, [pc, #200]	; (8010908 <__swsetup_r+0xcc>)
 801083e:	b570      	push	{r4, r5, r6, lr}
 8010840:	681d      	ldr	r5, [r3, #0]
 8010842:	4606      	mov	r6, r0
 8010844:	460c      	mov	r4, r1
 8010846:	b125      	cbz	r5, 8010852 <__swsetup_r+0x16>
 8010848:	69ab      	ldr	r3, [r5, #24]
 801084a:	b913      	cbnz	r3, 8010852 <__swsetup_r+0x16>
 801084c:	4628      	mov	r0, r5
 801084e:	f7fd ff8f 	bl	800e770 <__sinit>
 8010852:	4b2e      	ldr	r3, [pc, #184]	; (801090c <__swsetup_r+0xd0>)
 8010854:	429c      	cmp	r4, r3
 8010856:	d10f      	bne.n	8010878 <__swsetup_r+0x3c>
 8010858:	686c      	ldr	r4, [r5, #4]
 801085a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801085e:	b29a      	uxth	r2, r3
 8010860:	0715      	lsls	r5, r2, #28
 8010862:	d42c      	bmi.n	80108be <__swsetup_r+0x82>
 8010864:	06d0      	lsls	r0, r2, #27
 8010866:	d411      	bmi.n	801088c <__swsetup_r+0x50>
 8010868:	2209      	movs	r2, #9
 801086a:	6032      	str	r2, [r6, #0]
 801086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010870:	81a3      	strh	r3, [r4, #12]
 8010872:	f04f 30ff 	mov.w	r0, #4294967295
 8010876:	e03e      	b.n	80108f6 <__swsetup_r+0xba>
 8010878:	4b25      	ldr	r3, [pc, #148]	; (8010910 <__swsetup_r+0xd4>)
 801087a:	429c      	cmp	r4, r3
 801087c:	d101      	bne.n	8010882 <__swsetup_r+0x46>
 801087e:	68ac      	ldr	r4, [r5, #8]
 8010880:	e7eb      	b.n	801085a <__swsetup_r+0x1e>
 8010882:	4b24      	ldr	r3, [pc, #144]	; (8010914 <__swsetup_r+0xd8>)
 8010884:	429c      	cmp	r4, r3
 8010886:	bf08      	it	eq
 8010888:	68ec      	ldreq	r4, [r5, #12]
 801088a:	e7e6      	b.n	801085a <__swsetup_r+0x1e>
 801088c:	0751      	lsls	r1, r2, #29
 801088e:	d512      	bpl.n	80108b6 <__swsetup_r+0x7a>
 8010890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010892:	b141      	cbz	r1, 80108a6 <__swsetup_r+0x6a>
 8010894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010898:	4299      	cmp	r1, r3
 801089a:	d002      	beq.n	80108a2 <__swsetup_r+0x66>
 801089c:	4630      	mov	r0, r6
 801089e:	f7fe f829 	bl	800e8f4 <_free_r>
 80108a2:	2300      	movs	r3, #0
 80108a4:	6363      	str	r3, [r4, #52]	; 0x34
 80108a6:	89a3      	ldrh	r3, [r4, #12]
 80108a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108ac:	81a3      	strh	r3, [r4, #12]
 80108ae:	2300      	movs	r3, #0
 80108b0:	6063      	str	r3, [r4, #4]
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f043 0308 	orr.w	r3, r3, #8
 80108bc:	81a3      	strh	r3, [r4, #12]
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	b94b      	cbnz	r3, 80108d6 <__swsetup_r+0x9a>
 80108c2:	89a3      	ldrh	r3, [r4, #12]
 80108c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108cc:	d003      	beq.n	80108d6 <__swsetup_r+0x9a>
 80108ce:	4621      	mov	r1, r4
 80108d0:	4630      	mov	r0, r6
 80108d2:	f001 f9e5 	bl	8011ca0 <__smakebuf_r>
 80108d6:	89a2      	ldrh	r2, [r4, #12]
 80108d8:	f012 0301 	ands.w	r3, r2, #1
 80108dc:	d00c      	beq.n	80108f8 <__swsetup_r+0xbc>
 80108de:	2300      	movs	r3, #0
 80108e0:	60a3      	str	r3, [r4, #8]
 80108e2:	6963      	ldr	r3, [r4, #20]
 80108e4:	425b      	negs	r3, r3
 80108e6:	61a3      	str	r3, [r4, #24]
 80108e8:	6923      	ldr	r3, [r4, #16]
 80108ea:	b953      	cbnz	r3, 8010902 <__swsetup_r+0xc6>
 80108ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80108f4:	d1ba      	bne.n	801086c <__swsetup_r+0x30>
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	0792      	lsls	r2, r2, #30
 80108fa:	bf58      	it	pl
 80108fc:	6963      	ldrpl	r3, [r4, #20]
 80108fe:	60a3      	str	r3, [r4, #8]
 8010900:	e7f2      	b.n	80108e8 <__swsetup_r+0xac>
 8010902:	2000      	movs	r0, #0
 8010904:	e7f7      	b.n	80108f6 <__swsetup_r+0xba>
 8010906:	bf00      	nop
 8010908:	20000028 	.word	0x20000028
 801090c:	080136c4 	.word	0x080136c4
 8010910:	080136e4 	.word	0x080136e4
 8010914:	080136a4 	.word	0x080136a4

08010918 <_close_r>:
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4c06      	ldr	r4, [pc, #24]	; (8010934 <_close_r+0x1c>)
 801091c:	2300      	movs	r3, #0
 801091e:	4605      	mov	r5, r0
 8010920:	4608      	mov	r0, r1
 8010922:	6023      	str	r3, [r4, #0]
 8010924:	f7fb fe9d 	bl	800c662 <_close>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d102      	bne.n	8010932 <_close_r+0x1a>
 801092c:	6823      	ldr	r3, [r4, #0]
 801092e:	b103      	cbz	r3, 8010932 <_close_r+0x1a>
 8010930:	602b      	str	r3, [r5, #0]
 8010932:	bd38      	pop	{r3, r4, r5, pc}
 8010934:	2001bf58 	.word	0x2001bf58

08010938 <quorem>:
 8010938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093c:	6903      	ldr	r3, [r0, #16]
 801093e:	690c      	ldr	r4, [r1, #16]
 8010940:	42a3      	cmp	r3, r4
 8010942:	4680      	mov	r8, r0
 8010944:	f2c0 8082 	blt.w	8010a4c <quorem+0x114>
 8010948:	3c01      	subs	r4, #1
 801094a:	f101 0714 	add.w	r7, r1, #20
 801094e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010952:	f100 0614 	add.w	r6, r0, #20
 8010956:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801095a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801095e:	eb06 030c 	add.w	r3, r6, ip
 8010962:	3501      	adds	r5, #1
 8010964:	eb07 090c 	add.w	r9, r7, ip
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	fbb0 f5f5 	udiv	r5, r0, r5
 801096e:	b395      	cbz	r5, 80109d6 <quorem+0x9e>
 8010970:	f04f 0a00 	mov.w	sl, #0
 8010974:	4638      	mov	r0, r7
 8010976:	46b6      	mov	lr, r6
 8010978:	46d3      	mov	fp, sl
 801097a:	f850 2b04 	ldr.w	r2, [r0], #4
 801097e:	b293      	uxth	r3, r2
 8010980:	fb05 a303 	mla	r3, r5, r3, sl
 8010984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010988:	b29b      	uxth	r3, r3
 801098a:	ebab 0303 	sub.w	r3, fp, r3
 801098e:	0c12      	lsrs	r2, r2, #16
 8010990:	f8de b000 	ldr.w	fp, [lr]
 8010994:	fb05 a202 	mla	r2, r5, r2, sl
 8010998:	fa13 f38b 	uxtah	r3, r3, fp
 801099c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80109a0:	fa1f fb82 	uxth.w	fp, r2
 80109a4:	f8de 2000 	ldr.w	r2, [lr]
 80109a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80109ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b6:	4581      	cmp	r9, r0
 80109b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80109bc:	f84e 3b04 	str.w	r3, [lr], #4
 80109c0:	d2db      	bcs.n	801097a <quorem+0x42>
 80109c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80109c6:	b933      	cbnz	r3, 80109d6 <quorem+0x9e>
 80109c8:	9b01      	ldr	r3, [sp, #4]
 80109ca:	3b04      	subs	r3, #4
 80109cc:	429e      	cmp	r6, r3
 80109ce:	461a      	mov	r2, r3
 80109d0:	d330      	bcc.n	8010a34 <quorem+0xfc>
 80109d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80109d6:	4640      	mov	r0, r8
 80109d8:	f001 fc12 	bl	8012200 <__mcmp>
 80109dc:	2800      	cmp	r0, #0
 80109de:	db25      	blt.n	8010a2c <quorem+0xf4>
 80109e0:	3501      	adds	r5, #1
 80109e2:	4630      	mov	r0, r6
 80109e4:	f04f 0c00 	mov.w	ip, #0
 80109e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80109ec:	f8d0 e000 	ldr.w	lr, [r0]
 80109f0:	b293      	uxth	r3, r2
 80109f2:	ebac 0303 	sub.w	r3, ip, r3
 80109f6:	0c12      	lsrs	r2, r2, #16
 80109f8:	fa13 f38e 	uxtah	r3, r3, lr
 80109fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a0a:	45b9      	cmp	r9, r7
 8010a0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a10:	f840 3b04 	str.w	r3, [r0], #4
 8010a14:	d2e8      	bcs.n	80109e8 <quorem+0xb0>
 8010a16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010a1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a1e:	b92a      	cbnz	r2, 8010a2c <quorem+0xf4>
 8010a20:	3b04      	subs	r3, #4
 8010a22:	429e      	cmp	r6, r3
 8010a24:	461a      	mov	r2, r3
 8010a26:	d30b      	bcc.n	8010a40 <quorem+0x108>
 8010a28:	f8c8 4010 	str.w	r4, [r8, #16]
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	b003      	add	sp, #12
 8010a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a34:	6812      	ldr	r2, [r2, #0]
 8010a36:	3b04      	subs	r3, #4
 8010a38:	2a00      	cmp	r2, #0
 8010a3a:	d1ca      	bne.n	80109d2 <quorem+0x9a>
 8010a3c:	3c01      	subs	r4, #1
 8010a3e:	e7c5      	b.n	80109cc <quorem+0x94>
 8010a40:	6812      	ldr	r2, [r2, #0]
 8010a42:	3b04      	subs	r3, #4
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	d1ef      	bne.n	8010a28 <quorem+0xf0>
 8010a48:	3c01      	subs	r4, #1
 8010a4a:	e7ea      	b.n	8010a22 <quorem+0xea>
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	e7ee      	b.n	8010a2e <quorem+0xf6>

08010a50 <_dtoa_r>:
 8010a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	ec57 6b10 	vmov	r6, r7, d0
 8010a58:	b097      	sub	sp, #92	; 0x5c
 8010a5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a5c:	9106      	str	r1, [sp, #24]
 8010a5e:	4604      	mov	r4, r0
 8010a60:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a62:	9312      	str	r3, [sp, #72]	; 0x48
 8010a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a68:	e9cd 6700 	strd	r6, r7, [sp]
 8010a6c:	b93d      	cbnz	r5, 8010a7e <_dtoa_r+0x2e>
 8010a6e:	2010      	movs	r0, #16
 8010a70:	f001 f956 	bl	8011d20 <malloc>
 8010a74:	6260      	str	r0, [r4, #36]	; 0x24
 8010a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a7a:	6005      	str	r5, [r0, #0]
 8010a7c:	60c5      	str	r5, [r0, #12]
 8010a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a80:	6819      	ldr	r1, [r3, #0]
 8010a82:	b151      	cbz	r1, 8010a9a <_dtoa_r+0x4a>
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	604a      	str	r2, [r1, #4]
 8010a88:	2301      	movs	r3, #1
 8010a8a:	4093      	lsls	r3, r2
 8010a8c:	608b      	str	r3, [r1, #8]
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f001 f996 	bl	8011dc0 <_Bfree>
 8010a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a96:	2200      	movs	r2, #0
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	1e3b      	subs	r3, r7, #0
 8010a9c:	bfbb      	ittet	lt
 8010a9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010aa2:	9301      	strlt	r3, [sp, #4]
 8010aa4:	2300      	movge	r3, #0
 8010aa6:	2201      	movlt	r2, #1
 8010aa8:	bfac      	ite	ge
 8010aaa:	f8c8 3000 	strge.w	r3, [r8]
 8010aae:	f8c8 2000 	strlt.w	r2, [r8]
 8010ab2:	4baf      	ldr	r3, [pc, #700]	; (8010d70 <_dtoa_r+0x320>)
 8010ab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ab8:	ea33 0308 	bics.w	r3, r3, r8
 8010abc:	d114      	bne.n	8010ae8 <_dtoa_r+0x98>
 8010abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	9b00      	ldr	r3, [sp, #0]
 8010ac8:	b923      	cbnz	r3, 8010ad4 <_dtoa_r+0x84>
 8010aca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	f000 8542 	beq.w	8011558 <_dtoa_r+0xb08>
 8010ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ad6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010d84 <_dtoa_r+0x334>
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 8544 	beq.w	8011568 <_dtoa_r+0xb18>
 8010ae0:	f10b 0303 	add.w	r3, fp, #3
 8010ae4:	f000 bd3e 	b.w	8011564 <_dtoa_r+0xb14>
 8010ae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010aec:	2200      	movs	r2, #0
 8010aee:	2300      	movs	r3, #0
 8010af0:	4630      	mov	r0, r6
 8010af2:	4639      	mov	r1, r7
 8010af4:	f7f0 f810 	bl	8000b18 <__aeabi_dcmpeq>
 8010af8:	4681      	mov	r9, r0
 8010afa:	b168      	cbz	r0, 8010b18 <_dtoa_r+0xc8>
 8010afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010afe:	2301      	movs	r3, #1
 8010b00:	6013      	str	r3, [r2, #0]
 8010b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 8524 	beq.w	8011552 <_dtoa_r+0xb02>
 8010b0a:	4b9a      	ldr	r3, [pc, #616]	; (8010d74 <_dtoa_r+0x324>)
 8010b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	f000 bd28 	b.w	8011568 <_dtoa_r+0xb18>
 8010b18:	aa14      	add	r2, sp, #80	; 0x50
 8010b1a:	a915      	add	r1, sp, #84	; 0x54
 8010b1c:	ec47 6b10 	vmov	d0, r6, r7
 8010b20:	4620      	mov	r0, r4
 8010b22:	f001 fc5b 	bl	80123dc <__d2b>
 8010b26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010b2a:	9004      	str	r0, [sp, #16]
 8010b2c:	2d00      	cmp	r5, #0
 8010b2e:	d07c      	beq.n	8010c2a <_dtoa_r+0x1da>
 8010b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010b38:	46b2      	mov	sl, r6
 8010b3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010b46:	2200      	movs	r2, #0
 8010b48:	4b8b      	ldr	r3, [pc, #556]	; (8010d78 <_dtoa_r+0x328>)
 8010b4a:	4650      	mov	r0, sl
 8010b4c:	4659      	mov	r1, fp
 8010b4e:	f7ef fbc3 	bl	80002d8 <__aeabi_dsub>
 8010b52:	a381      	add	r3, pc, #516	; (adr r3, 8010d58 <_dtoa_r+0x308>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	f7ef fd76 	bl	8000648 <__aeabi_dmul>
 8010b5c:	a380      	add	r3, pc, #512	; (adr r3, 8010d60 <_dtoa_r+0x310>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	f7ef fbbb 	bl	80002dc <__adddf3>
 8010b66:	4606      	mov	r6, r0
 8010b68:	4628      	mov	r0, r5
 8010b6a:	460f      	mov	r7, r1
 8010b6c:	f7ef fd02 	bl	8000574 <__aeabi_i2d>
 8010b70:	a37d      	add	r3, pc, #500	; (adr r3, 8010d68 <_dtoa_r+0x318>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	f7ef fd67 	bl	8000648 <__aeabi_dmul>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	4630      	mov	r0, r6
 8010b80:	4639      	mov	r1, r7
 8010b82:	f7ef fbab 	bl	80002dc <__adddf3>
 8010b86:	4606      	mov	r6, r0
 8010b88:	460f      	mov	r7, r1
 8010b8a:	f7f0 f80d 	bl	8000ba8 <__aeabi_d2iz>
 8010b8e:	2200      	movs	r2, #0
 8010b90:	4682      	mov	sl, r0
 8010b92:	2300      	movs	r3, #0
 8010b94:	4630      	mov	r0, r6
 8010b96:	4639      	mov	r1, r7
 8010b98:	f7ef ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8010b9c:	b148      	cbz	r0, 8010bb2 <_dtoa_r+0x162>
 8010b9e:	4650      	mov	r0, sl
 8010ba0:	f7ef fce8 	bl	8000574 <__aeabi_i2d>
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	f7ef ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8010bac:	b908      	cbnz	r0, 8010bb2 <_dtoa_r+0x162>
 8010bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bb2:	f1ba 0f16 	cmp.w	sl, #22
 8010bb6:	d859      	bhi.n	8010c6c <_dtoa_r+0x21c>
 8010bb8:	4970      	ldr	r1, [pc, #448]	; (8010d7c <_dtoa_r+0x32c>)
 8010bba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc6:	f7ef ffcf 	bl	8000b68 <__aeabi_dcmpgt>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d050      	beq.n	8010c70 <_dtoa_r+0x220>
 8010bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010bd8:	1b5d      	subs	r5, r3, r5
 8010bda:	f1b5 0801 	subs.w	r8, r5, #1
 8010bde:	bf49      	itett	mi
 8010be0:	f1c5 0301 	rsbmi	r3, r5, #1
 8010be4:	2300      	movpl	r3, #0
 8010be6:	9305      	strmi	r3, [sp, #20]
 8010be8:	f04f 0800 	movmi.w	r8, #0
 8010bec:	bf58      	it	pl
 8010bee:	9305      	strpl	r3, [sp, #20]
 8010bf0:	f1ba 0f00 	cmp.w	sl, #0
 8010bf4:	db3e      	blt.n	8010c74 <_dtoa_r+0x224>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	44d0      	add	r8, sl
 8010bfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010bfe:	9307      	str	r3, [sp, #28]
 8010c00:	9b06      	ldr	r3, [sp, #24]
 8010c02:	2b09      	cmp	r3, #9
 8010c04:	f200 8090 	bhi.w	8010d28 <_dtoa_r+0x2d8>
 8010c08:	2b05      	cmp	r3, #5
 8010c0a:	bfc4      	itt	gt
 8010c0c:	3b04      	subgt	r3, #4
 8010c0e:	9306      	strgt	r3, [sp, #24]
 8010c10:	9b06      	ldr	r3, [sp, #24]
 8010c12:	f1a3 0302 	sub.w	r3, r3, #2
 8010c16:	bfcc      	ite	gt
 8010c18:	2500      	movgt	r5, #0
 8010c1a:	2501      	movle	r5, #1
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	f200 808f 	bhi.w	8010d40 <_dtoa_r+0x2f0>
 8010c22:	e8df f003 	tbb	[pc, r3]
 8010c26:	7f7d      	.short	0x7f7d
 8010c28:	7131      	.short	0x7131
 8010c2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010c2e:	441d      	add	r5, r3
 8010c30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010c34:	2820      	cmp	r0, #32
 8010c36:	dd13      	ble.n	8010c60 <_dtoa_r+0x210>
 8010c38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010c3c:	9b00      	ldr	r3, [sp, #0]
 8010c3e:	fa08 f800 	lsl.w	r8, r8, r0
 8010c42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010c46:	fa23 f000 	lsr.w	r0, r3, r0
 8010c4a:	ea48 0000 	orr.w	r0, r8, r0
 8010c4e:	f7ef fc81 	bl	8000554 <__aeabi_ui2d>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4682      	mov	sl, r0
 8010c56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010c5a:	3d01      	subs	r5, #1
 8010c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8010c5e:	e772      	b.n	8010b46 <_dtoa_r+0xf6>
 8010c60:	9b00      	ldr	r3, [sp, #0]
 8010c62:	f1c0 0020 	rsb	r0, r0, #32
 8010c66:	fa03 f000 	lsl.w	r0, r3, r0
 8010c6a:	e7f0      	b.n	8010c4e <_dtoa_r+0x1fe>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e7b1      	b.n	8010bd4 <_dtoa_r+0x184>
 8010c70:	900f      	str	r0, [sp, #60]	; 0x3c
 8010c72:	e7b0      	b.n	8010bd6 <_dtoa_r+0x186>
 8010c74:	9b05      	ldr	r3, [sp, #20]
 8010c76:	eba3 030a 	sub.w	r3, r3, sl
 8010c7a:	9305      	str	r3, [sp, #20]
 8010c7c:	f1ca 0300 	rsb	r3, sl, #0
 8010c80:	9307      	str	r3, [sp, #28]
 8010c82:	2300      	movs	r3, #0
 8010c84:	930e      	str	r3, [sp, #56]	; 0x38
 8010c86:	e7bb      	b.n	8010c00 <_dtoa_r+0x1b0>
 8010c88:	2301      	movs	r3, #1
 8010c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8010c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	dd59      	ble.n	8010d46 <_dtoa_r+0x2f6>
 8010c92:	9302      	str	r3, [sp, #8]
 8010c94:	4699      	mov	r9, r3
 8010c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010c98:	2200      	movs	r2, #0
 8010c9a:	6072      	str	r2, [r6, #4]
 8010c9c:	2204      	movs	r2, #4
 8010c9e:	f102 0014 	add.w	r0, r2, #20
 8010ca2:	4298      	cmp	r0, r3
 8010ca4:	6871      	ldr	r1, [r6, #4]
 8010ca6:	d953      	bls.n	8010d50 <_dtoa_r+0x300>
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f001 f855 	bl	8011d58 <_Balloc>
 8010cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cb0:	6030      	str	r0, [r6, #0]
 8010cb2:	f1b9 0f0e 	cmp.w	r9, #14
 8010cb6:	f8d3 b000 	ldr.w	fp, [r3]
 8010cba:	f200 80e6 	bhi.w	8010e8a <_dtoa_r+0x43a>
 8010cbe:	2d00      	cmp	r5, #0
 8010cc0:	f000 80e3 	beq.w	8010e8a <_dtoa_r+0x43a>
 8010cc4:	ed9d 7b00 	vldr	d7, [sp]
 8010cc8:	f1ba 0f00 	cmp.w	sl, #0
 8010ccc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010cd0:	dd74      	ble.n	8010dbc <_dtoa_r+0x36c>
 8010cd2:	4a2a      	ldr	r2, [pc, #168]	; (8010d7c <_dtoa_r+0x32c>)
 8010cd4:	f00a 030f 	and.w	r3, sl, #15
 8010cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cdc:	ed93 7b00 	vldr	d7, [r3]
 8010ce0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010ce4:	06f0      	lsls	r0, r6, #27
 8010ce6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010cea:	d565      	bpl.n	8010db8 <_dtoa_r+0x368>
 8010cec:	4b24      	ldr	r3, [pc, #144]	; (8010d80 <_dtoa_r+0x330>)
 8010cee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010cf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010cf6:	f7ef fdd1 	bl	800089c <__aeabi_ddiv>
 8010cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8010cfe:	f006 060f 	and.w	r6, r6, #15
 8010d02:	2503      	movs	r5, #3
 8010d04:	4f1e      	ldr	r7, [pc, #120]	; (8010d80 <_dtoa_r+0x330>)
 8010d06:	e04c      	b.n	8010da2 <_dtoa_r+0x352>
 8010d08:	2301      	movs	r3, #1
 8010d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8010d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d0e:	4453      	add	r3, sl
 8010d10:	f103 0901 	add.w	r9, r3, #1
 8010d14:	9302      	str	r3, [sp, #8]
 8010d16:	464b      	mov	r3, r9
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	bfb8      	it	lt
 8010d1c:	2301      	movlt	r3, #1
 8010d1e:	e7ba      	b.n	8010c96 <_dtoa_r+0x246>
 8010d20:	2300      	movs	r3, #0
 8010d22:	e7b2      	b.n	8010c8a <_dtoa_r+0x23a>
 8010d24:	2300      	movs	r3, #0
 8010d26:	e7f0      	b.n	8010d0a <_dtoa_r+0x2ba>
 8010d28:	2501      	movs	r5, #1
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9306      	str	r3, [sp, #24]
 8010d2e:	950a      	str	r5, [sp, #40]	; 0x28
 8010d30:	f04f 33ff 	mov.w	r3, #4294967295
 8010d34:	9302      	str	r3, [sp, #8]
 8010d36:	4699      	mov	r9, r3
 8010d38:	2200      	movs	r2, #0
 8010d3a:	2312      	movs	r3, #18
 8010d3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d3e:	e7aa      	b.n	8010c96 <_dtoa_r+0x246>
 8010d40:	2301      	movs	r3, #1
 8010d42:	930a      	str	r3, [sp, #40]	; 0x28
 8010d44:	e7f4      	b.n	8010d30 <_dtoa_r+0x2e0>
 8010d46:	2301      	movs	r3, #1
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	4699      	mov	r9, r3
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	e7f5      	b.n	8010d3c <_dtoa_r+0x2ec>
 8010d50:	3101      	adds	r1, #1
 8010d52:	6071      	str	r1, [r6, #4]
 8010d54:	0052      	lsls	r2, r2, #1
 8010d56:	e7a2      	b.n	8010c9e <_dtoa_r+0x24e>
 8010d58:	636f4361 	.word	0x636f4361
 8010d5c:	3fd287a7 	.word	0x3fd287a7
 8010d60:	8b60c8b3 	.word	0x8b60c8b3
 8010d64:	3fc68a28 	.word	0x3fc68a28
 8010d68:	509f79fb 	.word	0x509f79fb
 8010d6c:	3fd34413 	.word	0x3fd34413
 8010d70:	7ff00000 	.word	0x7ff00000
 8010d74:	08013719 	.word	0x08013719
 8010d78:	3ff80000 	.word	0x3ff80000
 8010d7c:	080137d8 	.word	0x080137d8
 8010d80:	080137b0 	.word	0x080137b0
 8010d84:	080137a1 	.word	0x080137a1
 8010d88:	07f1      	lsls	r1, r6, #31
 8010d8a:	d508      	bpl.n	8010d9e <_dtoa_r+0x34e>
 8010d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d94:	f7ef fc58 	bl	8000648 <__aeabi_dmul>
 8010d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d9c:	3501      	adds	r5, #1
 8010d9e:	1076      	asrs	r6, r6, #1
 8010da0:	3708      	adds	r7, #8
 8010da2:	2e00      	cmp	r6, #0
 8010da4:	d1f0      	bne.n	8010d88 <_dtoa_r+0x338>
 8010da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dae:	f7ef fd75 	bl	800089c <__aeabi_ddiv>
 8010db2:	e9cd 0100 	strd	r0, r1, [sp]
 8010db6:	e01a      	b.n	8010dee <_dtoa_r+0x39e>
 8010db8:	2502      	movs	r5, #2
 8010dba:	e7a3      	b.n	8010d04 <_dtoa_r+0x2b4>
 8010dbc:	f000 80a0 	beq.w	8010f00 <_dtoa_r+0x4b0>
 8010dc0:	f1ca 0600 	rsb	r6, sl, #0
 8010dc4:	4b9f      	ldr	r3, [pc, #636]	; (8011044 <_dtoa_r+0x5f4>)
 8010dc6:	4fa0      	ldr	r7, [pc, #640]	; (8011048 <_dtoa_r+0x5f8>)
 8010dc8:	f006 020f 	and.w	r2, r6, #15
 8010dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010dd8:	f7ef fc36 	bl	8000648 <__aeabi_dmul>
 8010ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8010de0:	1136      	asrs	r6, r6, #4
 8010de2:	2300      	movs	r3, #0
 8010de4:	2502      	movs	r5, #2
 8010de6:	2e00      	cmp	r6, #0
 8010de8:	d17f      	bne.n	8010eea <_dtoa_r+0x49a>
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1e1      	bne.n	8010db2 <_dtoa_r+0x362>
 8010dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f000 8087 	beq.w	8010f04 <_dtoa_r+0x4b4>
 8010df6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	4b93      	ldr	r3, [pc, #588]	; (801104c <_dtoa_r+0x5fc>)
 8010dfe:	4630      	mov	r0, r6
 8010e00:	4639      	mov	r1, r7
 8010e02:	f7ef fe93 	bl	8000b2c <__aeabi_dcmplt>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d07c      	beq.n	8010f04 <_dtoa_r+0x4b4>
 8010e0a:	f1b9 0f00 	cmp.w	r9, #0
 8010e0e:	d079      	beq.n	8010f04 <_dtoa_r+0x4b4>
 8010e10:	9b02      	ldr	r3, [sp, #8]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dd35      	ble.n	8010e82 <_dtoa_r+0x432>
 8010e16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010e1a:	9308      	str	r3, [sp, #32]
 8010e1c:	4639      	mov	r1, r7
 8010e1e:	2200      	movs	r2, #0
 8010e20:	4b8b      	ldr	r3, [pc, #556]	; (8011050 <_dtoa_r+0x600>)
 8010e22:	4630      	mov	r0, r6
 8010e24:	f7ef fc10 	bl	8000648 <__aeabi_dmul>
 8010e28:	e9cd 0100 	strd	r0, r1, [sp]
 8010e2c:	9f02      	ldr	r7, [sp, #8]
 8010e2e:	3501      	adds	r5, #1
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ef fb9f 	bl	8000574 <__aeabi_i2d>
 8010e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e3a:	f7ef fc05 	bl	8000648 <__aeabi_dmul>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	4b84      	ldr	r3, [pc, #528]	; (8011054 <_dtoa_r+0x604>)
 8010e42:	f7ef fa4b 	bl	80002dc <__adddf3>
 8010e46:	4605      	mov	r5, r0
 8010e48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010e4c:	2f00      	cmp	r7, #0
 8010e4e:	d15d      	bne.n	8010f0c <_dtoa_r+0x4bc>
 8010e50:	2200      	movs	r2, #0
 8010e52:	4b81      	ldr	r3, [pc, #516]	; (8011058 <_dtoa_r+0x608>)
 8010e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e58:	f7ef fa3e 	bl	80002d8 <__aeabi_dsub>
 8010e5c:	462a      	mov	r2, r5
 8010e5e:	4633      	mov	r3, r6
 8010e60:	e9cd 0100 	strd	r0, r1, [sp]
 8010e64:	f7ef fe80 	bl	8000b68 <__aeabi_dcmpgt>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	f040 8288 	bne.w	801137e <_dtoa_r+0x92e>
 8010e6e:	462a      	mov	r2, r5
 8010e70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e78:	f7ef fe58 	bl	8000b2c <__aeabi_dcmplt>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	f040 827c 	bne.w	801137a <_dtoa_r+0x92a>
 8010e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010e86:	e9cd 2300 	strd	r2, r3, [sp]
 8010e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f2c0 8150 	blt.w	8011132 <_dtoa_r+0x6e2>
 8010e92:	f1ba 0f0e 	cmp.w	sl, #14
 8010e96:	f300 814c 	bgt.w	8011132 <_dtoa_r+0x6e2>
 8010e9a:	4b6a      	ldr	r3, [pc, #424]	; (8011044 <_dtoa_r+0x5f4>)
 8010e9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010ea0:	ed93 7b00 	vldr	d7, [r3]
 8010ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010eac:	f280 80d8 	bge.w	8011060 <_dtoa_r+0x610>
 8010eb0:	f1b9 0f00 	cmp.w	r9, #0
 8010eb4:	f300 80d4 	bgt.w	8011060 <_dtoa_r+0x610>
 8010eb8:	f040 825e 	bne.w	8011378 <_dtoa_r+0x928>
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	4b66      	ldr	r3, [pc, #408]	; (8011058 <_dtoa_r+0x608>)
 8010ec0:	ec51 0b17 	vmov	r0, r1, d7
 8010ec4:	f7ef fbc0 	bl	8000648 <__aeabi_dmul>
 8010ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ecc:	f7ef fe42 	bl	8000b54 <__aeabi_dcmpge>
 8010ed0:	464f      	mov	r7, r9
 8010ed2:	464e      	mov	r6, r9
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	f040 8234 	bne.w	8011342 <_dtoa_r+0x8f2>
 8010eda:	2331      	movs	r3, #49	; 0x31
 8010edc:	f10b 0501 	add.w	r5, fp, #1
 8010ee0:	f88b 3000 	strb.w	r3, [fp]
 8010ee4:	f10a 0a01 	add.w	sl, sl, #1
 8010ee8:	e22f      	b.n	801134a <_dtoa_r+0x8fa>
 8010eea:	07f2      	lsls	r2, r6, #31
 8010eec:	d505      	bpl.n	8010efa <_dtoa_r+0x4aa>
 8010eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ef2:	f7ef fba9 	bl	8000648 <__aeabi_dmul>
 8010ef6:	3501      	adds	r5, #1
 8010ef8:	2301      	movs	r3, #1
 8010efa:	1076      	asrs	r6, r6, #1
 8010efc:	3708      	adds	r7, #8
 8010efe:	e772      	b.n	8010de6 <_dtoa_r+0x396>
 8010f00:	2502      	movs	r5, #2
 8010f02:	e774      	b.n	8010dee <_dtoa_r+0x39e>
 8010f04:	f8cd a020 	str.w	sl, [sp, #32]
 8010f08:	464f      	mov	r7, r9
 8010f0a:	e791      	b.n	8010e30 <_dtoa_r+0x3e0>
 8010f0c:	4b4d      	ldr	r3, [pc, #308]	; (8011044 <_dtoa_r+0x5f4>)
 8010f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d047      	beq.n	8010fac <_dtoa_r+0x55c>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	460b      	mov	r3, r1
 8010f20:	2000      	movs	r0, #0
 8010f22:	494e      	ldr	r1, [pc, #312]	; (801105c <_dtoa_r+0x60c>)
 8010f24:	f7ef fcba 	bl	800089c <__aeabi_ddiv>
 8010f28:	462a      	mov	r2, r5
 8010f2a:	4633      	mov	r3, r6
 8010f2c:	f7ef f9d4 	bl	80002d8 <__aeabi_dsub>
 8010f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010f34:	465d      	mov	r5, fp
 8010f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f3a:	f7ef fe35 	bl	8000ba8 <__aeabi_d2iz>
 8010f3e:	4606      	mov	r6, r0
 8010f40:	f7ef fb18 	bl	8000574 <__aeabi_i2d>
 8010f44:	4602      	mov	r2, r0
 8010f46:	460b      	mov	r3, r1
 8010f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f4c:	f7ef f9c4 	bl	80002d8 <__aeabi_dsub>
 8010f50:	3630      	adds	r6, #48	; 0x30
 8010f52:	f805 6b01 	strb.w	r6, [r5], #1
 8010f56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8010f5e:	f7ef fde5 	bl	8000b2c <__aeabi_dcmplt>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d163      	bne.n	801102e <_dtoa_r+0x5de>
 8010f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	4937      	ldr	r1, [pc, #220]	; (801104c <_dtoa_r+0x5fc>)
 8010f6e:	f7ef f9b3 	bl	80002d8 <__aeabi_dsub>
 8010f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010f76:	f7ef fdd9 	bl	8000b2c <__aeabi_dcmplt>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	f040 80b7 	bne.w	80110ee <_dtoa_r+0x69e>
 8010f80:	eba5 030b 	sub.w	r3, r5, fp
 8010f84:	429f      	cmp	r7, r3
 8010f86:	f77f af7c 	ble.w	8010e82 <_dtoa_r+0x432>
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	4b30      	ldr	r3, [pc, #192]	; (8011050 <_dtoa_r+0x600>)
 8010f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010f92:	f7ef fb59 	bl	8000648 <__aeabi_dmul>
 8010f96:	2200      	movs	r2, #0
 8010f98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010f9c:	4b2c      	ldr	r3, [pc, #176]	; (8011050 <_dtoa_r+0x600>)
 8010f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fa2:	f7ef fb51 	bl	8000648 <__aeabi_dmul>
 8010fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8010faa:	e7c4      	b.n	8010f36 <_dtoa_r+0x4e6>
 8010fac:	462a      	mov	r2, r5
 8010fae:	4633      	mov	r3, r6
 8010fb0:	f7ef fb4a 	bl	8000648 <__aeabi_dmul>
 8010fb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010fb8:	eb0b 0507 	add.w	r5, fp, r7
 8010fbc:	465e      	mov	r6, fp
 8010fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fc2:	f7ef fdf1 	bl	8000ba8 <__aeabi_d2iz>
 8010fc6:	4607      	mov	r7, r0
 8010fc8:	f7ef fad4 	bl	8000574 <__aeabi_i2d>
 8010fcc:	3730      	adds	r7, #48	; 0x30
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fd6:	f7ef f97f 	bl	80002d8 <__aeabi_dsub>
 8010fda:	f806 7b01 	strb.w	r7, [r6], #1
 8010fde:	42ae      	cmp	r6, r5
 8010fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8010fe4:	f04f 0200 	mov.w	r2, #0
 8010fe8:	d126      	bne.n	8011038 <_dtoa_r+0x5e8>
 8010fea:	4b1c      	ldr	r3, [pc, #112]	; (801105c <_dtoa_r+0x60c>)
 8010fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ff0:	f7ef f974 	bl	80002dc <__adddf3>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ffc:	f7ef fdb4 	bl	8000b68 <__aeabi_dcmpgt>
 8011000:	2800      	cmp	r0, #0
 8011002:	d174      	bne.n	80110ee <_dtoa_r+0x69e>
 8011004:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011008:	2000      	movs	r0, #0
 801100a:	4914      	ldr	r1, [pc, #80]	; (801105c <_dtoa_r+0x60c>)
 801100c:	f7ef f964 	bl	80002d8 <__aeabi_dsub>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011018:	f7ef fd88 	bl	8000b2c <__aeabi_dcmplt>
 801101c:	2800      	cmp	r0, #0
 801101e:	f43f af30 	beq.w	8010e82 <_dtoa_r+0x432>
 8011022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011026:	2b30      	cmp	r3, #48	; 0x30
 8011028:	f105 32ff 	add.w	r2, r5, #4294967295
 801102c:	d002      	beq.n	8011034 <_dtoa_r+0x5e4>
 801102e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011032:	e04a      	b.n	80110ca <_dtoa_r+0x67a>
 8011034:	4615      	mov	r5, r2
 8011036:	e7f4      	b.n	8011022 <_dtoa_r+0x5d2>
 8011038:	4b05      	ldr	r3, [pc, #20]	; (8011050 <_dtoa_r+0x600>)
 801103a:	f7ef fb05 	bl	8000648 <__aeabi_dmul>
 801103e:	e9cd 0100 	strd	r0, r1, [sp]
 8011042:	e7bc      	b.n	8010fbe <_dtoa_r+0x56e>
 8011044:	080137d8 	.word	0x080137d8
 8011048:	080137b0 	.word	0x080137b0
 801104c:	3ff00000 	.word	0x3ff00000
 8011050:	40240000 	.word	0x40240000
 8011054:	401c0000 	.word	0x401c0000
 8011058:	40140000 	.word	0x40140000
 801105c:	3fe00000 	.word	0x3fe00000
 8011060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011064:	465d      	mov	r5, fp
 8011066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801106a:	4630      	mov	r0, r6
 801106c:	4639      	mov	r1, r7
 801106e:	f7ef fc15 	bl	800089c <__aeabi_ddiv>
 8011072:	f7ef fd99 	bl	8000ba8 <__aeabi_d2iz>
 8011076:	4680      	mov	r8, r0
 8011078:	f7ef fa7c 	bl	8000574 <__aeabi_i2d>
 801107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011080:	f7ef fae2 	bl	8000648 <__aeabi_dmul>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	4630      	mov	r0, r6
 801108a:	4639      	mov	r1, r7
 801108c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011090:	f7ef f922 	bl	80002d8 <__aeabi_dsub>
 8011094:	f805 6b01 	strb.w	r6, [r5], #1
 8011098:	eba5 060b 	sub.w	r6, r5, fp
 801109c:	45b1      	cmp	r9, r6
 801109e:	4602      	mov	r2, r0
 80110a0:	460b      	mov	r3, r1
 80110a2:	d139      	bne.n	8011118 <_dtoa_r+0x6c8>
 80110a4:	f7ef f91a 	bl	80002dc <__adddf3>
 80110a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110ac:	4606      	mov	r6, r0
 80110ae:	460f      	mov	r7, r1
 80110b0:	f7ef fd5a 	bl	8000b68 <__aeabi_dcmpgt>
 80110b4:	b9c8      	cbnz	r0, 80110ea <_dtoa_r+0x69a>
 80110b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110ba:	4630      	mov	r0, r6
 80110bc:	4639      	mov	r1, r7
 80110be:	f7ef fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80110c2:	b110      	cbz	r0, 80110ca <_dtoa_r+0x67a>
 80110c4:	f018 0f01 	tst.w	r8, #1
 80110c8:	d10f      	bne.n	80110ea <_dtoa_r+0x69a>
 80110ca:	9904      	ldr	r1, [sp, #16]
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 fe77 	bl	8011dc0 <_Bfree>
 80110d2:	2300      	movs	r3, #0
 80110d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110d6:	702b      	strb	r3, [r5, #0]
 80110d8:	f10a 0301 	add.w	r3, sl, #1
 80110dc:	6013      	str	r3, [r2, #0]
 80110de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f000 8241 	beq.w	8011568 <_dtoa_r+0xb18>
 80110e6:	601d      	str	r5, [r3, #0]
 80110e8:	e23e      	b.n	8011568 <_dtoa_r+0xb18>
 80110ea:	f8cd a020 	str.w	sl, [sp, #32]
 80110ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80110f2:	2a39      	cmp	r2, #57	; 0x39
 80110f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80110f8:	d108      	bne.n	801110c <_dtoa_r+0x6bc>
 80110fa:	459b      	cmp	fp, r3
 80110fc:	d10a      	bne.n	8011114 <_dtoa_r+0x6c4>
 80110fe:	9b08      	ldr	r3, [sp, #32]
 8011100:	3301      	adds	r3, #1
 8011102:	9308      	str	r3, [sp, #32]
 8011104:	2330      	movs	r3, #48	; 0x30
 8011106:	f88b 3000 	strb.w	r3, [fp]
 801110a:	465b      	mov	r3, fp
 801110c:	781a      	ldrb	r2, [r3, #0]
 801110e:	3201      	adds	r2, #1
 8011110:	701a      	strb	r2, [r3, #0]
 8011112:	e78c      	b.n	801102e <_dtoa_r+0x5de>
 8011114:	461d      	mov	r5, r3
 8011116:	e7ea      	b.n	80110ee <_dtoa_r+0x69e>
 8011118:	2200      	movs	r2, #0
 801111a:	4b9b      	ldr	r3, [pc, #620]	; (8011388 <_dtoa_r+0x938>)
 801111c:	f7ef fa94 	bl	8000648 <__aeabi_dmul>
 8011120:	2200      	movs	r2, #0
 8011122:	2300      	movs	r3, #0
 8011124:	4606      	mov	r6, r0
 8011126:	460f      	mov	r7, r1
 8011128:	f7ef fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 801112c:	2800      	cmp	r0, #0
 801112e:	d09a      	beq.n	8011066 <_dtoa_r+0x616>
 8011130:	e7cb      	b.n	80110ca <_dtoa_r+0x67a>
 8011132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011134:	2a00      	cmp	r2, #0
 8011136:	f000 808b 	beq.w	8011250 <_dtoa_r+0x800>
 801113a:	9a06      	ldr	r2, [sp, #24]
 801113c:	2a01      	cmp	r2, #1
 801113e:	dc6e      	bgt.n	801121e <_dtoa_r+0x7ce>
 8011140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011142:	2a00      	cmp	r2, #0
 8011144:	d067      	beq.n	8011216 <_dtoa_r+0x7c6>
 8011146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801114a:	9f07      	ldr	r7, [sp, #28]
 801114c:	9d05      	ldr	r5, [sp, #20]
 801114e:	9a05      	ldr	r2, [sp, #20]
 8011150:	2101      	movs	r1, #1
 8011152:	441a      	add	r2, r3
 8011154:	4620      	mov	r0, r4
 8011156:	9205      	str	r2, [sp, #20]
 8011158:	4498      	add	r8, r3
 801115a:	f000 ff0f 	bl	8011f7c <__i2b>
 801115e:	4606      	mov	r6, r0
 8011160:	2d00      	cmp	r5, #0
 8011162:	dd0c      	ble.n	801117e <_dtoa_r+0x72e>
 8011164:	f1b8 0f00 	cmp.w	r8, #0
 8011168:	dd09      	ble.n	801117e <_dtoa_r+0x72e>
 801116a:	4545      	cmp	r5, r8
 801116c:	9a05      	ldr	r2, [sp, #20]
 801116e:	462b      	mov	r3, r5
 8011170:	bfa8      	it	ge
 8011172:	4643      	movge	r3, r8
 8011174:	1ad2      	subs	r2, r2, r3
 8011176:	9205      	str	r2, [sp, #20]
 8011178:	1aed      	subs	r5, r5, r3
 801117a:	eba8 0803 	sub.w	r8, r8, r3
 801117e:	9b07      	ldr	r3, [sp, #28]
 8011180:	b1eb      	cbz	r3, 80111be <_dtoa_r+0x76e>
 8011182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011184:	2b00      	cmp	r3, #0
 8011186:	d067      	beq.n	8011258 <_dtoa_r+0x808>
 8011188:	b18f      	cbz	r7, 80111ae <_dtoa_r+0x75e>
 801118a:	4631      	mov	r1, r6
 801118c:	463a      	mov	r2, r7
 801118e:	4620      	mov	r0, r4
 8011190:	f000 ff94 	bl	80120bc <__pow5mult>
 8011194:	9a04      	ldr	r2, [sp, #16]
 8011196:	4601      	mov	r1, r0
 8011198:	4606      	mov	r6, r0
 801119a:	4620      	mov	r0, r4
 801119c:	f000 fef7 	bl	8011f8e <__multiply>
 80111a0:	9904      	ldr	r1, [sp, #16]
 80111a2:	9008      	str	r0, [sp, #32]
 80111a4:	4620      	mov	r0, r4
 80111a6:	f000 fe0b 	bl	8011dc0 <_Bfree>
 80111aa:	9b08      	ldr	r3, [sp, #32]
 80111ac:	9304      	str	r3, [sp, #16]
 80111ae:	9b07      	ldr	r3, [sp, #28]
 80111b0:	1bda      	subs	r2, r3, r7
 80111b2:	d004      	beq.n	80111be <_dtoa_r+0x76e>
 80111b4:	9904      	ldr	r1, [sp, #16]
 80111b6:	4620      	mov	r0, r4
 80111b8:	f000 ff80 	bl	80120bc <__pow5mult>
 80111bc:	9004      	str	r0, [sp, #16]
 80111be:	2101      	movs	r1, #1
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 fedb 	bl	8011f7c <__i2b>
 80111c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111c8:	4607      	mov	r7, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 81d0 	beq.w	8011570 <_dtoa_r+0xb20>
 80111d0:	461a      	mov	r2, r3
 80111d2:	4601      	mov	r1, r0
 80111d4:	4620      	mov	r0, r4
 80111d6:	f000 ff71 	bl	80120bc <__pow5mult>
 80111da:	9b06      	ldr	r3, [sp, #24]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	4607      	mov	r7, r0
 80111e0:	dc40      	bgt.n	8011264 <_dtoa_r+0x814>
 80111e2:	9b00      	ldr	r3, [sp, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d139      	bne.n	801125c <_dtoa_r+0x80c>
 80111e8:	9b01      	ldr	r3, [sp, #4]
 80111ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d136      	bne.n	8011260 <_dtoa_r+0x810>
 80111f2:	9b01      	ldr	r3, [sp, #4]
 80111f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111f8:	0d1b      	lsrs	r3, r3, #20
 80111fa:	051b      	lsls	r3, r3, #20
 80111fc:	b12b      	cbz	r3, 801120a <_dtoa_r+0x7ba>
 80111fe:	9b05      	ldr	r3, [sp, #20]
 8011200:	3301      	adds	r3, #1
 8011202:	9305      	str	r3, [sp, #20]
 8011204:	f108 0801 	add.w	r8, r8, #1
 8011208:	2301      	movs	r3, #1
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801120e:	2b00      	cmp	r3, #0
 8011210:	d12a      	bne.n	8011268 <_dtoa_r+0x818>
 8011212:	2001      	movs	r0, #1
 8011214:	e030      	b.n	8011278 <_dtoa_r+0x828>
 8011216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801121c:	e795      	b.n	801114a <_dtoa_r+0x6fa>
 801121e:	9b07      	ldr	r3, [sp, #28]
 8011220:	f109 37ff 	add.w	r7, r9, #4294967295
 8011224:	42bb      	cmp	r3, r7
 8011226:	bfbf      	itttt	lt
 8011228:	9b07      	ldrlt	r3, [sp, #28]
 801122a:	9707      	strlt	r7, [sp, #28]
 801122c:	1afa      	sublt	r2, r7, r3
 801122e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011230:	bfbb      	ittet	lt
 8011232:	189b      	addlt	r3, r3, r2
 8011234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011236:	1bdf      	subge	r7, r3, r7
 8011238:	2700      	movlt	r7, #0
 801123a:	f1b9 0f00 	cmp.w	r9, #0
 801123e:	bfb5      	itete	lt
 8011240:	9b05      	ldrlt	r3, [sp, #20]
 8011242:	9d05      	ldrge	r5, [sp, #20]
 8011244:	eba3 0509 	sublt.w	r5, r3, r9
 8011248:	464b      	movge	r3, r9
 801124a:	bfb8      	it	lt
 801124c:	2300      	movlt	r3, #0
 801124e:	e77e      	b.n	801114e <_dtoa_r+0x6fe>
 8011250:	9f07      	ldr	r7, [sp, #28]
 8011252:	9d05      	ldr	r5, [sp, #20]
 8011254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011256:	e783      	b.n	8011160 <_dtoa_r+0x710>
 8011258:	9a07      	ldr	r2, [sp, #28]
 801125a:	e7ab      	b.n	80111b4 <_dtoa_r+0x764>
 801125c:	2300      	movs	r3, #0
 801125e:	e7d4      	b.n	801120a <_dtoa_r+0x7ba>
 8011260:	9b00      	ldr	r3, [sp, #0]
 8011262:	e7d2      	b.n	801120a <_dtoa_r+0x7ba>
 8011264:	2300      	movs	r3, #0
 8011266:	9307      	str	r3, [sp, #28]
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801126e:	6918      	ldr	r0, [r3, #16]
 8011270:	f000 fe36 	bl	8011ee0 <__hi0bits>
 8011274:	f1c0 0020 	rsb	r0, r0, #32
 8011278:	4440      	add	r0, r8
 801127a:	f010 001f 	ands.w	r0, r0, #31
 801127e:	d047      	beq.n	8011310 <_dtoa_r+0x8c0>
 8011280:	f1c0 0320 	rsb	r3, r0, #32
 8011284:	2b04      	cmp	r3, #4
 8011286:	dd3b      	ble.n	8011300 <_dtoa_r+0x8b0>
 8011288:	9b05      	ldr	r3, [sp, #20]
 801128a:	f1c0 001c 	rsb	r0, r0, #28
 801128e:	4403      	add	r3, r0
 8011290:	9305      	str	r3, [sp, #20]
 8011292:	4405      	add	r5, r0
 8011294:	4480      	add	r8, r0
 8011296:	9b05      	ldr	r3, [sp, #20]
 8011298:	2b00      	cmp	r3, #0
 801129a:	dd05      	ble.n	80112a8 <_dtoa_r+0x858>
 801129c:	461a      	mov	r2, r3
 801129e:	9904      	ldr	r1, [sp, #16]
 80112a0:	4620      	mov	r0, r4
 80112a2:	f000 ff59 	bl	8012158 <__lshift>
 80112a6:	9004      	str	r0, [sp, #16]
 80112a8:	f1b8 0f00 	cmp.w	r8, #0
 80112ac:	dd05      	ble.n	80112ba <_dtoa_r+0x86a>
 80112ae:	4639      	mov	r1, r7
 80112b0:	4642      	mov	r2, r8
 80112b2:	4620      	mov	r0, r4
 80112b4:	f000 ff50 	bl	8012158 <__lshift>
 80112b8:	4607      	mov	r7, r0
 80112ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112bc:	b353      	cbz	r3, 8011314 <_dtoa_r+0x8c4>
 80112be:	4639      	mov	r1, r7
 80112c0:	9804      	ldr	r0, [sp, #16]
 80112c2:	f000 ff9d 	bl	8012200 <__mcmp>
 80112c6:	2800      	cmp	r0, #0
 80112c8:	da24      	bge.n	8011314 <_dtoa_r+0x8c4>
 80112ca:	2300      	movs	r3, #0
 80112cc:	220a      	movs	r2, #10
 80112ce:	9904      	ldr	r1, [sp, #16]
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 fd8c 	bl	8011dee <__multadd>
 80112d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d8:	9004      	str	r0, [sp, #16]
 80112da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f000 814d 	beq.w	801157e <_dtoa_r+0xb2e>
 80112e4:	2300      	movs	r3, #0
 80112e6:	4631      	mov	r1, r6
 80112e8:	220a      	movs	r2, #10
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fd7f 	bl	8011dee <__multadd>
 80112f0:	9b02      	ldr	r3, [sp, #8]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	4606      	mov	r6, r0
 80112f6:	dc4f      	bgt.n	8011398 <_dtoa_r+0x948>
 80112f8:	9b06      	ldr	r3, [sp, #24]
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	dd4c      	ble.n	8011398 <_dtoa_r+0x948>
 80112fe:	e011      	b.n	8011324 <_dtoa_r+0x8d4>
 8011300:	d0c9      	beq.n	8011296 <_dtoa_r+0x846>
 8011302:	9a05      	ldr	r2, [sp, #20]
 8011304:	331c      	adds	r3, #28
 8011306:	441a      	add	r2, r3
 8011308:	9205      	str	r2, [sp, #20]
 801130a:	441d      	add	r5, r3
 801130c:	4498      	add	r8, r3
 801130e:	e7c2      	b.n	8011296 <_dtoa_r+0x846>
 8011310:	4603      	mov	r3, r0
 8011312:	e7f6      	b.n	8011302 <_dtoa_r+0x8b2>
 8011314:	f1b9 0f00 	cmp.w	r9, #0
 8011318:	dc38      	bgt.n	801138c <_dtoa_r+0x93c>
 801131a:	9b06      	ldr	r3, [sp, #24]
 801131c:	2b02      	cmp	r3, #2
 801131e:	dd35      	ble.n	801138c <_dtoa_r+0x93c>
 8011320:	f8cd 9008 	str.w	r9, [sp, #8]
 8011324:	9b02      	ldr	r3, [sp, #8]
 8011326:	b963      	cbnz	r3, 8011342 <_dtoa_r+0x8f2>
 8011328:	4639      	mov	r1, r7
 801132a:	2205      	movs	r2, #5
 801132c:	4620      	mov	r0, r4
 801132e:	f000 fd5e 	bl	8011dee <__multadd>
 8011332:	4601      	mov	r1, r0
 8011334:	4607      	mov	r7, r0
 8011336:	9804      	ldr	r0, [sp, #16]
 8011338:	f000 ff62 	bl	8012200 <__mcmp>
 801133c:	2800      	cmp	r0, #0
 801133e:	f73f adcc 	bgt.w	8010eda <_dtoa_r+0x48a>
 8011342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011344:	465d      	mov	r5, fp
 8011346:	ea6f 0a03 	mvn.w	sl, r3
 801134a:	f04f 0900 	mov.w	r9, #0
 801134e:	4639      	mov	r1, r7
 8011350:	4620      	mov	r0, r4
 8011352:	f000 fd35 	bl	8011dc0 <_Bfree>
 8011356:	2e00      	cmp	r6, #0
 8011358:	f43f aeb7 	beq.w	80110ca <_dtoa_r+0x67a>
 801135c:	f1b9 0f00 	cmp.w	r9, #0
 8011360:	d005      	beq.n	801136e <_dtoa_r+0x91e>
 8011362:	45b1      	cmp	r9, r6
 8011364:	d003      	beq.n	801136e <_dtoa_r+0x91e>
 8011366:	4649      	mov	r1, r9
 8011368:	4620      	mov	r0, r4
 801136a:	f000 fd29 	bl	8011dc0 <_Bfree>
 801136e:	4631      	mov	r1, r6
 8011370:	4620      	mov	r0, r4
 8011372:	f000 fd25 	bl	8011dc0 <_Bfree>
 8011376:	e6a8      	b.n	80110ca <_dtoa_r+0x67a>
 8011378:	2700      	movs	r7, #0
 801137a:	463e      	mov	r6, r7
 801137c:	e7e1      	b.n	8011342 <_dtoa_r+0x8f2>
 801137e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011382:	463e      	mov	r6, r7
 8011384:	e5a9      	b.n	8010eda <_dtoa_r+0x48a>
 8011386:	bf00      	nop
 8011388:	40240000 	.word	0x40240000
 801138c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801138e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	f000 80fa 	beq.w	801158c <_dtoa_r+0xb3c>
 8011398:	2d00      	cmp	r5, #0
 801139a:	dd05      	ble.n	80113a8 <_dtoa_r+0x958>
 801139c:	4631      	mov	r1, r6
 801139e:	462a      	mov	r2, r5
 80113a0:	4620      	mov	r0, r4
 80113a2:	f000 fed9 	bl	8012158 <__lshift>
 80113a6:	4606      	mov	r6, r0
 80113a8:	9b07      	ldr	r3, [sp, #28]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d04c      	beq.n	8011448 <_dtoa_r+0x9f8>
 80113ae:	6871      	ldr	r1, [r6, #4]
 80113b0:	4620      	mov	r0, r4
 80113b2:	f000 fcd1 	bl	8011d58 <_Balloc>
 80113b6:	6932      	ldr	r2, [r6, #16]
 80113b8:	3202      	adds	r2, #2
 80113ba:	4605      	mov	r5, r0
 80113bc:	0092      	lsls	r2, r2, #2
 80113be:	f106 010c 	add.w	r1, r6, #12
 80113c2:	300c      	adds	r0, #12
 80113c4:	f7fd fa82 	bl	800e8cc <memcpy>
 80113c8:	2201      	movs	r2, #1
 80113ca:	4629      	mov	r1, r5
 80113cc:	4620      	mov	r0, r4
 80113ce:	f000 fec3 	bl	8012158 <__lshift>
 80113d2:	9b00      	ldr	r3, [sp, #0]
 80113d4:	f8cd b014 	str.w	fp, [sp, #20]
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	46b1      	mov	r9, r6
 80113de:	9307      	str	r3, [sp, #28]
 80113e0:	4606      	mov	r6, r0
 80113e2:	4639      	mov	r1, r7
 80113e4:	9804      	ldr	r0, [sp, #16]
 80113e6:	f7ff faa7 	bl	8010938 <quorem>
 80113ea:	4649      	mov	r1, r9
 80113ec:	4605      	mov	r5, r0
 80113ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80113f2:	9804      	ldr	r0, [sp, #16]
 80113f4:	f000 ff04 	bl	8012200 <__mcmp>
 80113f8:	4632      	mov	r2, r6
 80113fa:	9000      	str	r0, [sp, #0]
 80113fc:	4639      	mov	r1, r7
 80113fe:	4620      	mov	r0, r4
 8011400:	f000 ff18 	bl	8012234 <__mdiff>
 8011404:	68c3      	ldr	r3, [r0, #12]
 8011406:	4602      	mov	r2, r0
 8011408:	bb03      	cbnz	r3, 801144c <_dtoa_r+0x9fc>
 801140a:	4601      	mov	r1, r0
 801140c:	9008      	str	r0, [sp, #32]
 801140e:	9804      	ldr	r0, [sp, #16]
 8011410:	f000 fef6 	bl	8012200 <__mcmp>
 8011414:	9a08      	ldr	r2, [sp, #32]
 8011416:	4603      	mov	r3, r0
 8011418:	4611      	mov	r1, r2
 801141a:	4620      	mov	r0, r4
 801141c:	9308      	str	r3, [sp, #32]
 801141e:	f000 fccf 	bl	8011dc0 <_Bfree>
 8011422:	9b08      	ldr	r3, [sp, #32]
 8011424:	b9a3      	cbnz	r3, 8011450 <_dtoa_r+0xa00>
 8011426:	9a06      	ldr	r2, [sp, #24]
 8011428:	b992      	cbnz	r2, 8011450 <_dtoa_r+0xa00>
 801142a:	9a07      	ldr	r2, [sp, #28]
 801142c:	b982      	cbnz	r2, 8011450 <_dtoa_r+0xa00>
 801142e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011432:	d029      	beq.n	8011488 <_dtoa_r+0xa38>
 8011434:	9b00      	ldr	r3, [sp, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	dd01      	ble.n	801143e <_dtoa_r+0x9ee>
 801143a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801143e:	9b05      	ldr	r3, [sp, #20]
 8011440:	1c5d      	adds	r5, r3, #1
 8011442:	f883 8000 	strb.w	r8, [r3]
 8011446:	e782      	b.n	801134e <_dtoa_r+0x8fe>
 8011448:	4630      	mov	r0, r6
 801144a:	e7c2      	b.n	80113d2 <_dtoa_r+0x982>
 801144c:	2301      	movs	r3, #1
 801144e:	e7e3      	b.n	8011418 <_dtoa_r+0x9c8>
 8011450:	9a00      	ldr	r2, [sp, #0]
 8011452:	2a00      	cmp	r2, #0
 8011454:	db04      	blt.n	8011460 <_dtoa_r+0xa10>
 8011456:	d125      	bne.n	80114a4 <_dtoa_r+0xa54>
 8011458:	9a06      	ldr	r2, [sp, #24]
 801145a:	bb1a      	cbnz	r2, 80114a4 <_dtoa_r+0xa54>
 801145c:	9a07      	ldr	r2, [sp, #28]
 801145e:	bb0a      	cbnz	r2, 80114a4 <_dtoa_r+0xa54>
 8011460:	2b00      	cmp	r3, #0
 8011462:	ddec      	ble.n	801143e <_dtoa_r+0x9ee>
 8011464:	2201      	movs	r2, #1
 8011466:	9904      	ldr	r1, [sp, #16]
 8011468:	4620      	mov	r0, r4
 801146a:	f000 fe75 	bl	8012158 <__lshift>
 801146e:	4639      	mov	r1, r7
 8011470:	9004      	str	r0, [sp, #16]
 8011472:	f000 fec5 	bl	8012200 <__mcmp>
 8011476:	2800      	cmp	r0, #0
 8011478:	dc03      	bgt.n	8011482 <_dtoa_r+0xa32>
 801147a:	d1e0      	bne.n	801143e <_dtoa_r+0x9ee>
 801147c:	f018 0f01 	tst.w	r8, #1
 8011480:	d0dd      	beq.n	801143e <_dtoa_r+0x9ee>
 8011482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011486:	d1d8      	bne.n	801143a <_dtoa_r+0x9ea>
 8011488:	9b05      	ldr	r3, [sp, #20]
 801148a:	9a05      	ldr	r2, [sp, #20]
 801148c:	1c5d      	adds	r5, r3, #1
 801148e:	2339      	movs	r3, #57	; 0x39
 8011490:	7013      	strb	r3, [r2, #0]
 8011492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011496:	2b39      	cmp	r3, #57	; 0x39
 8011498:	f105 32ff 	add.w	r2, r5, #4294967295
 801149c:	d04f      	beq.n	801153e <_dtoa_r+0xaee>
 801149e:	3301      	adds	r3, #1
 80114a0:	7013      	strb	r3, [r2, #0]
 80114a2:	e754      	b.n	801134e <_dtoa_r+0x8fe>
 80114a4:	9a05      	ldr	r2, [sp, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f102 0501 	add.w	r5, r2, #1
 80114ac:	dd06      	ble.n	80114bc <_dtoa_r+0xa6c>
 80114ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80114b2:	d0e9      	beq.n	8011488 <_dtoa_r+0xa38>
 80114b4:	f108 0801 	add.w	r8, r8, #1
 80114b8:	9b05      	ldr	r3, [sp, #20]
 80114ba:	e7c2      	b.n	8011442 <_dtoa_r+0x9f2>
 80114bc:	9a02      	ldr	r2, [sp, #8]
 80114be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80114c2:	eba5 030b 	sub.w	r3, r5, fp
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d021      	beq.n	801150e <_dtoa_r+0xabe>
 80114ca:	2300      	movs	r3, #0
 80114cc:	220a      	movs	r2, #10
 80114ce:	9904      	ldr	r1, [sp, #16]
 80114d0:	4620      	mov	r0, r4
 80114d2:	f000 fc8c 	bl	8011dee <__multadd>
 80114d6:	45b1      	cmp	r9, r6
 80114d8:	9004      	str	r0, [sp, #16]
 80114da:	f04f 0300 	mov.w	r3, #0
 80114de:	f04f 020a 	mov.w	r2, #10
 80114e2:	4649      	mov	r1, r9
 80114e4:	4620      	mov	r0, r4
 80114e6:	d105      	bne.n	80114f4 <_dtoa_r+0xaa4>
 80114e8:	f000 fc81 	bl	8011dee <__multadd>
 80114ec:	4681      	mov	r9, r0
 80114ee:	4606      	mov	r6, r0
 80114f0:	9505      	str	r5, [sp, #20]
 80114f2:	e776      	b.n	80113e2 <_dtoa_r+0x992>
 80114f4:	f000 fc7b 	bl	8011dee <__multadd>
 80114f8:	4631      	mov	r1, r6
 80114fa:	4681      	mov	r9, r0
 80114fc:	2300      	movs	r3, #0
 80114fe:	220a      	movs	r2, #10
 8011500:	4620      	mov	r0, r4
 8011502:	f000 fc74 	bl	8011dee <__multadd>
 8011506:	4606      	mov	r6, r0
 8011508:	e7f2      	b.n	80114f0 <_dtoa_r+0xaa0>
 801150a:	f04f 0900 	mov.w	r9, #0
 801150e:	2201      	movs	r2, #1
 8011510:	9904      	ldr	r1, [sp, #16]
 8011512:	4620      	mov	r0, r4
 8011514:	f000 fe20 	bl	8012158 <__lshift>
 8011518:	4639      	mov	r1, r7
 801151a:	9004      	str	r0, [sp, #16]
 801151c:	f000 fe70 	bl	8012200 <__mcmp>
 8011520:	2800      	cmp	r0, #0
 8011522:	dcb6      	bgt.n	8011492 <_dtoa_r+0xa42>
 8011524:	d102      	bne.n	801152c <_dtoa_r+0xadc>
 8011526:	f018 0f01 	tst.w	r8, #1
 801152a:	d1b2      	bne.n	8011492 <_dtoa_r+0xa42>
 801152c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011530:	2b30      	cmp	r3, #48	; 0x30
 8011532:	f105 32ff 	add.w	r2, r5, #4294967295
 8011536:	f47f af0a 	bne.w	801134e <_dtoa_r+0x8fe>
 801153a:	4615      	mov	r5, r2
 801153c:	e7f6      	b.n	801152c <_dtoa_r+0xadc>
 801153e:	4593      	cmp	fp, r2
 8011540:	d105      	bne.n	801154e <_dtoa_r+0xafe>
 8011542:	2331      	movs	r3, #49	; 0x31
 8011544:	f10a 0a01 	add.w	sl, sl, #1
 8011548:	f88b 3000 	strb.w	r3, [fp]
 801154c:	e6ff      	b.n	801134e <_dtoa_r+0x8fe>
 801154e:	4615      	mov	r5, r2
 8011550:	e79f      	b.n	8011492 <_dtoa_r+0xa42>
 8011552:	f8df b064 	ldr.w	fp, [pc, #100]	; 80115b8 <_dtoa_r+0xb68>
 8011556:	e007      	b.n	8011568 <_dtoa_r+0xb18>
 8011558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801155a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80115bc <_dtoa_r+0xb6c>
 801155e:	b11b      	cbz	r3, 8011568 <_dtoa_r+0xb18>
 8011560:	f10b 0308 	add.w	r3, fp, #8
 8011564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011566:	6013      	str	r3, [r2, #0]
 8011568:	4658      	mov	r0, fp
 801156a:	b017      	add	sp, #92	; 0x5c
 801156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011570:	9b06      	ldr	r3, [sp, #24]
 8011572:	2b01      	cmp	r3, #1
 8011574:	f77f ae35 	ble.w	80111e2 <_dtoa_r+0x792>
 8011578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801157a:	9307      	str	r3, [sp, #28]
 801157c:	e649      	b.n	8011212 <_dtoa_r+0x7c2>
 801157e:	9b02      	ldr	r3, [sp, #8]
 8011580:	2b00      	cmp	r3, #0
 8011582:	dc03      	bgt.n	801158c <_dtoa_r+0xb3c>
 8011584:	9b06      	ldr	r3, [sp, #24]
 8011586:	2b02      	cmp	r3, #2
 8011588:	f73f aecc 	bgt.w	8011324 <_dtoa_r+0x8d4>
 801158c:	465d      	mov	r5, fp
 801158e:	4639      	mov	r1, r7
 8011590:	9804      	ldr	r0, [sp, #16]
 8011592:	f7ff f9d1 	bl	8010938 <quorem>
 8011596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801159a:	f805 8b01 	strb.w	r8, [r5], #1
 801159e:	9a02      	ldr	r2, [sp, #8]
 80115a0:	eba5 030b 	sub.w	r3, r5, fp
 80115a4:	429a      	cmp	r2, r3
 80115a6:	ddb0      	ble.n	801150a <_dtoa_r+0xaba>
 80115a8:	2300      	movs	r3, #0
 80115aa:	220a      	movs	r2, #10
 80115ac:	9904      	ldr	r1, [sp, #16]
 80115ae:	4620      	mov	r0, r4
 80115b0:	f000 fc1d 	bl	8011dee <__multadd>
 80115b4:	9004      	str	r0, [sp, #16]
 80115b6:	e7ea      	b.n	801158e <_dtoa_r+0xb3e>
 80115b8:	08013718 	.word	0x08013718
 80115bc:	08013798 	.word	0x08013798

080115c0 <rshift>:
 80115c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115c2:	6906      	ldr	r6, [r0, #16]
 80115c4:	114b      	asrs	r3, r1, #5
 80115c6:	429e      	cmp	r6, r3
 80115c8:	f100 0414 	add.w	r4, r0, #20
 80115cc:	dd30      	ble.n	8011630 <rshift+0x70>
 80115ce:	f011 011f 	ands.w	r1, r1, #31
 80115d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80115d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80115da:	d108      	bne.n	80115ee <rshift+0x2e>
 80115dc:	4621      	mov	r1, r4
 80115de:	42b2      	cmp	r2, r6
 80115e0:	460b      	mov	r3, r1
 80115e2:	d211      	bcs.n	8011608 <rshift+0x48>
 80115e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80115e8:	f841 3b04 	str.w	r3, [r1], #4
 80115ec:	e7f7      	b.n	80115de <rshift+0x1e>
 80115ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80115f2:	f1c1 0c20 	rsb	ip, r1, #32
 80115f6:	40cd      	lsrs	r5, r1
 80115f8:	3204      	adds	r2, #4
 80115fa:	4623      	mov	r3, r4
 80115fc:	42b2      	cmp	r2, r6
 80115fe:	4617      	mov	r7, r2
 8011600:	d30c      	bcc.n	801161c <rshift+0x5c>
 8011602:	601d      	str	r5, [r3, #0]
 8011604:	b105      	cbz	r5, 8011608 <rshift+0x48>
 8011606:	3304      	adds	r3, #4
 8011608:	1b1a      	subs	r2, r3, r4
 801160a:	42a3      	cmp	r3, r4
 801160c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011610:	bf08      	it	eq
 8011612:	2300      	moveq	r3, #0
 8011614:	6102      	str	r2, [r0, #16]
 8011616:	bf08      	it	eq
 8011618:	6143      	streq	r3, [r0, #20]
 801161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801161c:	683f      	ldr	r7, [r7, #0]
 801161e:	fa07 f70c 	lsl.w	r7, r7, ip
 8011622:	433d      	orrs	r5, r7
 8011624:	f843 5b04 	str.w	r5, [r3], #4
 8011628:	f852 5b04 	ldr.w	r5, [r2], #4
 801162c:	40cd      	lsrs	r5, r1
 801162e:	e7e5      	b.n	80115fc <rshift+0x3c>
 8011630:	4623      	mov	r3, r4
 8011632:	e7e9      	b.n	8011608 <rshift+0x48>

08011634 <__hexdig_fun>:
 8011634:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011638:	2b09      	cmp	r3, #9
 801163a:	d802      	bhi.n	8011642 <__hexdig_fun+0xe>
 801163c:	3820      	subs	r0, #32
 801163e:	b2c0      	uxtb	r0, r0
 8011640:	4770      	bx	lr
 8011642:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011646:	2b05      	cmp	r3, #5
 8011648:	d801      	bhi.n	801164e <__hexdig_fun+0x1a>
 801164a:	3847      	subs	r0, #71	; 0x47
 801164c:	e7f7      	b.n	801163e <__hexdig_fun+0xa>
 801164e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011652:	2b05      	cmp	r3, #5
 8011654:	d801      	bhi.n	801165a <__hexdig_fun+0x26>
 8011656:	3827      	subs	r0, #39	; 0x27
 8011658:	e7f1      	b.n	801163e <__hexdig_fun+0xa>
 801165a:	2000      	movs	r0, #0
 801165c:	4770      	bx	lr

0801165e <__gethex>:
 801165e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011662:	b08b      	sub	sp, #44	; 0x2c
 8011664:	468a      	mov	sl, r1
 8011666:	9002      	str	r0, [sp, #8]
 8011668:	9816      	ldr	r0, [sp, #88]	; 0x58
 801166a:	9306      	str	r3, [sp, #24]
 801166c:	4690      	mov	r8, r2
 801166e:	f000 fad0 	bl	8011c12 <__localeconv_l>
 8011672:	6803      	ldr	r3, [r0, #0]
 8011674:	9303      	str	r3, [sp, #12]
 8011676:	4618      	mov	r0, r3
 8011678:	f7ee fdd2 	bl	8000220 <strlen>
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	9001      	str	r0, [sp, #4]
 8011680:	4403      	add	r3, r0
 8011682:	f04f 0b00 	mov.w	fp, #0
 8011686:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801168a:	9307      	str	r3, [sp, #28]
 801168c:	f8da 3000 	ldr.w	r3, [sl]
 8011690:	3302      	adds	r3, #2
 8011692:	461f      	mov	r7, r3
 8011694:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011698:	2830      	cmp	r0, #48	; 0x30
 801169a:	d06c      	beq.n	8011776 <__gethex+0x118>
 801169c:	f7ff ffca 	bl	8011634 <__hexdig_fun>
 80116a0:	4604      	mov	r4, r0
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d16a      	bne.n	801177c <__gethex+0x11e>
 80116a6:	9a01      	ldr	r2, [sp, #4]
 80116a8:	9903      	ldr	r1, [sp, #12]
 80116aa:	4638      	mov	r0, r7
 80116ac:	f001 fa06 	bl	8012abc <strncmp>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d166      	bne.n	8011782 <__gethex+0x124>
 80116b4:	9b01      	ldr	r3, [sp, #4]
 80116b6:	5cf8      	ldrb	r0, [r7, r3]
 80116b8:	18fe      	adds	r6, r7, r3
 80116ba:	f7ff ffbb 	bl	8011634 <__hexdig_fun>
 80116be:	2800      	cmp	r0, #0
 80116c0:	d062      	beq.n	8011788 <__gethex+0x12a>
 80116c2:	4633      	mov	r3, r6
 80116c4:	7818      	ldrb	r0, [r3, #0]
 80116c6:	2830      	cmp	r0, #48	; 0x30
 80116c8:	461f      	mov	r7, r3
 80116ca:	f103 0301 	add.w	r3, r3, #1
 80116ce:	d0f9      	beq.n	80116c4 <__gethex+0x66>
 80116d0:	f7ff ffb0 	bl	8011634 <__hexdig_fun>
 80116d4:	fab0 f580 	clz	r5, r0
 80116d8:	096d      	lsrs	r5, r5, #5
 80116da:	4634      	mov	r4, r6
 80116dc:	f04f 0b01 	mov.w	fp, #1
 80116e0:	463a      	mov	r2, r7
 80116e2:	4616      	mov	r6, r2
 80116e4:	3201      	adds	r2, #1
 80116e6:	7830      	ldrb	r0, [r6, #0]
 80116e8:	f7ff ffa4 	bl	8011634 <__hexdig_fun>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d1f8      	bne.n	80116e2 <__gethex+0x84>
 80116f0:	9a01      	ldr	r2, [sp, #4]
 80116f2:	9903      	ldr	r1, [sp, #12]
 80116f4:	4630      	mov	r0, r6
 80116f6:	f001 f9e1 	bl	8012abc <strncmp>
 80116fa:	b950      	cbnz	r0, 8011712 <__gethex+0xb4>
 80116fc:	b954      	cbnz	r4, 8011714 <__gethex+0xb6>
 80116fe:	9b01      	ldr	r3, [sp, #4]
 8011700:	18f4      	adds	r4, r6, r3
 8011702:	4622      	mov	r2, r4
 8011704:	4616      	mov	r6, r2
 8011706:	3201      	adds	r2, #1
 8011708:	7830      	ldrb	r0, [r6, #0]
 801170a:	f7ff ff93 	bl	8011634 <__hexdig_fun>
 801170e:	2800      	cmp	r0, #0
 8011710:	d1f8      	bne.n	8011704 <__gethex+0xa6>
 8011712:	b10c      	cbz	r4, 8011718 <__gethex+0xba>
 8011714:	1ba4      	subs	r4, r4, r6
 8011716:	00a4      	lsls	r4, r4, #2
 8011718:	7833      	ldrb	r3, [r6, #0]
 801171a:	2b50      	cmp	r3, #80	; 0x50
 801171c:	d001      	beq.n	8011722 <__gethex+0xc4>
 801171e:	2b70      	cmp	r3, #112	; 0x70
 8011720:	d140      	bne.n	80117a4 <__gethex+0x146>
 8011722:	7873      	ldrb	r3, [r6, #1]
 8011724:	2b2b      	cmp	r3, #43	; 0x2b
 8011726:	d031      	beq.n	801178c <__gethex+0x12e>
 8011728:	2b2d      	cmp	r3, #45	; 0x2d
 801172a:	d033      	beq.n	8011794 <__gethex+0x136>
 801172c:	1c71      	adds	r1, r6, #1
 801172e:	f04f 0900 	mov.w	r9, #0
 8011732:	7808      	ldrb	r0, [r1, #0]
 8011734:	f7ff ff7e 	bl	8011634 <__hexdig_fun>
 8011738:	1e43      	subs	r3, r0, #1
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b18      	cmp	r3, #24
 801173e:	d831      	bhi.n	80117a4 <__gethex+0x146>
 8011740:	f1a0 0210 	sub.w	r2, r0, #16
 8011744:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011748:	f7ff ff74 	bl	8011634 <__hexdig_fun>
 801174c:	1e43      	subs	r3, r0, #1
 801174e:	b2db      	uxtb	r3, r3
 8011750:	2b18      	cmp	r3, #24
 8011752:	d922      	bls.n	801179a <__gethex+0x13c>
 8011754:	f1b9 0f00 	cmp.w	r9, #0
 8011758:	d000      	beq.n	801175c <__gethex+0xfe>
 801175a:	4252      	negs	r2, r2
 801175c:	4414      	add	r4, r2
 801175e:	f8ca 1000 	str.w	r1, [sl]
 8011762:	b30d      	cbz	r5, 80117a8 <__gethex+0x14a>
 8011764:	f1bb 0f00 	cmp.w	fp, #0
 8011768:	bf0c      	ite	eq
 801176a:	2706      	moveq	r7, #6
 801176c:	2700      	movne	r7, #0
 801176e:	4638      	mov	r0, r7
 8011770:	b00b      	add	sp, #44	; 0x2c
 8011772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011776:	f10b 0b01 	add.w	fp, fp, #1
 801177a:	e78a      	b.n	8011692 <__gethex+0x34>
 801177c:	2500      	movs	r5, #0
 801177e:	462c      	mov	r4, r5
 8011780:	e7ae      	b.n	80116e0 <__gethex+0x82>
 8011782:	463e      	mov	r6, r7
 8011784:	2501      	movs	r5, #1
 8011786:	e7c7      	b.n	8011718 <__gethex+0xba>
 8011788:	4604      	mov	r4, r0
 801178a:	e7fb      	b.n	8011784 <__gethex+0x126>
 801178c:	f04f 0900 	mov.w	r9, #0
 8011790:	1cb1      	adds	r1, r6, #2
 8011792:	e7ce      	b.n	8011732 <__gethex+0xd4>
 8011794:	f04f 0901 	mov.w	r9, #1
 8011798:	e7fa      	b.n	8011790 <__gethex+0x132>
 801179a:	230a      	movs	r3, #10
 801179c:	fb03 0202 	mla	r2, r3, r2, r0
 80117a0:	3a10      	subs	r2, #16
 80117a2:	e7cf      	b.n	8011744 <__gethex+0xe6>
 80117a4:	4631      	mov	r1, r6
 80117a6:	e7da      	b.n	801175e <__gethex+0x100>
 80117a8:	1bf3      	subs	r3, r6, r7
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4629      	mov	r1, r5
 80117ae:	2b07      	cmp	r3, #7
 80117b0:	dc49      	bgt.n	8011846 <__gethex+0x1e8>
 80117b2:	9802      	ldr	r0, [sp, #8]
 80117b4:	f000 fad0 	bl	8011d58 <_Balloc>
 80117b8:	9b01      	ldr	r3, [sp, #4]
 80117ba:	f100 0914 	add.w	r9, r0, #20
 80117be:	f04f 0b00 	mov.w	fp, #0
 80117c2:	f1c3 0301 	rsb	r3, r3, #1
 80117c6:	4605      	mov	r5, r0
 80117c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80117cc:	46da      	mov	sl, fp
 80117ce:	9308      	str	r3, [sp, #32]
 80117d0:	42b7      	cmp	r7, r6
 80117d2:	d33b      	bcc.n	801184c <__gethex+0x1ee>
 80117d4:	9804      	ldr	r0, [sp, #16]
 80117d6:	f840 ab04 	str.w	sl, [r0], #4
 80117da:	eba0 0009 	sub.w	r0, r0, r9
 80117de:	1080      	asrs	r0, r0, #2
 80117e0:	6128      	str	r0, [r5, #16]
 80117e2:	0147      	lsls	r7, r0, #5
 80117e4:	4650      	mov	r0, sl
 80117e6:	f000 fb7b 	bl	8011ee0 <__hi0bits>
 80117ea:	f8d8 6000 	ldr.w	r6, [r8]
 80117ee:	1a3f      	subs	r7, r7, r0
 80117f0:	42b7      	cmp	r7, r6
 80117f2:	dd64      	ble.n	80118be <__gethex+0x260>
 80117f4:	1bbf      	subs	r7, r7, r6
 80117f6:	4639      	mov	r1, r7
 80117f8:	4628      	mov	r0, r5
 80117fa:	f000 fe8b 	bl	8012514 <__any_on>
 80117fe:	4682      	mov	sl, r0
 8011800:	b178      	cbz	r0, 8011822 <__gethex+0x1c4>
 8011802:	1e7b      	subs	r3, r7, #1
 8011804:	1159      	asrs	r1, r3, #5
 8011806:	f003 021f 	and.w	r2, r3, #31
 801180a:	f04f 0a01 	mov.w	sl, #1
 801180e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011812:	fa0a f202 	lsl.w	r2, sl, r2
 8011816:	420a      	tst	r2, r1
 8011818:	d003      	beq.n	8011822 <__gethex+0x1c4>
 801181a:	4553      	cmp	r3, sl
 801181c:	dc46      	bgt.n	80118ac <__gethex+0x24e>
 801181e:	f04f 0a02 	mov.w	sl, #2
 8011822:	4639      	mov	r1, r7
 8011824:	4628      	mov	r0, r5
 8011826:	f7ff fecb 	bl	80115c0 <rshift>
 801182a:	443c      	add	r4, r7
 801182c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011830:	42a3      	cmp	r3, r4
 8011832:	da52      	bge.n	80118da <__gethex+0x27c>
 8011834:	4629      	mov	r1, r5
 8011836:	9802      	ldr	r0, [sp, #8]
 8011838:	f000 fac2 	bl	8011dc0 <_Bfree>
 801183c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801183e:	2300      	movs	r3, #0
 8011840:	6013      	str	r3, [r2, #0]
 8011842:	27a3      	movs	r7, #163	; 0xa3
 8011844:	e793      	b.n	801176e <__gethex+0x110>
 8011846:	3101      	adds	r1, #1
 8011848:	105b      	asrs	r3, r3, #1
 801184a:	e7b0      	b.n	80117ae <__gethex+0x150>
 801184c:	1e73      	subs	r3, r6, #1
 801184e:	9305      	str	r3, [sp, #20]
 8011850:	9a07      	ldr	r2, [sp, #28]
 8011852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011856:	4293      	cmp	r3, r2
 8011858:	d018      	beq.n	801188c <__gethex+0x22e>
 801185a:	f1bb 0f20 	cmp.w	fp, #32
 801185e:	d107      	bne.n	8011870 <__gethex+0x212>
 8011860:	9b04      	ldr	r3, [sp, #16]
 8011862:	f8c3 a000 	str.w	sl, [r3]
 8011866:	3304      	adds	r3, #4
 8011868:	f04f 0a00 	mov.w	sl, #0
 801186c:	9304      	str	r3, [sp, #16]
 801186e:	46d3      	mov	fp, sl
 8011870:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011874:	f7ff fede 	bl	8011634 <__hexdig_fun>
 8011878:	f000 000f 	and.w	r0, r0, #15
 801187c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011880:	ea4a 0a00 	orr.w	sl, sl, r0
 8011884:	f10b 0b04 	add.w	fp, fp, #4
 8011888:	9b05      	ldr	r3, [sp, #20]
 801188a:	e00d      	b.n	80118a8 <__gethex+0x24a>
 801188c:	9b05      	ldr	r3, [sp, #20]
 801188e:	9a08      	ldr	r2, [sp, #32]
 8011890:	4413      	add	r3, r2
 8011892:	42bb      	cmp	r3, r7
 8011894:	d3e1      	bcc.n	801185a <__gethex+0x1fc>
 8011896:	4618      	mov	r0, r3
 8011898:	9a01      	ldr	r2, [sp, #4]
 801189a:	9903      	ldr	r1, [sp, #12]
 801189c:	9309      	str	r3, [sp, #36]	; 0x24
 801189e:	f001 f90d 	bl	8012abc <strncmp>
 80118a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d1d8      	bne.n	801185a <__gethex+0x1fc>
 80118a8:	461e      	mov	r6, r3
 80118aa:	e791      	b.n	80117d0 <__gethex+0x172>
 80118ac:	1eb9      	subs	r1, r7, #2
 80118ae:	4628      	mov	r0, r5
 80118b0:	f000 fe30 	bl	8012514 <__any_on>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d0b2      	beq.n	801181e <__gethex+0x1c0>
 80118b8:	f04f 0a03 	mov.w	sl, #3
 80118bc:	e7b1      	b.n	8011822 <__gethex+0x1c4>
 80118be:	da09      	bge.n	80118d4 <__gethex+0x276>
 80118c0:	1bf7      	subs	r7, r6, r7
 80118c2:	4629      	mov	r1, r5
 80118c4:	463a      	mov	r2, r7
 80118c6:	9802      	ldr	r0, [sp, #8]
 80118c8:	f000 fc46 	bl	8012158 <__lshift>
 80118cc:	1be4      	subs	r4, r4, r7
 80118ce:	4605      	mov	r5, r0
 80118d0:	f100 0914 	add.w	r9, r0, #20
 80118d4:	f04f 0a00 	mov.w	sl, #0
 80118d8:	e7a8      	b.n	801182c <__gethex+0x1ce>
 80118da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80118de:	42a0      	cmp	r0, r4
 80118e0:	dd6a      	ble.n	80119b8 <__gethex+0x35a>
 80118e2:	1b04      	subs	r4, r0, r4
 80118e4:	42a6      	cmp	r6, r4
 80118e6:	dc2e      	bgt.n	8011946 <__gethex+0x2e8>
 80118e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	d022      	beq.n	8011936 <__gethex+0x2d8>
 80118f0:	2b03      	cmp	r3, #3
 80118f2:	d024      	beq.n	801193e <__gethex+0x2e0>
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d115      	bne.n	8011924 <__gethex+0x2c6>
 80118f8:	42a6      	cmp	r6, r4
 80118fa:	d113      	bne.n	8011924 <__gethex+0x2c6>
 80118fc:	2e01      	cmp	r6, #1
 80118fe:	dc0b      	bgt.n	8011918 <__gethex+0x2ba>
 8011900:	9a06      	ldr	r2, [sp, #24]
 8011902:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	2301      	movs	r3, #1
 801190a:	612b      	str	r3, [r5, #16]
 801190c:	f8c9 3000 	str.w	r3, [r9]
 8011910:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011912:	2762      	movs	r7, #98	; 0x62
 8011914:	601d      	str	r5, [r3, #0]
 8011916:	e72a      	b.n	801176e <__gethex+0x110>
 8011918:	1e71      	subs	r1, r6, #1
 801191a:	4628      	mov	r0, r5
 801191c:	f000 fdfa 	bl	8012514 <__any_on>
 8011920:	2800      	cmp	r0, #0
 8011922:	d1ed      	bne.n	8011900 <__gethex+0x2a2>
 8011924:	4629      	mov	r1, r5
 8011926:	9802      	ldr	r0, [sp, #8]
 8011928:	f000 fa4a 	bl	8011dc0 <_Bfree>
 801192c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801192e:	2300      	movs	r3, #0
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	2750      	movs	r7, #80	; 0x50
 8011934:	e71b      	b.n	801176e <__gethex+0x110>
 8011936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011938:	2b00      	cmp	r3, #0
 801193a:	d0e1      	beq.n	8011900 <__gethex+0x2a2>
 801193c:	e7f2      	b.n	8011924 <__gethex+0x2c6>
 801193e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011940:	2b00      	cmp	r3, #0
 8011942:	d1dd      	bne.n	8011900 <__gethex+0x2a2>
 8011944:	e7ee      	b.n	8011924 <__gethex+0x2c6>
 8011946:	1e67      	subs	r7, r4, #1
 8011948:	f1ba 0f00 	cmp.w	sl, #0
 801194c:	d131      	bne.n	80119b2 <__gethex+0x354>
 801194e:	b127      	cbz	r7, 801195a <__gethex+0x2fc>
 8011950:	4639      	mov	r1, r7
 8011952:	4628      	mov	r0, r5
 8011954:	f000 fdde 	bl	8012514 <__any_on>
 8011958:	4682      	mov	sl, r0
 801195a:	117a      	asrs	r2, r7, #5
 801195c:	2301      	movs	r3, #1
 801195e:	f007 071f 	and.w	r7, r7, #31
 8011962:	fa03 f707 	lsl.w	r7, r3, r7
 8011966:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801196a:	4621      	mov	r1, r4
 801196c:	421f      	tst	r7, r3
 801196e:	4628      	mov	r0, r5
 8011970:	bf18      	it	ne
 8011972:	f04a 0a02 	orrne.w	sl, sl, #2
 8011976:	1b36      	subs	r6, r6, r4
 8011978:	f7ff fe22 	bl	80115c0 <rshift>
 801197c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011980:	2702      	movs	r7, #2
 8011982:	f1ba 0f00 	cmp.w	sl, #0
 8011986:	d048      	beq.n	8011a1a <__gethex+0x3bc>
 8011988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801198c:	2b02      	cmp	r3, #2
 801198e:	d015      	beq.n	80119bc <__gethex+0x35e>
 8011990:	2b03      	cmp	r3, #3
 8011992:	d017      	beq.n	80119c4 <__gethex+0x366>
 8011994:	2b01      	cmp	r3, #1
 8011996:	d109      	bne.n	80119ac <__gethex+0x34e>
 8011998:	f01a 0f02 	tst.w	sl, #2
 801199c:	d006      	beq.n	80119ac <__gethex+0x34e>
 801199e:	f8d9 3000 	ldr.w	r3, [r9]
 80119a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80119a6:	f01a 0f01 	tst.w	sl, #1
 80119aa:	d10e      	bne.n	80119ca <__gethex+0x36c>
 80119ac:	f047 0710 	orr.w	r7, r7, #16
 80119b0:	e033      	b.n	8011a1a <__gethex+0x3bc>
 80119b2:	f04f 0a01 	mov.w	sl, #1
 80119b6:	e7d0      	b.n	801195a <__gethex+0x2fc>
 80119b8:	2701      	movs	r7, #1
 80119ba:	e7e2      	b.n	8011982 <__gethex+0x324>
 80119bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119be:	f1c3 0301 	rsb	r3, r3, #1
 80119c2:	9315      	str	r3, [sp, #84]	; 0x54
 80119c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d0f0      	beq.n	80119ac <__gethex+0x34e>
 80119ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80119ce:	f105 0314 	add.w	r3, r5, #20
 80119d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80119d6:	eb03 010a 	add.w	r1, r3, sl
 80119da:	f04f 0c00 	mov.w	ip, #0
 80119de:	4618      	mov	r0, r3
 80119e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80119e8:	d01c      	beq.n	8011a24 <__gethex+0x3c6>
 80119ea:	3201      	adds	r2, #1
 80119ec:	6002      	str	r2, [r0, #0]
 80119ee:	2f02      	cmp	r7, #2
 80119f0:	f105 0314 	add.w	r3, r5, #20
 80119f4:	d138      	bne.n	8011a68 <__gethex+0x40a>
 80119f6:	f8d8 2000 	ldr.w	r2, [r8]
 80119fa:	3a01      	subs	r2, #1
 80119fc:	42b2      	cmp	r2, r6
 80119fe:	d10a      	bne.n	8011a16 <__gethex+0x3b8>
 8011a00:	1171      	asrs	r1, r6, #5
 8011a02:	2201      	movs	r2, #1
 8011a04:	f006 061f 	and.w	r6, r6, #31
 8011a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a0c:	fa02 f606 	lsl.w	r6, r2, r6
 8011a10:	421e      	tst	r6, r3
 8011a12:	bf18      	it	ne
 8011a14:	4617      	movne	r7, r2
 8011a16:	f047 0720 	orr.w	r7, r7, #32
 8011a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a1c:	601d      	str	r5, [r3, #0]
 8011a1e:	9b06      	ldr	r3, [sp, #24]
 8011a20:	601c      	str	r4, [r3, #0]
 8011a22:	e6a4      	b.n	801176e <__gethex+0x110>
 8011a24:	4299      	cmp	r1, r3
 8011a26:	f843 cc04 	str.w	ip, [r3, #-4]
 8011a2a:	d8d8      	bhi.n	80119de <__gethex+0x380>
 8011a2c:	68ab      	ldr	r3, [r5, #8]
 8011a2e:	4599      	cmp	r9, r3
 8011a30:	db12      	blt.n	8011a58 <__gethex+0x3fa>
 8011a32:	6869      	ldr	r1, [r5, #4]
 8011a34:	9802      	ldr	r0, [sp, #8]
 8011a36:	3101      	adds	r1, #1
 8011a38:	f000 f98e 	bl	8011d58 <_Balloc>
 8011a3c:	692a      	ldr	r2, [r5, #16]
 8011a3e:	3202      	adds	r2, #2
 8011a40:	f105 010c 	add.w	r1, r5, #12
 8011a44:	4683      	mov	fp, r0
 8011a46:	0092      	lsls	r2, r2, #2
 8011a48:	300c      	adds	r0, #12
 8011a4a:	f7fc ff3f 	bl	800e8cc <memcpy>
 8011a4e:	4629      	mov	r1, r5
 8011a50:	9802      	ldr	r0, [sp, #8]
 8011a52:	f000 f9b5 	bl	8011dc0 <_Bfree>
 8011a56:	465d      	mov	r5, fp
 8011a58:	692b      	ldr	r3, [r5, #16]
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a60:	612a      	str	r2, [r5, #16]
 8011a62:	2201      	movs	r2, #1
 8011a64:	615a      	str	r2, [r3, #20]
 8011a66:	e7c2      	b.n	80119ee <__gethex+0x390>
 8011a68:	692a      	ldr	r2, [r5, #16]
 8011a6a:	454a      	cmp	r2, r9
 8011a6c:	dd0b      	ble.n	8011a86 <__gethex+0x428>
 8011a6e:	2101      	movs	r1, #1
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff fda5 	bl	80115c0 <rshift>
 8011a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a7a:	3401      	adds	r4, #1
 8011a7c:	42a3      	cmp	r3, r4
 8011a7e:	f6ff aed9 	blt.w	8011834 <__gethex+0x1d6>
 8011a82:	2701      	movs	r7, #1
 8011a84:	e7c7      	b.n	8011a16 <__gethex+0x3b8>
 8011a86:	f016 061f 	ands.w	r6, r6, #31
 8011a8a:	d0fa      	beq.n	8011a82 <__gethex+0x424>
 8011a8c:	449a      	add	sl, r3
 8011a8e:	f1c6 0620 	rsb	r6, r6, #32
 8011a92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011a96:	f000 fa23 	bl	8011ee0 <__hi0bits>
 8011a9a:	42b0      	cmp	r0, r6
 8011a9c:	dbe7      	blt.n	8011a6e <__gethex+0x410>
 8011a9e:	e7f0      	b.n	8011a82 <__gethex+0x424>

08011aa0 <L_shift>:
 8011aa0:	f1c2 0208 	rsb	r2, r2, #8
 8011aa4:	0092      	lsls	r2, r2, #2
 8011aa6:	b570      	push	{r4, r5, r6, lr}
 8011aa8:	f1c2 0620 	rsb	r6, r2, #32
 8011aac:	6843      	ldr	r3, [r0, #4]
 8011aae:	6804      	ldr	r4, [r0, #0]
 8011ab0:	fa03 f506 	lsl.w	r5, r3, r6
 8011ab4:	432c      	orrs	r4, r5
 8011ab6:	40d3      	lsrs	r3, r2
 8011ab8:	6004      	str	r4, [r0, #0]
 8011aba:	f840 3f04 	str.w	r3, [r0, #4]!
 8011abe:	4288      	cmp	r0, r1
 8011ac0:	d3f4      	bcc.n	8011aac <L_shift+0xc>
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}

08011ac4 <__match>:
 8011ac4:	b530      	push	{r4, r5, lr}
 8011ac6:	6803      	ldr	r3, [r0, #0]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ace:	b914      	cbnz	r4, 8011ad6 <__match+0x12>
 8011ad0:	6003      	str	r3, [r0, #0]
 8011ad2:	2001      	movs	r0, #1
 8011ad4:	bd30      	pop	{r4, r5, pc}
 8011ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ada:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011ade:	2d19      	cmp	r5, #25
 8011ae0:	bf98      	it	ls
 8011ae2:	3220      	addls	r2, #32
 8011ae4:	42a2      	cmp	r2, r4
 8011ae6:	d0f0      	beq.n	8011aca <__match+0x6>
 8011ae8:	2000      	movs	r0, #0
 8011aea:	e7f3      	b.n	8011ad4 <__match+0x10>

08011aec <__hexnan>:
 8011aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af0:	680b      	ldr	r3, [r1, #0]
 8011af2:	6801      	ldr	r1, [r0, #0]
 8011af4:	115f      	asrs	r7, r3, #5
 8011af6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011afa:	f013 031f 	ands.w	r3, r3, #31
 8011afe:	b087      	sub	sp, #28
 8011b00:	bf18      	it	ne
 8011b02:	3704      	addne	r7, #4
 8011b04:	2500      	movs	r5, #0
 8011b06:	1f3e      	subs	r6, r7, #4
 8011b08:	4682      	mov	sl, r0
 8011b0a:	4690      	mov	r8, r2
 8011b0c:	9301      	str	r3, [sp, #4]
 8011b0e:	f847 5c04 	str.w	r5, [r7, #-4]
 8011b12:	46b1      	mov	r9, r6
 8011b14:	4634      	mov	r4, r6
 8011b16:	9502      	str	r5, [sp, #8]
 8011b18:	46ab      	mov	fp, r5
 8011b1a:	784a      	ldrb	r2, [r1, #1]
 8011b1c:	1c4b      	adds	r3, r1, #1
 8011b1e:	9303      	str	r3, [sp, #12]
 8011b20:	b342      	cbz	r2, 8011b74 <__hexnan+0x88>
 8011b22:	4610      	mov	r0, r2
 8011b24:	9105      	str	r1, [sp, #20]
 8011b26:	9204      	str	r2, [sp, #16]
 8011b28:	f7ff fd84 	bl	8011634 <__hexdig_fun>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d143      	bne.n	8011bb8 <__hexnan+0xcc>
 8011b30:	9a04      	ldr	r2, [sp, #16]
 8011b32:	9905      	ldr	r1, [sp, #20]
 8011b34:	2a20      	cmp	r2, #32
 8011b36:	d818      	bhi.n	8011b6a <__hexnan+0x7e>
 8011b38:	9b02      	ldr	r3, [sp, #8]
 8011b3a:	459b      	cmp	fp, r3
 8011b3c:	dd13      	ble.n	8011b66 <__hexnan+0x7a>
 8011b3e:	454c      	cmp	r4, r9
 8011b40:	d206      	bcs.n	8011b50 <__hexnan+0x64>
 8011b42:	2d07      	cmp	r5, #7
 8011b44:	dc04      	bgt.n	8011b50 <__hexnan+0x64>
 8011b46:	462a      	mov	r2, r5
 8011b48:	4649      	mov	r1, r9
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f7ff ffa8 	bl	8011aa0 <L_shift>
 8011b50:	4544      	cmp	r4, r8
 8011b52:	d944      	bls.n	8011bde <__hexnan+0xf2>
 8011b54:	2300      	movs	r3, #0
 8011b56:	f1a4 0904 	sub.w	r9, r4, #4
 8011b5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b5e:	f8cd b008 	str.w	fp, [sp, #8]
 8011b62:	464c      	mov	r4, r9
 8011b64:	461d      	mov	r5, r3
 8011b66:	9903      	ldr	r1, [sp, #12]
 8011b68:	e7d7      	b.n	8011b1a <__hexnan+0x2e>
 8011b6a:	2a29      	cmp	r2, #41	; 0x29
 8011b6c:	d14a      	bne.n	8011c04 <__hexnan+0x118>
 8011b6e:	3102      	adds	r1, #2
 8011b70:	f8ca 1000 	str.w	r1, [sl]
 8011b74:	f1bb 0f00 	cmp.w	fp, #0
 8011b78:	d044      	beq.n	8011c04 <__hexnan+0x118>
 8011b7a:	454c      	cmp	r4, r9
 8011b7c:	d206      	bcs.n	8011b8c <__hexnan+0xa0>
 8011b7e:	2d07      	cmp	r5, #7
 8011b80:	dc04      	bgt.n	8011b8c <__hexnan+0xa0>
 8011b82:	462a      	mov	r2, r5
 8011b84:	4649      	mov	r1, r9
 8011b86:	4620      	mov	r0, r4
 8011b88:	f7ff ff8a 	bl	8011aa0 <L_shift>
 8011b8c:	4544      	cmp	r4, r8
 8011b8e:	d928      	bls.n	8011be2 <__hexnan+0xf6>
 8011b90:	4643      	mov	r3, r8
 8011b92:	f854 2b04 	ldr.w	r2, [r4], #4
 8011b96:	f843 2b04 	str.w	r2, [r3], #4
 8011b9a:	42a6      	cmp	r6, r4
 8011b9c:	d2f9      	bcs.n	8011b92 <__hexnan+0xa6>
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f843 2b04 	str.w	r2, [r3], #4
 8011ba4:	429e      	cmp	r6, r3
 8011ba6:	d2fb      	bcs.n	8011ba0 <__hexnan+0xb4>
 8011ba8:	6833      	ldr	r3, [r6, #0]
 8011baa:	b91b      	cbnz	r3, 8011bb4 <__hexnan+0xc8>
 8011bac:	4546      	cmp	r6, r8
 8011bae:	d127      	bne.n	8011c00 <__hexnan+0x114>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	6033      	str	r3, [r6, #0]
 8011bb4:	2005      	movs	r0, #5
 8011bb6:	e026      	b.n	8011c06 <__hexnan+0x11a>
 8011bb8:	3501      	adds	r5, #1
 8011bba:	2d08      	cmp	r5, #8
 8011bbc:	f10b 0b01 	add.w	fp, fp, #1
 8011bc0:	dd06      	ble.n	8011bd0 <__hexnan+0xe4>
 8011bc2:	4544      	cmp	r4, r8
 8011bc4:	d9cf      	bls.n	8011b66 <__hexnan+0x7a>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bcc:	2501      	movs	r5, #1
 8011bce:	3c04      	subs	r4, #4
 8011bd0:	6822      	ldr	r2, [r4, #0]
 8011bd2:	f000 000f 	and.w	r0, r0, #15
 8011bd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011bda:	6020      	str	r0, [r4, #0]
 8011bdc:	e7c3      	b.n	8011b66 <__hexnan+0x7a>
 8011bde:	2508      	movs	r5, #8
 8011be0:	e7c1      	b.n	8011b66 <__hexnan+0x7a>
 8011be2:	9b01      	ldr	r3, [sp, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d0df      	beq.n	8011ba8 <__hexnan+0xbc>
 8011be8:	f04f 32ff 	mov.w	r2, #4294967295
 8011bec:	f1c3 0320 	rsb	r3, r3, #32
 8011bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8011bf4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011bf8:	401a      	ands	r2, r3
 8011bfa:	f847 2c04 	str.w	r2, [r7, #-4]
 8011bfe:	e7d3      	b.n	8011ba8 <__hexnan+0xbc>
 8011c00:	3e04      	subs	r6, #4
 8011c02:	e7d1      	b.n	8011ba8 <__hexnan+0xbc>
 8011c04:	2004      	movs	r0, #4
 8011c06:	b007      	add	sp, #28
 8011c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c0c <__locale_ctype_ptr_l>:
 8011c0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011c10:	4770      	bx	lr

08011c12 <__localeconv_l>:
 8011c12:	30f0      	adds	r0, #240	; 0xf0
 8011c14:	4770      	bx	lr
	...

08011c18 <_localeconv_r>:
 8011c18:	4b04      	ldr	r3, [pc, #16]	; (8011c2c <_localeconv_r+0x14>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6a18      	ldr	r0, [r3, #32]
 8011c1e:	4b04      	ldr	r3, [pc, #16]	; (8011c30 <_localeconv_r+0x18>)
 8011c20:	2800      	cmp	r0, #0
 8011c22:	bf08      	it	eq
 8011c24:	4618      	moveq	r0, r3
 8011c26:	30f0      	adds	r0, #240	; 0xf0
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	20000028 	.word	0x20000028
 8011c30:	2000008c 	.word	0x2000008c

08011c34 <_lseek_r>:
 8011c34:	b538      	push	{r3, r4, r5, lr}
 8011c36:	4c07      	ldr	r4, [pc, #28]	; (8011c54 <_lseek_r+0x20>)
 8011c38:	4605      	mov	r5, r0
 8011c3a:	4608      	mov	r0, r1
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	6022      	str	r2, [r4, #0]
 8011c42:	461a      	mov	r2, r3
 8011c44:	f7fa fd34 	bl	800c6b0 <_lseek>
 8011c48:	1c43      	adds	r3, r0, #1
 8011c4a:	d102      	bne.n	8011c52 <_lseek_r+0x1e>
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	b103      	cbz	r3, 8011c52 <_lseek_r+0x1e>
 8011c50:	602b      	str	r3, [r5, #0]
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	2001bf58 	.word	0x2001bf58

08011c58 <__swhatbuf_r>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	460e      	mov	r6, r1
 8011c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c60:	2900      	cmp	r1, #0
 8011c62:	b096      	sub	sp, #88	; 0x58
 8011c64:	4614      	mov	r4, r2
 8011c66:	461d      	mov	r5, r3
 8011c68:	da07      	bge.n	8011c7a <__swhatbuf_r+0x22>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	89b3      	ldrh	r3, [r6, #12]
 8011c70:	061a      	lsls	r2, r3, #24
 8011c72:	d410      	bmi.n	8011c96 <__swhatbuf_r+0x3e>
 8011c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c78:	e00e      	b.n	8011c98 <__swhatbuf_r+0x40>
 8011c7a:	466a      	mov	r2, sp
 8011c7c:	f000 ff3e 	bl	8012afc <_fstat_r>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	dbf2      	blt.n	8011c6a <__swhatbuf_r+0x12>
 8011c84:	9a01      	ldr	r2, [sp, #4]
 8011c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c8e:	425a      	negs	r2, r3
 8011c90:	415a      	adcs	r2, r3
 8011c92:	602a      	str	r2, [r5, #0]
 8011c94:	e7ee      	b.n	8011c74 <__swhatbuf_r+0x1c>
 8011c96:	2340      	movs	r3, #64	; 0x40
 8011c98:	2000      	movs	r0, #0
 8011c9a:	6023      	str	r3, [r4, #0]
 8011c9c:	b016      	add	sp, #88	; 0x58
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}

08011ca0 <__smakebuf_r>:
 8011ca0:	898b      	ldrh	r3, [r1, #12]
 8011ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ca4:	079d      	lsls	r5, r3, #30
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460c      	mov	r4, r1
 8011caa:	d507      	bpl.n	8011cbc <__smakebuf_r+0x1c>
 8011cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	6123      	str	r3, [r4, #16]
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	6163      	str	r3, [r4, #20]
 8011cb8:	b002      	add	sp, #8
 8011cba:	bd70      	pop	{r4, r5, r6, pc}
 8011cbc:	ab01      	add	r3, sp, #4
 8011cbe:	466a      	mov	r2, sp
 8011cc0:	f7ff ffca 	bl	8011c58 <__swhatbuf_r>
 8011cc4:	9900      	ldr	r1, [sp, #0]
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	4630      	mov	r0, r6
 8011cca:	f7fc fe61 	bl	800e990 <_malloc_r>
 8011cce:	b948      	cbnz	r0, 8011ce4 <__smakebuf_r+0x44>
 8011cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cd4:	059a      	lsls	r2, r3, #22
 8011cd6:	d4ef      	bmi.n	8011cb8 <__smakebuf_r+0x18>
 8011cd8:	f023 0303 	bic.w	r3, r3, #3
 8011cdc:	f043 0302 	orr.w	r3, r3, #2
 8011ce0:	81a3      	strh	r3, [r4, #12]
 8011ce2:	e7e3      	b.n	8011cac <__smakebuf_r+0xc>
 8011ce4:	4b0d      	ldr	r3, [pc, #52]	; (8011d1c <__smakebuf_r+0x7c>)
 8011ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ce8:	89a3      	ldrh	r3, [r4, #12]
 8011cea:	6020      	str	r0, [r4, #0]
 8011cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf0:	81a3      	strh	r3, [r4, #12]
 8011cf2:	9b00      	ldr	r3, [sp, #0]
 8011cf4:	6163      	str	r3, [r4, #20]
 8011cf6:	9b01      	ldr	r3, [sp, #4]
 8011cf8:	6120      	str	r0, [r4, #16]
 8011cfa:	b15b      	cbz	r3, 8011d14 <__smakebuf_r+0x74>
 8011cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d00:	4630      	mov	r0, r6
 8011d02:	f000 ff0d 	bl	8012b20 <_isatty_r>
 8011d06:	b128      	cbz	r0, 8011d14 <__smakebuf_r+0x74>
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	f023 0303 	bic.w	r3, r3, #3
 8011d0e:	f043 0301 	orr.w	r3, r3, #1
 8011d12:	81a3      	strh	r3, [r4, #12]
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	431d      	orrs	r5, r3
 8011d18:	81a5      	strh	r5, [r4, #12]
 8011d1a:	e7cd      	b.n	8011cb8 <__smakebuf_r+0x18>
 8011d1c:	0800e739 	.word	0x0800e739

08011d20 <malloc>:
 8011d20:	4b02      	ldr	r3, [pc, #8]	; (8011d2c <malloc+0xc>)
 8011d22:	4601      	mov	r1, r0
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	f7fc be33 	b.w	800e990 <_malloc_r>
 8011d2a:	bf00      	nop
 8011d2c:	20000028 	.word	0x20000028

08011d30 <__ascii_mbtowc>:
 8011d30:	b082      	sub	sp, #8
 8011d32:	b901      	cbnz	r1, 8011d36 <__ascii_mbtowc+0x6>
 8011d34:	a901      	add	r1, sp, #4
 8011d36:	b142      	cbz	r2, 8011d4a <__ascii_mbtowc+0x1a>
 8011d38:	b14b      	cbz	r3, 8011d4e <__ascii_mbtowc+0x1e>
 8011d3a:	7813      	ldrb	r3, [r2, #0]
 8011d3c:	600b      	str	r3, [r1, #0]
 8011d3e:	7812      	ldrb	r2, [r2, #0]
 8011d40:	1c10      	adds	r0, r2, #0
 8011d42:	bf18      	it	ne
 8011d44:	2001      	movne	r0, #1
 8011d46:	b002      	add	sp, #8
 8011d48:	4770      	bx	lr
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	e7fb      	b.n	8011d46 <__ascii_mbtowc+0x16>
 8011d4e:	f06f 0001 	mvn.w	r0, #1
 8011d52:	e7f8      	b.n	8011d46 <__ascii_mbtowc+0x16>

08011d54 <__malloc_lock>:
 8011d54:	4770      	bx	lr

08011d56 <__malloc_unlock>:
 8011d56:	4770      	bx	lr

08011d58 <_Balloc>:
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	460e      	mov	r6, r1
 8011d60:	b93d      	cbnz	r5, 8011d72 <_Balloc+0x1a>
 8011d62:	2010      	movs	r0, #16
 8011d64:	f7ff ffdc 	bl	8011d20 <malloc>
 8011d68:	6260      	str	r0, [r4, #36]	; 0x24
 8011d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011d6e:	6005      	str	r5, [r0, #0]
 8011d70:	60c5      	str	r5, [r0, #12]
 8011d72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011d74:	68eb      	ldr	r3, [r5, #12]
 8011d76:	b183      	cbz	r3, 8011d9a <_Balloc+0x42>
 8011d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d80:	b9b8      	cbnz	r0, 8011db2 <_Balloc+0x5a>
 8011d82:	2101      	movs	r1, #1
 8011d84:	fa01 f506 	lsl.w	r5, r1, r6
 8011d88:	1d6a      	adds	r2, r5, #5
 8011d8a:	0092      	lsls	r2, r2, #2
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f000 fbe2 	bl	8012556 <_calloc_r>
 8011d92:	b160      	cbz	r0, 8011dae <_Balloc+0x56>
 8011d94:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011d98:	e00e      	b.n	8011db8 <_Balloc+0x60>
 8011d9a:	2221      	movs	r2, #33	; 0x21
 8011d9c:	2104      	movs	r1, #4
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fbd9 	bl	8012556 <_calloc_r>
 8011da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011da6:	60e8      	str	r0, [r5, #12]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1e4      	bne.n	8011d78 <_Balloc+0x20>
 8011dae:	2000      	movs	r0, #0
 8011db0:	bd70      	pop	{r4, r5, r6, pc}
 8011db2:	6802      	ldr	r2, [r0, #0]
 8011db4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011db8:	2300      	movs	r3, #0
 8011dba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011dbe:	e7f7      	b.n	8011db0 <_Balloc+0x58>

08011dc0 <_Bfree>:
 8011dc0:	b570      	push	{r4, r5, r6, lr}
 8011dc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	460d      	mov	r5, r1
 8011dc8:	b93c      	cbnz	r4, 8011dda <_Bfree+0x1a>
 8011dca:	2010      	movs	r0, #16
 8011dcc:	f7ff ffa8 	bl	8011d20 <malloc>
 8011dd0:	6270      	str	r0, [r6, #36]	; 0x24
 8011dd2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011dd6:	6004      	str	r4, [r0, #0]
 8011dd8:	60c4      	str	r4, [r0, #12]
 8011dda:	b13d      	cbz	r5, 8011dec <_Bfree+0x2c>
 8011ddc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011dde:	686a      	ldr	r2, [r5, #4]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011de6:	6029      	str	r1, [r5, #0]
 8011de8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011dec:	bd70      	pop	{r4, r5, r6, pc}

08011dee <__multadd>:
 8011dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df2:	690d      	ldr	r5, [r1, #16]
 8011df4:	461f      	mov	r7, r3
 8011df6:	4606      	mov	r6, r0
 8011df8:	460c      	mov	r4, r1
 8011dfa:	f101 0c14 	add.w	ip, r1, #20
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f8dc 0000 	ldr.w	r0, [ip]
 8011e04:	b281      	uxth	r1, r0
 8011e06:	fb02 7101 	mla	r1, r2, r1, r7
 8011e0a:	0c0f      	lsrs	r7, r1, #16
 8011e0c:	0c00      	lsrs	r0, r0, #16
 8011e0e:	fb02 7000 	mla	r0, r2, r0, r7
 8011e12:	b289      	uxth	r1, r1
 8011e14:	3301      	adds	r3, #1
 8011e16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011e1a:	429d      	cmp	r5, r3
 8011e1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011e20:	f84c 1b04 	str.w	r1, [ip], #4
 8011e24:	dcec      	bgt.n	8011e00 <__multadd+0x12>
 8011e26:	b1d7      	cbz	r7, 8011e5e <__multadd+0x70>
 8011e28:	68a3      	ldr	r3, [r4, #8]
 8011e2a:	42ab      	cmp	r3, r5
 8011e2c:	dc12      	bgt.n	8011e54 <__multadd+0x66>
 8011e2e:	6861      	ldr	r1, [r4, #4]
 8011e30:	4630      	mov	r0, r6
 8011e32:	3101      	adds	r1, #1
 8011e34:	f7ff ff90 	bl	8011d58 <_Balloc>
 8011e38:	6922      	ldr	r2, [r4, #16]
 8011e3a:	3202      	adds	r2, #2
 8011e3c:	f104 010c 	add.w	r1, r4, #12
 8011e40:	4680      	mov	r8, r0
 8011e42:	0092      	lsls	r2, r2, #2
 8011e44:	300c      	adds	r0, #12
 8011e46:	f7fc fd41 	bl	800e8cc <memcpy>
 8011e4a:	4621      	mov	r1, r4
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7ff ffb7 	bl	8011dc0 <_Bfree>
 8011e52:	4644      	mov	r4, r8
 8011e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011e58:	3501      	adds	r5, #1
 8011e5a:	615f      	str	r7, [r3, #20]
 8011e5c:	6125      	str	r5, [r4, #16]
 8011e5e:	4620      	mov	r0, r4
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e64 <__s2b>:
 8011e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e68:	460c      	mov	r4, r1
 8011e6a:	4615      	mov	r5, r2
 8011e6c:	461f      	mov	r7, r3
 8011e6e:	2209      	movs	r2, #9
 8011e70:	3308      	adds	r3, #8
 8011e72:	4606      	mov	r6, r0
 8011e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e78:	2100      	movs	r1, #0
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	db20      	blt.n	8011ec2 <__s2b+0x5e>
 8011e80:	4630      	mov	r0, r6
 8011e82:	f7ff ff69 	bl	8011d58 <_Balloc>
 8011e86:	9b08      	ldr	r3, [sp, #32]
 8011e88:	6143      	str	r3, [r0, #20]
 8011e8a:	2d09      	cmp	r5, #9
 8011e8c:	f04f 0301 	mov.w	r3, #1
 8011e90:	6103      	str	r3, [r0, #16]
 8011e92:	dd19      	ble.n	8011ec8 <__s2b+0x64>
 8011e94:	f104 0809 	add.w	r8, r4, #9
 8011e98:	46c1      	mov	r9, r8
 8011e9a:	442c      	add	r4, r5
 8011e9c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011ea0:	4601      	mov	r1, r0
 8011ea2:	3b30      	subs	r3, #48	; 0x30
 8011ea4:	220a      	movs	r2, #10
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f7ff ffa1 	bl	8011dee <__multadd>
 8011eac:	45a1      	cmp	r9, r4
 8011eae:	d1f5      	bne.n	8011e9c <__s2b+0x38>
 8011eb0:	eb08 0405 	add.w	r4, r8, r5
 8011eb4:	3c08      	subs	r4, #8
 8011eb6:	1b2d      	subs	r5, r5, r4
 8011eb8:	1963      	adds	r3, r4, r5
 8011eba:	42bb      	cmp	r3, r7
 8011ebc:	db07      	blt.n	8011ece <__s2b+0x6a>
 8011ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ec2:	0052      	lsls	r2, r2, #1
 8011ec4:	3101      	adds	r1, #1
 8011ec6:	e7d9      	b.n	8011e7c <__s2b+0x18>
 8011ec8:	340a      	adds	r4, #10
 8011eca:	2509      	movs	r5, #9
 8011ecc:	e7f3      	b.n	8011eb6 <__s2b+0x52>
 8011ece:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ed2:	4601      	mov	r1, r0
 8011ed4:	3b30      	subs	r3, #48	; 0x30
 8011ed6:	220a      	movs	r2, #10
 8011ed8:	4630      	mov	r0, r6
 8011eda:	f7ff ff88 	bl	8011dee <__multadd>
 8011ede:	e7eb      	b.n	8011eb8 <__s2b+0x54>

08011ee0 <__hi0bits>:
 8011ee0:	0c02      	lsrs	r2, r0, #16
 8011ee2:	0412      	lsls	r2, r2, #16
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	b9b2      	cbnz	r2, 8011f16 <__hi0bits+0x36>
 8011ee8:	0403      	lsls	r3, r0, #16
 8011eea:	2010      	movs	r0, #16
 8011eec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011ef0:	bf04      	itt	eq
 8011ef2:	021b      	lsleq	r3, r3, #8
 8011ef4:	3008      	addeq	r0, #8
 8011ef6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011efa:	bf04      	itt	eq
 8011efc:	011b      	lsleq	r3, r3, #4
 8011efe:	3004      	addeq	r0, #4
 8011f00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011f04:	bf04      	itt	eq
 8011f06:	009b      	lsleq	r3, r3, #2
 8011f08:	3002      	addeq	r0, #2
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	db06      	blt.n	8011f1c <__hi0bits+0x3c>
 8011f0e:	005b      	lsls	r3, r3, #1
 8011f10:	d503      	bpl.n	8011f1a <__hi0bits+0x3a>
 8011f12:	3001      	adds	r0, #1
 8011f14:	4770      	bx	lr
 8011f16:	2000      	movs	r0, #0
 8011f18:	e7e8      	b.n	8011eec <__hi0bits+0xc>
 8011f1a:	2020      	movs	r0, #32
 8011f1c:	4770      	bx	lr

08011f1e <__lo0bits>:
 8011f1e:	6803      	ldr	r3, [r0, #0]
 8011f20:	f013 0207 	ands.w	r2, r3, #7
 8011f24:	4601      	mov	r1, r0
 8011f26:	d00b      	beq.n	8011f40 <__lo0bits+0x22>
 8011f28:	07da      	lsls	r2, r3, #31
 8011f2a:	d423      	bmi.n	8011f74 <__lo0bits+0x56>
 8011f2c:	0798      	lsls	r0, r3, #30
 8011f2e:	bf49      	itett	mi
 8011f30:	085b      	lsrmi	r3, r3, #1
 8011f32:	089b      	lsrpl	r3, r3, #2
 8011f34:	2001      	movmi	r0, #1
 8011f36:	600b      	strmi	r3, [r1, #0]
 8011f38:	bf5c      	itt	pl
 8011f3a:	600b      	strpl	r3, [r1, #0]
 8011f3c:	2002      	movpl	r0, #2
 8011f3e:	4770      	bx	lr
 8011f40:	b298      	uxth	r0, r3
 8011f42:	b9a8      	cbnz	r0, 8011f70 <__lo0bits+0x52>
 8011f44:	0c1b      	lsrs	r3, r3, #16
 8011f46:	2010      	movs	r0, #16
 8011f48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f4c:	bf04      	itt	eq
 8011f4e:	0a1b      	lsreq	r3, r3, #8
 8011f50:	3008      	addeq	r0, #8
 8011f52:	071a      	lsls	r2, r3, #28
 8011f54:	bf04      	itt	eq
 8011f56:	091b      	lsreq	r3, r3, #4
 8011f58:	3004      	addeq	r0, #4
 8011f5a:	079a      	lsls	r2, r3, #30
 8011f5c:	bf04      	itt	eq
 8011f5e:	089b      	lsreq	r3, r3, #2
 8011f60:	3002      	addeq	r0, #2
 8011f62:	07da      	lsls	r2, r3, #31
 8011f64:	d402      	bmi.n	8011f6c <__lo0bits+0x4e>
 8011f66:	085b      	lsrs	r3, r3, #1
 8011f68:	d006      	beq.n	8011f78 <__lo0bits+0x5a>
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	600b      	str	r3, [r1, #0]
 8011f6e:	4770      	bx	lr
 8011f70:	4610      	mov	r0, r2
 8011f72:	e7e9      	b.n	8011f48 <__lo0bits+0x2a>
 8011f74:	2000      	movs	r0, #0
 8011f76:	4770      	bx	lr
 8011f78:	2020      	movs	r0, #32
 8011f7a:	4770      	bx	lr

08011f7c <__i2b>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	460c      	mov	r4, r1
 8011f80:	2101      	movs	r1, #1
 8011f82:	f7ff fee9 	bl	8011d58 <_Balloc>
 8011f86:	2201      	movs	r2, #1
 8011f88:	6144      	str	r4, [r0, #20]
 8011f8a:	6102      	str	r2, [r0, #16]
 8011f8c:	bd10      	pop	{r4, pc}

08011f8e <__multiply>:
 8011f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f92:	4614      	mov	r4, r2
 8011f94:	690a      	ldr	r2, [r1, #16]
 8011f96:	6923      	ldr	r3, [r4, #16]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	bfb8      	it	lt
 8011f9c:	460b      	movlt	r3, r1
 8011f9e:	4688      	mov	r8, r1
 8011fa0:	bfbc      	itt	lt
 8011fa2:	46a0      	movlt	r8, r4
 8011fa4:	461c      	movlt	r4, r3
 8011fa6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011faa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011fb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011fb6:	eb07 0609 	add.w	r6, r7, r9
 8011fba:	42b3      	cmp	r3, r6
 8011fbc:	bfb8      	it	lt
 8011fbe:	3101      	addlt	r1, #1
 8011fc0:	f7ff feca 	bl	8011d58 <_Balloc>
 8011fc4:	f100 0514 	add.w	r5, r0, #20
 8011fc8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011fcc:	462b      	mov	r3, r5
 8011fce:	2200      	movs	r2, #0
 8011fd0:	4573      	cmp	r3, lr
 8011fd2:	d316      	bcc.n	8012002 <__multiply+0x74>
 8011fd4:	f104 0214 	add.w	r2, r4, #20
 8011fd8:	f108 0114 	add.w	r1, r8, #20
 8011fdc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011fe0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	9b00      	ldr	r3, [sp, #0]
 8011fe8:	9201      	str	r2, [sp, #4]
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d80c      	bhi.n	8012008 <__multiply+0x7a>
 8011fee:	2e00      	cmp	r6, #0
 8011ff0:	dd03      	ble.n	8011ffa <__multiply+0x6c>
 8011ff2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d05d      	beq.n	80120b6 <__multiply+0x128>
 8011ffa:	6106      	str	r6, [r0, #16]
 8011ffc:	b003      	add	sp, #12
 8011ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012002:	f843 2b04 	str.w	r2, [r3], #4
 8012006:	e7e3      	b.n	8011fd0 <__multiply+0x42>
 8012008:	f8b2 b000 	ldrh.w	fp, [r2]
 801200c:	f1bb 0f00 	cmp.w	fp, #0
 8012010:	d023      	beq.n	801205a <__multiply+0xcc>
 8012012:	4689      	mov	r9, r1
 8012014:	46ac      	mov	ip, r5
 8012016:	f04f 0800 	mov.w	r8, #0
 801201a:	f859 4b04 	ldr.w	r4, [r9], #4
 801201e:	f8dc a000 	ldr.w	sl, [ip]
 8012022:	b2a3      	uxth	r3, r4
 8012024:	fa1f fa8a 	uxth.w	sl, sl
 8012028:	fb0b a303 	mla	r3, fp, r3, sl
 801202c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012030:	f8dc 4000 	ldr.w	r4, [ip]
 8012034:	4443      	add	r3, r8
 8012036:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801203a:	fb0b 840a 	mla	r4, fp, sl, r8
 801203e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012042:	46e2      	mov	sl, ip
 8012044:	b29b      	uxth	r3, r3
 8012046:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801204a:	454f      	cmp	r7, r9
 801204c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012050:	f84a 3b04 	str.w	r3, [sl], #4
 8012054:	d82b      	bhi.n	80120ae <__multiply+0x120>
 8012056:	f8cc 8004 	str.w	r8, [ip, #4]
 801205a:	9b01      	ldr	r3, [sp, #4]
 801205c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012060:	3204      	adds	r2, #4
 8012062:	f1ba 0f00 	cmp.w	sl, #0
 8012066:	d020      	beq.n	80120aa <__multiply+0x11c>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	4689      	mov	r9, r1
 801206c:	46a8      	mov	r8, r5
 801206e:	f04f 0b00 	mov.w	fp, #0
 8012072:	f8b9 c000 	ldrh.w	ip, [r9]
 8012076:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801207a:	fb0a 440c 	mla	r4, sl, ip, r4
 801207e:	445c      	add	r4, fp
 8012080:	46c4      	mov	ip, r8
 8012082:	b29b      	uxth	r3, r3
 8012084:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012088:	f84c 3b04 	str.w	r3, [ip], #4
 801208c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012090:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012094:	0c1b      	lsrs	r3, r3, #16
 8012096:	fb0a b303 	mla	r3, sl, r3, fp
 801209a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801209e:	454f      	cmp	r7, r9
 80120a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80120a4:	d805      	bhi.n	80120b2 <__multiply+0x124>
 80120a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80120aa:	3504      	adds	r5, #4
 80120ac:	e79b      	b.n	8011fe6 <__multiply+0x58>
 80120ae:	46d4      	mov	ip, sl
 80120b0:	e7b3      	b.n	801201a <__multiply+0x8c>
 80120b2:	46e0      	mov	r8, ip
 80120b4:	e7dd      	b.n	8012072 <__multiply+0xe4>
 80120b6:	3e01      	subs	r6, #1
 80120b8:	e799      	b.n	8011fee <__multiply+0x60>
	...

080120bc <__pow5mult>:
 80120bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c0:	4615      	mov	r5, r2
 80120c2:	f012 0203 	ands.w	r2, r2, #3
 80120c6:	4606      	mov	r6, r0
 80120c8:	460f      	mov	r7, r1
 80120ca:	d007      	beq.n	80120dc <__pow5mult+0x20>
 80120cc:	3a01      	subs	r2, #1
 80120ce:	4c21      	ldr	r4, [pc, #132]	; (8012154 <__pow5mult+0x98>)
 80120d0:	2300      	movs	r3, #0
 80120d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120d6:	f7ff fe8a 	bl	8011dee <__multadd>
 80120da:	4607      	mov	r7, r0
 80120dc:	10ad      	asrs	r5, r5, #2
 80120de:	d035      	beq.n	801214c <__pow5mult+0x90>
 80120e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120e2:	b93c      	cbnz	r4, 80120f4 <__pow5mult+0x38>
 80120e4:	2010      	movs	r0, #16
 80120e6:	f7ff fe1b 	bl	8011d20 <malloc>
 80120ea:	6270      	str	r0, [r6, #36]	; 0x24
 80120ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120f0:	6004      	str	r4, [r0, #0]
 80120f2:	60c4      	str	r4, [r0, #12]
 80120f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80120f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120fc:	b94c      	cbnz	r4, 8012112 <__pow5mult+0x56>
 80120fe:	f240 2171 	movw	r1, #625	; 0x271
 8012102:	4630      	mov	r0, r6
 8012104:	f7ff ff3a 	bl	8011f7c <__i2b>
 8012108:	2300      	movs	r3, #0
 801210a:	f8c8 0008 	str.w	r0, [r8, #8]
 801210e:	4604      	mov	r4, r0
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	f04f 0800 	mov.w	r8, #0
 8012116:	07eb      	lsls	r3, r5, #31
 8012118:	d50a      	bpl.n	8012130 <__pow5mult+0x74>
 801211a:	4639      	mov	r1, r7
 801211c:	4622      	mov	r2, r4
 801211e:	4630      	mov	r0, r6
 8012120:	f7ff ff35 	bl	8011f8e <__multiply>
 8012124:	4639      	mov	r1, r7
 8012126:	4681      	mov	r9, r0
 8012128:	4630      	mov	r0, r6
 801212a:	f7ff fe49 	bl	8011dc0 <_Bfree>
 801212e:	464f      	mov	r7, r9
 8012130:	106d      	asrs	r5, r5, #1
 8012132:	d00b      	beq.n	801214c <__pow5mult+0x90>
 8012134:	6820      	ldr	r0, [r4, #0]
 8012136:	b938      	cbnz	r0, 8012148 <__pow5mult+0x8c>
 8012138:	4622      	mov	r2, r4
 801213a:	4621      	mov	r1, r4
 801213c:	4630      	mov	r0, r6
 801213e:	f7ff ff26 	bl	8011f8e <__multiply>
 8012142:	6020      	str	r0, [r4, #0]
 8012144:	f8c0 8000 	str.w	r8, [r0]
 8012148:	4604      	mov	r4, r0
 801214a:	e7e4      	b.n	8012116 <__pow5mult+0x5a>
 801214c:	4638      	mov	r0, r7
 801214e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012152:	bf00      	nop
 8012154:	080138a0 	.word	0x080138a0

08012158 <__lshift>:
 8012158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801215c:	460c      	mov	r4, r1
 801215e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012162:	6923      	ldr	r3, [r4, #16]
 8012164:	6849      	ldr	r1, [r1, #4]
 8012166:	eb0a 0903 	add.w	r9, sl, r3
 801216a:	68a3      	ldr	r3, [r4, #8]
 801216c:	4607      	mov	r7, r0
 801216e:	4616      	mov	r6, r2
 8012170:	f109 0501 	add.w	r5, r9, #1
 8012174:	42ab      	cmp	r3, r5
 8012176:	db32      	blt.n	80121de <__lshift+0x86>
 8012178:	4638      	mov	r0, r7
 801217a:	f7ff fded 	bl	8011d58 <_Balloc>
 801217e:	2300      	movs	r3, #0
 8012180:	4680      	mov	r8, r0
 8012182:	f100 0114 	add.w	r1, r0, #20
 8012186:	461a      	mov	r2, r3
 8012188:	4553      	cmp	r3, sl
 801218a:	db2b      	blt.n	80121e4 <__lshift+0x8c>
 801218c:	6920      	ldr	r0, [r4, #16]
 801218e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012192:	f104 0314 	add.w	r3, r4, #20
 8012196:	f016 021f 	ands.w	r2, r6, #31
 801219a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801219e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121a2:	d025      	beq.n	80121f0 <__lshift+0x98>
 80121a4:	f1c2 0e20 	rsb	lr, r2, #32
 80121a8:	2000      	movs	r0, #0
 80121aa:	681e      	ldr	r6, [r3, #0]
 80121ac:	468a      	mov	sl, r1
 80121ae:	4096      	lsls	r6, r2
 80121b0:	4330      	orrs	r0, r6
 80121b2:	f84a 0b04 	str.w	r0, [sl], #4
 80121b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80121ba:	459c      	cmp	ip, r3
 80121bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80121c0:	d814      	bhi.n	80121ec <__lshift+0x94>
 80121c2:	6048      	str	r0, [r1, #4]
 80121c4:	b108      	cbz	r0, 80121ca <__lshift+0x72>
 80121c6:	f109 0502 	add.w	r5, r9, #2
 80121ca:	3d01      	subs	r5, #1
 80121cc:	4638      	mov	r0, r7
 80121ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80121d2:	4621      	mov	r1, r4
 80121d4:	f7ff fdf4 	bl	8011dc0 <_Bfree>
 80121d8:	4640      	mov	r0, r8
 80121da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121de:	3101      	adds	r1, #1
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	e7c7      	b.n	8012174 <__lshift+0x1c>
 80121e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80121e8:	3301      	adds	r3, #1
 80121ea:	e7cd      	b.n	8012188 <__lshift+0x30>
 80121ec:	4651      	mov	r1, sl
 80121ee:	e7dc      	b.n	80121aa <__lshift+0x52>
 80121f0:	3904      	subs	r1, #4
 80121f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80121fa:	459c      	cmp	ip, r3
 80121fc:	d8f9      	bhi.n	80121f2 <__lshift+0x9a>
 80121fe:	e7e4      	b.n	80121ca <__lshift+0x72>

08012200 <__mcmp>:
 8012200:	6903      	ldr	r3, [r0, #16]
 8012202:	690a      	ldr	r2, [r1, #16]
 8012204:	1a9b      	subs	r3, r3, r2
 8012206:	b530      	push	{r4, r5, lr}
 8012208:	d10c      	bne.n	8012224 <__mcmp+0x24>
 801220a:	0092      	lsls	r2, r2, #2
 801220c:	3014      	adds	r0, #20
 801220e:	3114      	adds	r1, #20
 8012210:	1884      	adds	r4, r0, r2
 8012212:	4411      	add	r1, r2
 8012214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801221c:	4295      	cmp	r5, r2
 801221e:	d003      	beq.n	8012228 <__mcmp+0x28>
 8012220:	d305      	bcc.n	801222e <__mcmp+0x2e>
 8012222:	2301      	movs	r3, #1
 8012224:	4618      	mov	r0, r3
 8012226:	bd30      	pop	{r4, r5, pc}
 8012228:	42a0      	cmp	r0, r4
 801222a:	d3f3      	bcc.n	8012214 <__mcmp+0x14>
 801222c:	e7fa      	b.n	8012224 <__mcmp+0x24>
 801222e:	f04f 33ff 	mov.w	r3, #4294967295
 8012232:	e7f7      	b.n	8012224 <__mcmp+0x24>

08012234 <__mdiff>:
 8012234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012238:	460d      	mov	r5, r1
 801223a:	4607      	mov	r7, r0
 801223c:	4611      	mov	r1, r2
 801223e:	4628      	mov	r0, r5
 8012240:	4614      	mov	r4, r2
 8012242:	f7ff ffdd 	bl	8012200 <__mcmp>
 8012246:	1e06      	subs	r6, r0, #0
 8012248:	d108      	bne.n	801225c <__mdiff+0x28>
 801224a:	4631      	mov	r1, r6
 801224c:	4638      	mov	r0, r7
 801224e:	f7ff fd83 	bl	8011d58 <_Balloc>
 8012252:	2301      	movs	r3, #1
 8012254:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801225c:	bfa4      	itt	ge
 801225e:	4623      	movge	r3, r4
 8012260:	462c      	movge	r4, r5
 8012262:	4638      	mov	r0, r7
 8012264:	6861      	ldr	r1, [r4, #4]
 8012266:	bfa6      	itte	ge
 8012268:	461d      	movge	r5, r3
 801226a:	2600      	movge	r6, #0
 801226c:	2601      	movlt	r6, #1
 801226e:	f7ff fd73 	bl	8011d58 <_Balloc>
 8012272:	692b      	ldr	r3, [r5, #16]
 8012274:	60c6      	str	r6, [r0, #12]
 8012276:	6926      	ldr	r6, [r4, #16]
 8012278:	f105 0914 	add.w	r9, r5, #20
 801227c:	f104 0214 	add.w	r2, r4, #20
 8012280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012288:	f100 0514 	add.w	r5, r0, #20
 801228c:	f04f 0e00 	mov.w	lr, #0
 8012290:	f852 ab04 	ldr.w	sl, [r2], #4
 8012294:	f859 4b04 	ldr.w	r4, [r9], #4
 8012298:	fa1e f18a 	uxtah	r1, lr, sl
 801229c:	b2a3      	uxth	r3, r4
 801229e:	1ac9      	subs	r1, r1, r3
 80122a0:	0c23      	lsrs	r3, r4, #16
 80122a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80122a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80122aa:	b289      	uxth	r1, r1
 80122ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80122b0:	45c8      	cmp	r8, r9
 80122b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80122b6:	4694      	mov	ip, r2
 80122b8:	f845 3b04 	str.w	r3, [r5], #4
 80122bc:	d8e8      	bhi.n	8012290 <__mdiff+0x5c>
 80122be:	45bc      	cmp	ip, r7
 80122c0:	d304      	bcc.n	80122cc <__mdiff+0x98>
 80122c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80122c6:	b183      	cbz	r3, 80122ea <__mdiff+0xb6>
 80122c8:	6106      	str	r6, [r0, #16]
 80122ca:	e7c5      	b.n	8012258 <__mdiff+0x24>
 80122cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80122d0:	fa1e f381 	uxtah	r3, lr, r1
 80122d4:	141a      	asrs	r2, r3, #16
 80122d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80122da:	b29b      	uxth	r3, r3
 80122dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80122e4:	f845 3b04 	str.w	r3, [r5], #4
 80122e8:	e7e9      	b.n	80122be <__mdiff+0x8a>
 80122ea:	3e01      	subs	r6, #1
 80122ec:	e7e9      	b.n	80122c2 <__mdiff+0x8e>
	...

080122f0 <__ulp>:
 80122f0:	4b12      	ldr	r3, [pc, #72]	; (801233c <__ulp+0x4c>)
 80122f2:	ee10 2a90 	vmov	r2, s1
 80122f6:	401a      	ands	r2, r3
 80122f8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	dd04      	ble.n	801230a <__ulp+0x1a>
 8012300:	2000      	movs	r0, #0
 8012302:	4619      	mov	r1, r3
 8012304:	ec41 0b10 	vmov	d0, r0, r1
 8012308:	4770      	bx	lr
 801230a:	425b      	negs	r3, r3
 801230c:	151b      	asrs	r3, r3, #20
 801230e:	2b13      	cmp	r3, #19
 8012310:	f04f 0000 	mov.w	r0, #0
 8012314:	f04f 0100 	mov.w	r1, #0
 8012318:	dc04      	bgt.n	8012324 <__ulp+0x34>
 801231a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801231e:	fa42 f103 	asr.w	r1, r2, r3
 8012322:	e7ef      	b.n	8012304 <__ulp+0x14>
 8012324:	3b14      	subs	r3, #20
 8012326:	2b1e      	cmp	r3, #30
 8012328:	f04f 0201 	mov.w	r2, #1
 801232c:	bfda      	itte	le
 801232e:	f1c3 031f 	rsble	r3, r3, #31
 8012332:	fa02 f303 	lslle.w	r3, r2, r3
 8012336:	4613      	movgt	r3, r2
 8012338:	4618      	mov	r0, r3
 801233a:	e7e3      	b.n	8012304 <__ulp+0x14>
 801233c:	7ff00000 	.word	0x7ff00000

08012340 <__b2d>:
 8012340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012342:	6905      	ldr	r5, [r0, #16]
 8012344:	f100 0714 	add.w	r7, r0, #20
 8012348:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801234c:	1f2e      	subs	r6, r5, #4
 801234e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012352:	4620      	mov	r0, r4
 8012354:	f7ff fdc4 	bl	8011ee0 <__hi0bits>
 8012358:	f1c0 0320 	rsb	r3, r0, #32
 801235c:	280a      	cmp	r0, #10
 801235e:	600b      	str	r3, [r1, #0]
 8012360:	f8df c074 	ldr.w	ip, [pc, #116]	; 80123d8 <__b2d+0x98>
 8012364:	dc14      	bgt.n	8012390 <__b2d+0x50>
 8012366:	f1c0 0e0b 	rsb	lr, r0, #11
 801236a:	fa24 f10e 	lsr.w	r1, r4, lr
 801236e:	42b7      	cmp	r7, r6
 8012370:	ea41 030c 	orr.w	r3, r1, ip
 8012374:	bf34      	ite	cc
 8012376:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801237a:	2100      	movcs	r1, #0
 801237c:	3015      	adds	r0, #21
 801237e:	fa04 f000 	lsl.w	r0, r4, r0
 8012382:	fa21 f10e 	lsr.w	r1, r1, lr
 8012386:	ea40 0201 	orr.w	r2, r0, r1
 801238a:	ec43 2b10 	vmov	d0, r2, r3
 801238e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012390:	42b7      	cmp	r7, r6
 8012392:	bf3a      	itte	cc
 8012394:	f1a5 0608 	subcc.w	r6, r5, #8
 8012398:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801239c:	2100      	movcs	r1, #0
 801239e:	380b      	subs	r0, #11
 80123a0:	d015      	beq.n	80123ce <__b2d+0x8e>
 80123a2:	4084      	lsls	r4, r0
 80123a4:	f1c0 0520 	rsb	r5, r0, #32
 80123a8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80123ac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80123b0:	42be      	cmp	r6, r7
 80123b2:	fa21 fc05 	lsr.w	ip, r1, r5
 80123b6:	ea44 030c 	orr.w	r3, r4, ip
 80123ba:	bf8c      	ite	hi
 80123bc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80123c0:	2400      	movls	r4, #0
 80123c2:	fa01 f000 	lsl.w	r0, r1, r0
 80123c6:	40ec      	lsrs	r4, r5
 80123c8:	ea40 0204 	orr.w	r2, r0, r4
 80123cc:	e7dd      	b.n	801238a <__b2d+0x4a>
 80123ce:	ea44 030c 	orr.w	r3, r4, ip
 80123d2:	460a      	mov	r2, r1
 80123d4:	e7d9      	b.n	801238a <__b2d+0x4a>
 80123d6:	bf00      	nop
 80123d8:	3ff00000 	.word	0x3ff00000

080123dc <__d2b>:
 80123dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123e0:	460e      	mov	r6, r1
 80123e2:	2101      	movs	r1, #1
 80123e4:	ec59 8b10 	vmov	r8, r9, d0
 80123e8:	4615      	mov	r5, r2
 80123ea:	f7ff fcb5 	bl	8011d58 <_Balloc>
 80123ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80123f2:	4607      	mov	r7, r0
 80123f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80123f8:	bb34      	cbnz	r4, 8012448 <__d2b+0x6c>
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	f1b8 0300 	subs.w	r3, r8, #0
 8012400:	d027      	beq.n	8012452 <__d2b+0x76>
 8012402:	a802      	add	r0, sp, #8
 8012404:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012408:	f7ff fd89 	bl	8011f1e <__lo0bits>
 801240c:	9900      	ldr	r1, [sp, #0]
 801240e:	b1f0      	cbz	r0, 801244e <__d2b+0x72>
 8012410:	9a01      	ldr	r2, [sp, #4]
 8012412:	f1c0 0320 	rsb	r3, r0, #32
 8012416:	fa02 f303 	lsl.w	r3, r2, r3
 801241a:	430b      	orrs	r3, r1
 801241c:	40c2      	lsrs	r2, r0
 801241e:	617b      	str	r3, [r7, #20]
 8012420:	9201      	str	r2, [sp, #4]
 8012422:	9b01      	ldr	r3, [sp, #4]
 8012424:	61bb      	str	r3, [r7, #24]
 8012426:	2b00      	cmp	r3, #0
 8012428:	bf14      	ite	ne
 801242a:	2102      	movne	r1, #2
 801242c:	2101      	moveq	r1, #1
 801242e:	6139      	str	r1, [r7, #16]
 8012430:	b1c4      	cbz	r4, 8012464 <__d2b+0x88>
 8012432:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012436:	4404      	add	r4, r0
 8012438:	6034      	str	r4, [r6, #0]
 801243a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801243e:	6028      	str	r0, [r5, #0]
 8012440:	4638      	mov	r0, r7
 8012442:	b003      	add	sp, #12
 8012444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801244c:	e7d5      	b.n	80123fa <__d2b+0x1e>
 801244e:	6179      	str	r1, [r7, #20]
 8012450:	e7e7      	b.n	8012422 <__d2b+0x46>
 8012452:	a801      	add	r0, sp, #4
 8012454:	f7ff fd63 	bl	8011f1e <__lo0bits>
 8012458:	9b01      	ldr	r3, [sp, #4]
 801245a:	617b      	str	r3, [r7, #20]
 801245c:	2101      	movs	r1, #1
 801245e:	6139      	str	r1, [r7, #16]
 8012460:	3020      	adds	r0, #32
 8012462:	e7e5      	b.n	8012430 <__d2b+0x54>
 8012464:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801246c:	6030      	str	r0, [r6, #0]
 801246e:	6918      	ldr	r0, [r3, #16]
 8012470:	f7ff fd36 	bl	8011ee0 <__hi0bits>
 8012474:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012478:	e7e1      	b.n	801243e <__d2b+0x62>

0801247a <__ratio>:
 801247a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801247e:	4688      	mov	r8, r1
 8012480:	4669      	mov	r1, sp
 8012482:	4681      	mov	r9, r0
 8012484:	f7ff ff5c 	bl	8012340 <__b2d>
 8012488:	a901      	add	r1, sp, #4
 801248a:	4640      	mov	r0, r8
 801248c:	ec57 6b10 	vmov	r6, r7, d0
 8012490:	f7ff ff56 	bl	8012340 <__b2d>
 8012494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012498:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801249c:	eba3 0c02 	sub.w	ip, r3, r2
 80124a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80124a4:	1a9b      	subs	r3, r3, r2
 80124a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80124aa:	ec5b ab10 	vmov	sl, fp, d0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bfce      	itee	gt
 80124b2:	463a      	movgt	r2, r7
 80124b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80124b8:	465a      	movle	r2, fp
 80124ba:	4659      	mov	r1, fp
 80124bc:	463d      	mov	r5, r7
 80124be:	bfd4      	ite	le
 80124c0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80124c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80124c8:	4630      	mov	r0, r6
 80124ca:	ee10 2a10 	vmov	r2, s0
 80124ce:	460b      	mov	r3, r1
 80124d0:	4629      	mov	r1, r5
 80124d2:	f7ee f9e3 	bl	800089c <__aeabi_ddiv>
 80124d6:	ec41 0b10 	vmov	d0, r0, r1
 80124da:	b003      	add	sp, #12
 80124dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080124e0 <__copybits>:
 80124e0:	3901      	subs	r1, #1
 80124e2:	b510      	push	{r4, lr}
 80124e4:	1149      	asrs	r1, r1, #5
 80124e6:	6914      	ldr	r4, [r2, #16]
 80124e8:	3101      	adds	r1, #1
 80124ea:	f102 0314 	add.w	r3, r2, #20
 80124ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80124f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	4602      	mov	r2, r0
 80124fa:	d303      	bcc.n	8012504 <__copybits+0x24>
 80124fc:	2300      	movs	r3, #0
 80124fe:	428a      	cmp	r2, r1
 8012500:	d305      	bcc.n	801250e <__copybits+0x2e>
 8012502:	bd10      	pop	{r4, pc}
 8012504:	f853 2b04 	ldr.w	r2, [r3], #4
 8012508:	f840 2b04 	str.w	r2, [r0], #4
 801250c:	e7f3      	b.n	80124f6 <__copybits+0x16>
 801250e:	f842 3b04 	str.w	r3, [r2], #4
 8012512:	e7f4      	b.n	80124fe <__copybits+0x1e>

08012514 <__any_on>:
 8012514:	f100 0214 	add.w	r2, r0, #20
 8012518:	6900      	ldr	r0, [r0, #16]
 801251a:	114b      	asrs	r3, r1, #5
 801251c:	4298      	cmp	r0, r3
 801251e:	b510      	push	{r4, lr}
 8012520:	db11      	blt.n	8012546 <__any_on+0x32>
 8012522:	dd0a      	ble.n	801253a <__any_on+0x26>
 8012524:	f011 011f 	ands.w	r1, r1, #31
 8012528:	d007      	beq.n	801253a <__any_on+0x26>
 801252a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801252e:	fa24 f001 	lsr.w	r0, r4, r1
 8012532:	fa00 f101 	lsl.w	r1, r0, r1
 8012536:	428c      	cmp	r4, r1
 8012538:	d10b      	bne.n	8012552 <__any_on+0x3e>
 801253a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801253e:	4293      	cmp	r3, r2
 8012540:	d803      	bhi.n	801254a <__any_on+0x36>
 8012542:	2000      	movs	r0, #0
 8012544:	bd10      	pop	{r4, pc}
 8012546:	4603      	mov	r3, r0
 8012548:	e7f7      	b.n	801253a <__any_on+0x26>
 801254a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801254e:	2900      	cmp	r1, #0
 8012550:	d0f5      	beq.n	801253e <__any_on+0x2a>
 8012552:	2001      	movs	r0, #1
 8012554:	e7f6      	b.n	8012544 <__any_on+0x30>

08012556 <_calloc_r>:
 8012556:	b538      	push	{r3, r4, r5, lr}
 8012558:	fb02 f401 	mul.w	r4, r2, r1
 801255c:	4621      	mov	r1, r4
 801255e:	f7fc fa17 	bl	800e990 <_malloc_r>
 8012562:	4605      	mov	r5, r0
 8012564:	b118      	cbz	r0, 801256e <_calloc_r+0x18>
 8012566:	4622      	mov	r2, r4
 8012568:	2100      	movs	r1, #0
 801256a:	f7fc f9ba 	bl	800e8e2 <memset>
 801256e:	4628      	mov	r0, r5
 8012570:	bd38      	pop	{r3, r4, r5, pc}

08012572 <__ssputs_r>:
 8012572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012576:	688e      	ldr	r6, [r1, #8]
 8012578:	429e      	cmp	r6, r3
 801257a:	4682      	mov	sl, r0
 801257c:	460c      	mov	r4, r1
 801257e:	4690      	mov	r8, r2
 8012580:	4699      	mov	r9, r3
 8012582:	d837      	bhi.n	80125f4 <__ssputs_r+0x82>
 8012584:	898a      	ldrh	r2, [r1, #12]
 8012586:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801258a:	d031      	beq.n	80125f0 <__ssputs_r+0x7e>
 801258c:	6825      	ldr	r5, [r4, #0]
 801258e:	6909      	ldr	r1, [r1, #16]
 8012590:	1a6f      	subs	r7, r5, r1
 8012592:	6965      	ldr	r5, [r4, #20]
 8012594:	2302      	movs	r3, #2
 8012596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801259a:	fb95 f5f3 	sdiv	r5, r5, r3
 801259e:	f109 0301 	add.w	r3, r9, #1
 80125a2:	443b      	add	r3, r7
 80125a4:	429d      	cmp	r5, r3
 80125a6:	bf38      	it	cc
 80125a8:	461d      	movcc	r5, r3
 80125aa:	0553      	lsls	r3, r2, #21
 80125ac:	d530      	bpl.n	8012610 <__ssputs_r+0x9e>
 80125ae:	4629      	mov	r1, r5
 80125b0:	f7fc f9ee 	bl	800e990 <_malloc_r>
 80125b4:	4606      	mov	r6, r0
 80125b6:	b950      	cbnz	r0, 80125ce <__ssputs_r+0x5c>
 80125b8:	230c      	movs	r3, #12
 80125ba:	f8ca 3000 	str.w	r3, [sl]
 80125be:	89a3      	ldrh	r3, [r4, #12]
 80125c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125c4:	81a3      	strh	r3, [r4, #12]
 80125c6:	f04f 30ff 	mov.w	r0, #4294967295
 80125ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ce:	463a      	mov	r2, r7
 80125d0:	6921      	ldr	r1, [r4, #16]
 80125d2:	f7fc f97b 	bl	800e8cc <memcpy>
 80125d6:	89a3      	ldrh	r3, [r4, #12]
 80125d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80125dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125e0:	81a3      	strh	r3, [r4, #12]
 80125e2:	6126      	str	r6, [r4, #16]
 80125e4:	6165      	str	r5, [r4, #20]
 80125e6:	443e      	add	r6, r7
 80125e8:	1bed      	subs	r5, r5, r7
 80125ea:	6026      	str	r6, [r4, #0]
 80125ec:	60a5      	str	r5, [r4, #8]
 80125ee:	464e      	mov	r6, r9
 80125f0:	454e      	cmp	r6, r9
 80125f2:	d900      	bls.n	80125f6 <__ssputs_r+0x84>
 80125f4:	464e      	mov	r6, r9
 80125f6:	4632      	mov	r2, r6
 80125f8:	4641      	mov	r1, r8
 80125fa:	6820      	ldr	r0, [r4, #0]
 80125fc:	f000 faa0 	bl	8012b40 <memmove>
 8012600:	68a3      	ldr	r3, [r4, #8]
 8012602:	1b9b      	subs	r3, r3, r6
 8012604:	60a3      	str	r3, [r4, #8]
 8012606:	6823      	ldr	r3, [r4, #0]
 8012608:	441e      	add	r6, r3
 801260a:	6026      	str	r6, [r4, #0]
 801260c:	2000      	movs	r0, #0
 801260e:	e7dc      	b.n	80125ca <__ssputs_r+0x58>
 8012610:	462a      	mov	r2, r5
 8012612:	f000 faae 	bl	8012b72 <_realloc_r>
 8012616:	4606      	mov	r6, r0
 8012618:	2800      	cmp	r0, #0
 801261a:	d1e2      	bne.n	80125e2 <__ssputs_r+0x70>
 801261c:	6921      	ldr	r1, [r4, #16]
 801261e:	4650      	mov	r0, sl
 8012620:	f7fc f968 	bl	800e8f4 <_free_r>
 8012624:	e7c8      	b.n	80125b8 <__ssputs_r+0x46>
	...

08012628 <_svfiprintf_r>:
 8012628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801262c:	461d      	mov	r5, r3
 801262e:	898b      	ldrh	r3, [r1, #12]
 8012630:	061f      	lsls	r7, r3, #24
 8012632:	b09d      	sub	sp, #116	; 0x74
 8012634:	4680      	mov	r8, r0
 8012636:	460c      	mov	r4, r1
 8012638:	4616      	mov	r6, r2
 801263a:	d50f      	bpl.n	801265c <_svfiprintf_r+0x34>
 801263c:	690b      	ldr	r3, [r1, #16]
 801263e:	b96b      	cbnz	r3, 801265c <_svfiprintf_r+0x34>
 8012640:	2140      	movs	r1, #64	; 0x40
 8012642:	f7fc f9a5 	bl	800e990 <_malloc_r>
 8012646:	6020      	str	r0, [r4, #0]
 8012648:	6120      	str	r0, [r4, #16]
 801264a:	b928      	cbnz	r0, 8012658 <_svfiprintf_r+0x30>
 801264c:	230c      	movs	r3, #12
 801264e:	f8c8 3000 	str.w	r3, [r8]
 8012652:	f04f 30ff 	mov.w	r0, #4294967295
 8012656:	e0c8      	b.n	80127ea <_svfiprintf_r+0x1c2>
 8012658:	2340      	movs	r3, #64	; 0x40
 801265a:	6163      	str	r3, [r4, #20]
 801265c:	2300      	movs	r3, #0
 801265e:	9309      	str	r3, [sp, #36]	; 0x24
 8012660:	2320      	movs	r3, #32
 8012662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012666:	2330      	movs	r3, #48	; 0x30
 8012668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801266c:	9503      	str	r5, [sp, #12]
 801266e:	f04f 0b01 	mov.w	fp, #1
 8012672:	4637      	mov	r7, r6
 8012674:	463d      	mov	r5, r7
 8012676:	f815 3b01 	ldrb.w	r3, [r5], #1
 801267a:	b10b      	cbz	r3, 8012680 <_svfiprintf_r+0x58>
 801267c:	2b25      	cmp	r3, #37	; 0x25
 801267e:	d13e      	bne.n	80126fe <_svfiprintf_r+0xd6>
 8012680:	ebb7 0a06 	subs.w	sl, r7, r6
 8012684:	d00b      	beq.n	801269e <_svfiprintf_r+0x76>
 8012686:	4653      	mov	r3, sl
 8012688:	4632      	mov	r2, r6
 801268a:	4621      	mov	r1, r4
 801268c:	4640      	mov	r0, r8
 801268e:	f7ff ff70 	bl	8012572 <__ssputs_r>
 8012692:	3001      	adds	r0, #1
 8012694:	f000 80a4 	beq.w	80127e0 <_svfiprintf_r+0x1b8>
 8012698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801269a:	4453      	add	r3, sl
 801269c:	9309      	str	r3, [sp, #36]	; 0x24
 801269e:	783b      	ldrb	r3, [r7, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 809d 	beq.w	80127e0 <_svfiprintf_r+0x1b8>
 80126a6:	2300      	movs	r3, #0
 80126a8:	f04f 32ff 	mov.w	r2, #4294967295
 80126ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126b0:	9304      	str	r3, [sp, #16]
 80126b2:	9307      	str	r3, [sp, #28]
 80126b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126b8:	931a      	str	r3, [sp, #104]	; 0x68
 80126ba:	462f      	mov	r7, r5
 80126bc:	2205      	movs	r2, #5
 80126be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80126c2:	4850      	ldr	r0, [pc, #320]	; (8012804 <_svfiprintf_r+0x1dc>)
 80126c4:	f7ed fdb4 	bl	8000230 <memchr>
 80126c8:	9b04      	ldr	r3, [sp, #16]
 80126ca:	b9d0      	cbnz	r0, 8012702 <_svfiprintf_r+0xda>
 80126cc:	06d9      	lsls	r1, r3, #27
 80126ce:	bf44      	itt	mi
 80126d0:	2220      	movmi	r2, #32
 80126d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80126d6:	071a      	lsls	r2, r3, #28
 80126d8:	bf44      	itt	mi
 80126da:	222b      	movmi	r2, #43	; 0x2b
 80126dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80126e0:	782a      	ldrb	r2, [r5, #0]
 80126e2:	2a2a      	cmp	r2, #42	; 0x2a
 80126e4:	d015      	beq.n	8012712 <_svfiprintf_r+0xea>
 80126e6:	9a07      	ldr	r2, [sp, #28]
 80126e8:	462f      	mov	r7, r5
 80126ea:	2000      	movs	r0, #0
 80126ec:	250a      	movs	r5, #10
 80126ee:	4639      	mov	r1, r7
 80126f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126f4:	3b30      	subs	r3, #48	; 0x30
 80126f6:	2b09      	cmp	r3, #9
 80126f8:	d94d      	bls.n	8012796 <_svfiprintf_r+0x16e>
 80126fa:	b1b8      	cbz	r0, 801272c <_svfiprintf_r+0x104>
 80126fc:	e00f      	b.n	801271e <_svfiprintf_r+0xf6>
 80126fe:	462f      	mov	r7, r5
 8012700:	e7b8      	b.n	8012674 <_svfiprintf_r+0x4c>
 8012702:	4a40      	ldr	r2, [pc, #256]	; (8012804 <_svfiprintf_r+0x1dc>)
 8012704:	1a80      	subs	r0, r0, r2
 8012706:	fa0b f000 	lsl.w	r0, fp, r0
 801270a:	4318      	orrs	r0, r3
 801270c:	9004      	str	r0, [sp, #16]
 801270e:	463d      	mov	r5, r7
 8012710:	e7d3      	b.n	80126ba <_svfiprintf_r+0x92>
 8012712:	9a03      	ldr	r2, [sp, #12]
 8012714:	1d11      	adds	r1, r2, #4
 8012716:	6812      	ldr	r2, [r2, #0]
 8012718:	9103      	str	r1, [sp, #12]
 801271a:	2a00      	cmp	r2, #0
 801271c:	db01      	blt.n	8012722 <_svfiprintf_r+0xfa>
 801271e:	9207      	str	r2, [sp, #28]
 8012720:	e004      	b.n	801272c <_svfiprintf_r+0x104>
 8012722:	4252      	negs	r2, r2
 8012724:	f043 0302 	orr.w	r3, r3, #2
 8012728:	9207      	str	r2, [sp, #28]
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	783b      	ldrb	r3, [r7, #0]
 801272e:	2b2e      	cmp	r3, #46	; 0x2e
 8012730:	d10c      	bne.n	801274c <_svfiprintf_r+0x124>
 8012732:	787b      	ldrb	r3, [r7, #1]
 8012734:	2b2a      	cmp	r3, #42	; 0x2a
 8012736:	d133      	bne.n	80127a0 <_svfiprintf_r+0x178>
 8012738:	9b03      	ldr	r3, [sp, #12]
 801273a:	1d1a      	adds	r2, r3, #4
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	9203      	str	r2, [sp, #12]
 8012740:	2b00      	cmp	r3, #0
 8012742:	bfb8      	it	lt
 8012744:	f04f 33ff 	movlt.w	r3, #4294967295
 8012748:	3702      	adds	r7, #2
 801274a:	9305      	str	r3, [sp, #20]
 801274c:	4d2e      	ldr	r5, [pc, #184]	; (8012808 <_svfiprintf_r+0x1e0>)
 801274e:	7839      	ldrb	r1, [r7, #0]
 8012750:	2203      	movs	r2, #3
 8012752:	4628      	mov	r0, r5
 8012754:	f7ed fd6c 	bl	8000230 <memchr>
 8012758:	b138      	cbz	r0, 801276a <_svfiprintf_r+0x142>
 801275a:	2340      	movs	r3, #64	; 0x40
 801275c:	1b40      	subs	r0, r0, r5
 801275e:	fa03 f000 	lsl.w	r0, r3, r0
 8012762:	9b04      	ldr	r3, [sp, #16]
 8012764:	4303      	orrs	r3, r0
 8012766:	3701      	adds	r7, #1
 8012768:	9304      	str	r3, [sp, #16]
 801276a:	7839      	ldrb	r1, [r7, #0]
 801276c:	4827      	ldr	r0, [pc, #156]	; (801280c <_svfiprintf_r+0x1e4>)
 801276e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012772:	2206      	movs	r2, #6
 8012774:	1c7e      	adds	r6, r7, #1
 8012776:	f7ed fd5b 	bl	8000230 <memchr>
 801277a:	2800      	cmp	r0, #0
 801277c:	d038      	beq.n	80127f0 <_svfiprintf_r+0x1c8>
 801277e:	4b24      	ldr	r3, [pc, #144]	; (8012810 <_svfiprintf_r+0x1e8>)
 8012780:	bb13      	cbnz	r3, 80127c8 <_svfiprintf_r+0x1a0>
 8012782:	9b03      	ldr	r3, [sp, #12]
 8012784:	3307      	adds	r3, #7
 8012786:	f023 0307 	bic.w	r3, r3, #7
 801278a:	3308      	adds	r3, #8
 801278c:	9303      	str	r3, [sp, #12]
 801278e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012790:	444b      	add	r3, r9
 8012792:	9309      	str	r3, [sp, #36]	; 0x24
 8012794:	e76d      	b.n	8012672 <_svfiprintf_r+0x4a>
 8012796:	fb05 3202 	mla	r2, r5, r2, r3
 801279a:	2001      	movs	r0, #1
 801279c:	460f      	mov	r7, r1
 801279e:	e7a6      	b.n	80126ee <_svfiprintf_r+0xc6>
 80127a0:	2300      	movs	r3, #0
 80127a2:	3701      	adds	r7, #1
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	4619      	mov	r1, r3
 80127a8:	250a      	movs	r5, #10
 80127aa:	4638      	mov	r0, r7
 80127ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127b0:	3a30      	subs	r2, #48	; 0x30
 80127b2:	2a09      	cmp	r2, #9
 80127b4:	d903      	bls.n	80127be <_svfiprintf_r+0x196>
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d0c8      	beq.n	801274c <_svfiprintf_r+0x124>
 80127ba:	9105      	str	r1, [sp, #20]
 80127bc:	e7c6      	b.n	801274c <_svfiprintf_r+0x124>
 80127be:	fb05 2101 	mla	r1, r5, r1, r2
 80127c2:	2301      	movs	r3, #1
 80127c4:	4607      	mov	r7, r0
 80127c6:	e7f0      	b.n	80127aa <_svfiprintf_r+0x182>
 80127c8:	ab03      	add	r3, sp, #12
 80127ca:	9300      	str	r3, [sp, #0]
 80127cc:	4622      	mov	r2, r4
 80127ce:	4b11      	ldr	r3, [pc, #68]	; (8012814 <_svfiprintf_r+0x1ec>)
 80127d0:	a904      	add	r1, sp, #16
 80127d2:	4640      	mov	r0, r8
 80127d4:	f7fc f9ca 	bl	800eb6c <_printf_float>
 80127d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80127dc:	4681      	mov	r9, r0
 80127de:	d1d6      	bne.n	801278e <_svfiprintf_r+0x166>
 80127e0:	89a3      	ldrh	r3, [r4, #12]
 80127e2:	065b      	lsls	r3, r3, #25
 80127e4:	f53f af35 	bmi.w	8012652 <_svfiprintf_r+0x2a>
 80127e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80127ea:	b01d      	add	sp, #116	; 0x74
 80127ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f0:	ab03      	add	r3, sp, #12
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	4622      	mov	r2, r4
 80127f6:	4b07      	ldr	r3, [pc, #28]	; (8012814 <_svfiprintf_r+0x1ec>)
 80127f8:	a904      	add	r1, sp, #16
 80127fa:	4640      	mov	r0, r8
 80127fc:	f7fc fc6c 	bl	800f0d8 <_printf_i>
 8012800:	e7ea      	b.n	80127d8 <_svfiprintf_r+0x1b0>
 8012802:	bf00      	nop
 8012804:	080138ac 	.word	0x080138ac
 8012808:	080138b2 	.word	0x080138b2
 801280c:	080138b6 	.word	0x080138b6
 8012810:	0800eb6d 	.word	0x0800eb6d
 8012814:	08012573 	.word	0x08012573

08012818 <__sfputc_r>:
 8012818:	6893      	ldr	r3, [r2, #8]
 801281a:	3b01      	subs	r3, #1
 801281c:	2b00      	cmp	r3, #0
 801281e:	b410      	push	{r4}
 8012820:	6093      	str	r3, [r2, #8]
 8012822:	da08      	bge.n	8012836 <__sfputc_r+0x1e>
 8012824:	6994      	ldr	r4, [r2, #24]
 8012826:	42a3      	cmp	r3, r4
 8012828:	db01      	blt.n	801282e <__sfputc_r+0x16>
 801282a:	290a      	cmp	r1, #10
 801282c:	d103      	bne.n	8012836 <__sfputc_r+0x1e>
 801282e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012832:	f7fd bf9f 	b.w	8010774 <__swbuf_r>
 8012836:	6813      	ldr	r3, [r2, #0]
 8012838:	1c58      	adds	r0, r3, #1
 801283a:	6010      	str	r0, [r2, #0]
 801283c:	7019      	strb	r1, [r3, #0]
 801283e:	4608      	mov	r0, r1
 8012840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012844:	4770      	bx	lr

08012846 <__sfputs_r>:
 8012846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012848:	4606      	mov	r6, r0
 801284a:	460f      	mov	r7, r1
 801284c:	4614      	mov	r4, r2
 801284e:	18d5      	adds	r5, r2, r3
 8012850:	42ac      	cmp	r4, r5
 8012852:	d101      	bne.n	8012858 <__sfputs_r+0x12>
 8012854:	2000      	movs	r0, #0
 8012856:	e007      	b.n	8012868 <__sfputs_r+0x22>
 8012858:	463a      	mov	r2, r7
 801285a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801285e:	4630      	mov	r0, r6
 8012860:	f7ff ffda 	bl	8012818 <__sfputc_r>
 8012864:	1c43      	adds	r3, r0, #1
 8012866:	d1f3      	bne.n	8012850 <__sfputs_r+0xa>
 8012868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801286c <_vfiprintf_r>:
 801286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012870:	460c      	mov	r4, r1
 8012872:	b09d      	sub	sp, #116	; 0x74
 8012874:	4617      	mov	r7, r2
 8012876:	461d      	mov	r5, r3
 8012878:	4606      	mov	r6, r0
 801287a:	b118      	cbz	r0, 8012884 <_vfiprintf_r+0x18>
 801287c:	6983      	ldr	r3, [r0, #24]
 801287e:	b90b      	cbnz	r3, 8012884 <_vfiprintf_r+0x18>
 8012880:	f7fb ff76 	bl	800e770 <__sinit>
 8012884:	4b7c      	ldr	r3, [pc, #496]	; (8012a78 <_vfiprintf_r+0x20c>)
 8012886:	429c      	cmp	r4, r3
 8012888:	d158      	bne.n	801293c <_vfiprintf_r+0xd0>
 801288a:	6874      	ldr	r4, [r6, #4]
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	0718      	lsls	r0, r3, #28
 8012890:	d55e      	bpl.n	8012950 <_vfiprintf_r+0xe4>
 8012892:	6923      	ldr	r3, [r4, #16]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d05b      	beq.n	8012950 <_vfiprintf_r+0xe4>
 8012898:	2300      	movs	r3, #0
 801289a:	9309      	str	r3, [sp, #36]	; 0x24
 801289c:	2320      	movs	r3, #32
 801289e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128a2:	2330      	movs	r3, #48	; 0x30
 80128a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128a8:	9503      	str	r5, [sp, #12]
 80128aa:	f04f 0b01 	mov.w	fp, #1
 80128ae:	46b8      	mov	r8, r7
 80128b0:	4645      	mov	r5, r8
 80128b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80128b6:	b10b      	cbz	r3, 80128bc <_vfiprintf_r+0x50>
 80128b8:	2b25      	cmp	r3, #37	; 0x25
 80128ba:	d154      	bne.n	8012966 <_vfiprintf_r+0xfa>
 80128bc:	ebb8 0a07 	subs.w	sl, r8, r7
 80128c0:	d00b      	beq.n	80128da <_vfiprintf_r+0x6e>
 80128c2:	4653      	mov	r3, sl
 80128c4:	463a      	mov	r2, r7
 80128c6:	4621      	mov	r1, r4
 80128c8:	4630      	mov	r0, r6
 80128ca:	f7ff ffbc 	bl	8012846 <__sfputs_r>
 80128ce:	3001      	adds	r0, #1
 80128d0:	f000 80c2 	beq.w	8012a58 <_vfiprintf_r+0x1ec>
 80128d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128d6:	4453      	add	r3, sl
 80128d8:	9309      	str	r3, [sp, #36]	; 0x24
 80128da:	f898 3000 	ldrb.w	r3, [r8]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 80ba 	beq.w	8012a58 <_vfiprintf_r+0x1ec>
 80128e4:	2300      	movs	r3, #0
 80128e6:	f04f 32ff 	mov.w	r2, #4294967295
 80128ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ee:	9304      	str	r3, [sp, #16]
 80128f0:	9307      	str	r3, [sp, #28]
 80128f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128f6:	931a      	str	r3, [sp, #104]	; 0x68
 80128f8:	46a8      	mov	r8, r5
 80128fa:	2205      	movs	r2, #5
 80128fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012900:	485e      	ldr	r0, [pc, #376]	; (8012a7c <_vfiprintf_r+0x210>)
 8012902:	f7ed fc95 	bl	8000230 <memchr>
 8012906:	9b04      	ldr	r3, [sp, #16]
 8012908:	bb78      	cbnz	r0, 801296a <_vfiprintf_r+0xfe>
 801290a:	06d9      	lsls	r1, r3, #27
 801290c:	bf44      	itt	mi
 801290e:	2220      	movmi	r2, #32
 8012910:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012914:	071a      	lsls	r2, r3, #28
 8012916:	bf44      	itt	mi
 8012918:	222b      	movmi	r2, #43	; 0x2b
 801291a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801291e:	782a      	ldrb	r2, [r5, #0]
 8012920:	2a2a      	cmp	r2, #42	; 0x2a
 8012922:	d02a      	beq.n	801297a <_vfiprintf_r+0x10e>
 8012924:	9a07      	ldr	r2, [sp, #28]
 8012926:	46a8      	mov	r8, r5
 8012928:	2000      	movs	r0, #0
 801292a:	250a      	movs	r5, #10
 801292c:	4641      	mov	r1, r8
 801292e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012932:	3b30      	subs	r3, #48	; 0x30
 8012934:	2b09      	cmp	r3, #9
 8012936:	d969      	bls.n	8012a0c <_vfiprintf_r+0x1a0>
 8012938:	b360      	cbz	r0, 8012994 <_vfiprintf_r+0x128>
 801293a:	e024      	b.n	8012986 <_vfiprintf_r+0x11a>
 801293c:	4b50      	ldr	r3, [pc, #320]	; (8012a80 <_vfiprintf_r+0x214>)
 801293e:	429c      	cmp	r4, r3
 8012940:	d101      	bne.n	8012946 <_vfiprintf_r+0xda>
 8012942:	68b4      	ldr	r4, [r6, #8]
 8012944:	e7a2      	b.n	801288c <_vfiprintf_r+0x20>
 8012946:	4b4f      	ldr	r3, [pc, #316]	; (8012a84 <_vfiprintf_r+0x218>)
 8012948:	429c      	cmp	r4, r3
 801294a:	bf08      	it	eq
 801294c:	68f4      	ldreq	r4, [r6, #12]
 801294e:	e79d      	b.n	801288c <_vfiprintf_r+0x20>
 8012950:	4621      	mov	r1, r4
 8012952:	4630      	mov	r0, r6
 8012954:	f7fd ff72 	bl	801083c <__swsetup_r>
 8012958:	2800      	cmp	r0, #0
 801295a:	d09d      	beq.n	8012898 <_vfiprintf_r+0x2c>
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	b01d      	add	sp, #116	; 0x74
 8012962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012966:	46a8      	mov	r8, r5
 8012968:	e7a2      	b.n	80128b0 <_vfiprintf_r+0x44>
 801296a:	4a44      	ldr	r2, [pc, #272]	; (8012a7c <_vfiprintf_r+0x210>)
 801296c:	1a80      	subs	r0, r0, r2
 801296e:	fa0b f000 	lsl.w	r0, fp, r0
 8012972:	4318      	orrs	r0, r3
 8012974:	9004      	str	r0, [sp, #16]
 8012976:	4645      	mov	r5, r8
 8012978:	e7be      	b.n	80128f8 <_vfiprintf_r+0x8c>
 801297a:	9a03      	ldr	r2, [sp, #12]
 801297c:	1d11      	adds	r1, r2, #4
 801297e:	6812      	ldr	r2, [r2, #0]
 8012980:	9103      	str	r1, [sp, #12]
 8012982:	2a00      	cmp	r2, #0
 8012984:	db01      	blt.n	801298a <_vfiprintf_r+0x11e>
 8012986:	9207      	str	r2, [sp, #28]
 8012988:	e004      	b.n	8012994 <_vfiprintf_r+0x128>
 801298a:	4252      	negs	r2, r2
 801298c:	f043 0302 	orr.w	r3, r3, #2
 8012990:	9207      	str	r2, [sp, #28]
 8012992:	9304      	str	r3, [sp, #16]
 8012994:	f898 3000 	ldrb.w	r3, [r8]
 8012998:	2b2e      	cmp	r3, #46	; 0x2e
 801299a:	d10e      	bne.n	80129ba <_vfiprintf_r+0x14e>
 801299c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80129a0:	2b2a      	cmp	r3, #42	; 0x2a
 80129a2:	d138      	bne.n	8012a16 <_vfiprintf_r+0x1aa>
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	1d1a      	adds	r2, r3, #4
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	9203      	str	r2, [sp, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	bfb8      	it	lt
 80129b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80129b4:	f108 0802 	add.w	r8, r8, #2
 80129b8:	9305      	str	r3, [sp, #20]
 80129ba:	4d33      	ldr	r5, [pc, #204]	; (8012a88 <_vfiprintf_r+0x21c>)
 80129bc:	f898 1000 	ldrb.w	r1, [r8]
 80129c0:	2203      	movs	r2, #3
 80129c2:	4628      	mov	r0, r5
 80129c4:	f7ed fc34 	bl	8000230 <memchr>
 80129c8:	b140      	cbz	r0, 80129dc <_vfiprintf_r+0x170>
 80129ca:	2340      	movs	r3, #64	; 0x40
 80129cc:	1b40      	subs	r0, r0, r5
 80129ce:	fa03 f000 	lsl.w	r0, r3, r0
 80129d2:	9b04      	ldr	r3, [sp, #16]
 80129d4:	4303      	orrs	r3, r0
 80129d6:	f108 0801 	add.w	r8, r8, #1
 80129da:	9304      	str	r3, [sp, #16]
 80129dc:	f898 1000 	ldrb.w	r1, [r8]
 80129e0:	482a      	ldr	r0, [pc, #168]	; (8012a8c <_vfiprintf_r+0x220>)
 80129e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129e6:	2206      	movs	r2, #6
 80129e8:	f108 0701 	add.w	r7, r8, #1
 80129ec:	f7ed fc20 	bl	8000230 <memchr>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	d037      	beq.n	8012a64 <_vfiprintf_r+0x1f8>
 80129f4:	4b26      	ldr	r3, [pc, #152]	; (8012a90 <_vfiprintf_r+0x224>)
 80129f6:	bb1b      	cbnz	r3, 8012a40 <_vfiprintf_r+0x1d4>
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	3307      	adds	r3, #7
 80129fc:	f023 0307 	bic.w	r3, r3, #7
 8012a00:	3308      	adds	r3, #8
 8012a02:	9303      	str	r3, [sp, #12]
 8012a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a06:	444b      	add	r3, r9
 8012a08:	9309      	str	r3, [sp, #36]	; 0x24
 8012a0a:	e750      	b.n	80128ae <_vfiprintf_r+0x42>
 8012a0c:	fb05 3202 	mla	r2, r5, r2, r3
 8012a10:	2001      	movs	r0, #1
 8012a12:	4688      	mov	r8, r1
 8012a14:	e78a      	b.n	801292c <_vfiprintf_r+0xc0>
 8012a16:	2300      	movs	r3, #0
 8012a18:	f108 0801 	add.w	r8, r8, #1
 8012a1c:	9305      	str	r3, [sp, #20]
 8012a1e:	4619      	mov	r1, r3
 8012a20:	250a      	movs	r5, #10
 8012a22:	4640      	mov	r0, r8
 8012a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a28:	3a30      	subs	r2, #48	; 0x30
 8012a2a:	2a09      	cmp	r2, #9
 8012a2c:	d903      	bls.n	8012a36 <_vfiprintf_r+0x1ca>
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d0c3      	beq.n	80129ba <_vfiprintf_r+0x14e>
 8012a32:	9105      	str	r1, [sp, #20]
 8012a34:	e7c1      	b.n	80129ba <_vfiprintf_r+0x14e>
 8012a36:	fb05 2101 	mla	r1, r5, r1, r2
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	4680      	mov	r8, r0
 8012a3e:	e7f0      	b.n	8012a22 <_vfiprintf_r+0x1b6>
 8012a40:	ab03      	add	r3, sp, #12
 8012a42:	9300      	str	r3, [sp, #0]
 8012a44:	4622      	mov	r2, r4
 8012a46:	4b13      	ldr	r3, [pc, #76]	; (8012a94 <_vfiprintf_r+0x228>)
 8012a48:	a904      	add	r1, sp, #16
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f7fc f88e 	bl	800eb6c <_printf_float>
 8012a50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012a54:	4681      	mov	r9, r0
 8012a56:	d1d5      	bne.n	8012a04 <_vfiprintf_r+0x198>
 8012a58:	89a3      	ldrh	r3, [r4, #12]
 8012a5a:	065b      	lsls	r3, r3, #25
 8012a5c:	f53f af7e 	bmi.w	801295c <_vfiprintf_r+0xf0>
 8012a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a62:	e77d      	b.n	8012960 <_vfiprintf_r+0xf4>
 8012a64:	ab03      	add	r3, sp, #12
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	4622      	mov	r2, r4
 8012a6a:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <_vfiprintf_r+0x228>)
 8012a6c:	a904      	add	r1, sp, #16
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f7fc fb32 	bl	800f0d8 <_printf_i>
 8012a74:	e7ec      	b.n	8012a50 <_vfiprintf_r+0x1e4>
 8012a76:	bf00      	nop
 8012a78:	080136c4 	.word	0x080136c4
 8012a7c:	080138ac 	.word	0x080138ac
 8012a80:	080136e4 	.word	0x080136e4
 8012a84:	080136a4 	.word	0x080136a4
 8012a88:	080138b2 	.word	0x080138b2
 8012a8c:	080138b6 	.word	0x080138b6
 8012a90:	0800eb6d 	.word	0x0800eb6d
 8012a94:	08012847 	.word	0x08012847

08012a98 <_read_r>:
 8012a98:	b538      	push	{r3, r4, r5, lr}
 8012a9a:	4c07      	ldr	r4, [pc, #28]	; (8012ab8 <_read_r+0x20>)
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	4611      	mov	r1, r2
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	6022      	str	r2, [r4, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	f7f9 fda2 	bl	800c5f0 <_read>
 8012aac:	1c43      	adds	r3, r0, #1
 8012aae:	d102      	bne.n	8012ab6 <_read_r+0x1e>
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	b103      	cbz	r3, 8012ab6 <_read_r+0x1e>
 8012ab4:	602b      	str	r3, [r5, #0]
 8012ab6:	bd38      	pop	{r3, r4, r5, pc}
 8012ab8:	2001bf58 	.word	0x2001bf58

08012abc <strncmp>:
 8012abc:	b510      	push	{r4, lr}
 8012abe:	b16a      	cbz	r2, 8012adc <strncmp+0x20>
 8012ac0:	3901      	subs	r1, #1
 8012ac2:	1884      	adds	r4, r0, r2
 8012ac4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012ac8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d103      	bne.n	8012ad8 <strncmp+0x1c>
 8012ad0:	42a0      	cmp	r0, r4
 8012ad2:	d001      	beq.n	8012ad8 <strncmp+0x1c>
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1f5      	bne.n	8012ac4 <strncmp+0x8>
 8012ad8:	1a98      	subs	r0, r3, r2
 8012ada:	bd10      	pop	{r4, pc}
 8012adc:	4610      	mov	r0, r2
 8012ade:	e7fc      	b.n	8012ada <strncmp+0x1e>

08012ae0 <__ascii_wctomb>:
 8012ae0:	b149      	cbz	r1, 8012af6 <__ascii_wctomb+0x16>
 8012ae2:	2aff      	cmp	r2, #255	; 0xff
 8012ae4:	bf85      	ittet	hi
 8012ae6:	238a      	movhi	r3, #138	; 0x8a
 8012ae8:	6003      	strhi	r3, [r0, #0]
 8012aea:	700a      	strbls	r2, [r1, #0]
 8012aec:	f04f 30ff 	movhi.w	r0, #4294967295
 8012af0:	bf98      	it	ls
 8012af2:	2001      	movls	r0, #1
 8012af4:	4770      	bx	lr
 8012af6:	4608      	mov	r0, r1
 8012af8:	4770      	bx	lr
	...

08012afc <_fstat_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4c07      	ldr	r4, [pc, #28]	; (8012b1c <_fstat_r+0x20>)
 8012b00:	2300      	movs	r3, #0
 8012b02:	4605      	mov	r5, r0
 8012b04:	4608      	mov	r0, r1
 8012b06:	4611      	mov	r1, r2
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	f7f9 fdb6 	bl	800c67a <_fstat>
 8012b0e:	1c43      	adds	r3, r0, #1
 8012b10:	d102      	bne.n	8012b18 <_fstat_r+0x1c>
 8012b12:	6823      	ldr	r3, [r4, #0]
 8012b14:	b103      	cbz	r3, 8012b18 <_fstat_r+0x1c>
 8012b16:	602b      	str	r3, [r5, #0]
 8012b18:	bd38      	pop	{r3, r4, r5, pc}
 8012b1a:	bf00      	nop
 8012b1c:	2001bf58 	.word	0x2001bf58

08012b20 <_isatty_r>:
 8012b20:	b538      	push	{r3, r4, r5, lr}
 8012b22:	4c06      	ldr	r4, [pc, #24]	; (8012b3c <_isatty_r+0x1c>)
 8012b24:	2300      	movs	r3, #0
 8012b26:	4605      	mov	r5, r0
 8012b28:	4608      	mov	r0, r1
 8012b2a:	6023      	str	r3, [r4, #0]
 8012b2c:	f7f9 fdb5 	bl	800c69a <_isatty>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_isatty_r+0x1a>
 8012b34:	6823      	ldr	r3, [r4, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_isatty_r+0x1a>
 8012b38:	602b      	str	r3, [r5, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	2001bf58 	.word	0x2001bf58

08012b40 <memmove>:
 8012b40:	4288      	cmp	r0, r1
 8012b42:	b510      	push	{r4, lr}
 8012b44:	eb01 0302 	add.w	r3, r1, r2
 8012b48:	d807      	bhi.n	8012b5a <memmove+0x1a>
 8012b4a:	1e42      	subs	r2, r0, #1
 8012b4c:	4299      	cmp	r1, r3
 8012b4e:	d00a      	beq.n	8012b66 <memmove+0x26>
 8012b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012b58:	e7f8      	b.n	8012b4c <memmove+0xc>
 8012b5a:	4283      	cmp	r3, r0
 8012b5c:	d9f5      	bls.n	8012b4a <memmove+0xa>
 8012b5e:	1881      	adds	r1, r0, r2
 8012b60:	1ad2      	subs	r2, r2, r3
 8012b62:	42d3      	cmn	r3, r2
 8012b64:	d100      	bne.n	8012b68 <memmove+0x28>
 8012b66:	bd10      	pop	{r4, pc}
 8012b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012b70:	e7f7      	b.n	8012b62 <memmove+0x22>

08012b72 <_realloc_r>:
 8012b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b74:	4607      	mov	r7, r0
 8012b76:	4614      	mov	r4, r2
 8012b78:	460e      	mov	r6, r1
 8012b7a:	b921      	cbnz	r1, 8012b86 <_realloc_r+0x14>
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012b82:	f7fb bf05 	b.w	800e990 <_malloc_r>
 8012b86:	b922      	cbnz	r2, 8012b92 <_realloc_r+0x20>
 8012b88:	f7fb feb4 	bl	800e8f4 <_free_r>
 8012b8c:	4625      	mov	r5, r4
 8012b8e:	4628      	mov	r0, r5
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b92:	f000 f814 	bl	8012bbe <_malloc_usable_size_r>
 8012b96:	42a0      	cmp	r0, r4
 8012b98:	d20f      	bcs.n	8012bba <_realloc_r+0x48>
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	4638      	mov	r0, r7
 8012b9e:	f7fb fef7 	bl	800e990 <_malloc_r>
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d0f2      	beq.n	8012b8e <_realloc_r+0x1c>
 8012ba8:	4631      	mov	r1, r6
 8012baa:	4622      	mov	r2, r4
 8012bac:	f7fb fe8e 	bl	800e8cc <memcpy>
 8012bb0:	4631      	mov	r1, r6
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	f7fb fe9e 	bl	800e8f4 <_free_r>
 8012bb8:	e7e9      	b.n	8012b8e <_realloc_r+0x1c>
 8012bba:	4635      	mov	r5, r6
 8012bbc:	e7e7      	b.n	8012b8e <_realloc_r+0x1c>

08012bbe <_malloc_usable_size_r>:
 8012bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bc2:	1f18      	subs	r0, r3, #4
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	bfbc      	itt	lt
 8012bc8:	580b      	ldrlt	r3, [r1, r0]
 8012bca:	18c0      	addlt	r0, r0, r3
 8012bcc:	4770      	bx	lr
	...

08012bd0 <ceil>:
 8012bd0:	ec51 0b10 	vmov	r0, r1, d0
 8012bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012bdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012be0:	2e13      	cmp	r6, #19
 8012be2:	460c      	mov	r4, r1
 8012be4:	ee10 5a10 	vmov	r5, s0
 8012be8:	4680      	mov	r8, r0
 8012bea:	dc30      	bgt.n	8012c4e <ceil+0x7e>
 8012bec:	2e00      	cmp	r6, #0
 8012bee:	da12      	bge.n	8012c16 <ceil+0x46>
 8012bf0:	a333      	add	r3, pc, #204	; (adr r3, 8012cc0 <ceil+0xf0>)
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf6:	f7ed fb71 	bl	80002dc <__adddf3>
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	f7ed ffb3 	bl	8000b68 <__aeabi_dcmpgt>
 8012c02:	b128      	cbz	r0, 8012c10 <ceil+0x40>
 8012c04:	2c00      	cmp	r4, #0
 8012c06:	db55      	blt.n	8012cb4 <ceil+0xe4>
 8012c08:	432c      	orrs	r4, r5
 8012c0a:	d057      	beq.n	8012cbc <ceil+0xec>
 8012c0c:	4c2e      	ldr	r4, [pc, #184]	; (8012cc8 <ceil+0xf8>)
 8012c0e:	2500      	movs	r5, #0
 8012c10:	4621      	mov	r1, r4
 8012c12:	4628      	mov	r0, r5
 8012c14:	e025      	b.n	8012c62 <ceil+0x92>
 8012c16:	4f2d      	ldr	r7, [pc, #180]	; (8012ccc <ceil+0xfc>)
 8012c18:	4137      	asrs	r7, r6
 8012c1a:	ea01 0307 	and.w	r3, r1, r7
 8012c1e:	4303      	orrs	r3, r0
 8012c20:	d01f      	beq.n	8012c62 <ceil+0x92>
 8012c22:	a327      	add	r3, pc, #156	; (adr r3, 8012cc0 <ceil+0xf0>)
 8012c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c28:	f7ed fb58 	bl	80002dc <__adddf3>
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f7ed ff9a 	bl	8000b68 <__aeabi_dcmpgt>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d0eb      	beq.n	8012c10 <ceil+0x40>
 8012c38:	2c00      	cmp	r4, #0
 8012c3a:	bfc2      	ittt	gt
 8012c3c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8012c40:	fa43 f606 	asrgt.w	r6, r3, r6
 8012c44:	19a4      	addgt	r4, r4, r6
 8012c46:	ea24 0407 	bic.w	r4, r4, r7
 8012c4a:	2500      	movs	r5, #0
 8012c4c:	e7e0      	b.n	8012c10 <ceil+0x40>
 8012c4e:	2e33      	cmp	r6, #51	; 0x33
 8012c50:	dd0b      	ble.n	8012c6a <ceil+0x9a>
 8012c52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012c56:	d104      	bne.n	8012c62 <ceil+0x92>
 8012c58:	ee10 2a10 	vmov	r2, s0
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	f7ed fb3d 	bl	80002dc <__adddf3>
 8012c62:	ec41 0b10 	vmov	d0, r0, r1
 8012c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c72:	fa23 f707 	lsr.w	r7, r3, r7
 8012c76:	4207      	tst	r7, r0
 8012c78:	d0f3      	beq.n	8012c62 <ceil+0x92>
 8012c7a:	a311      	add	r3, pc, #68	; (adr r3, 8012cc0 <ceil+0xf0>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	f7ed fb2c 	bl	80002dc <__adddf3>
 8012c84:	2200      	movs	r2, #0
 8012c86:	2300      	movs	r3, #0
 8012c88:	f7ed ff6e 	bl	8000b68 <__aeabi_dcmpgt>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d0bf      	beq.n	8012c10 <ceil+0x40>
 8012c90:	2c00      	cmp	r4, #0
 8012c92:	dd02      	ble.n	8012c9a <ceil+0xca>
 8012c94:	2e14      	cmp	r6, #20
 8012c96:	d103      	bne.n	8012ca0 <ceil+0xd0>
 8012c98:	3401      	adds	r4, #1
 8012c9a:	ea25 0507 	bic.w	r5, r5, r7
 8012c9e:	e7b7      	b.n	8012c10 <ceil+0x40>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012ca6:	fa03 f606 	lsl.w	r6, r3, r6
 8012caa:	4435      	add	r5, r6
 8012cac:	4545      	cmp	r5, r8
 8012cae:	bf38      	it	cc
 8012cb0:	18e4      	addcc	r4, r4, r3
 8012cb2:	e7f2      	b.n	8012c9a <ceil+0xca>
 8012cb4:	2500      	movs	r5, #0
 8012cb6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012cba:	e7a9      	b.n	8012c10 <ceil+0x40>
 8012cbc:	4625      	mov	r5, r4
 8012cbe:	e7a7      	b.n	8012c10 <ceil+0x40>
 8012cc0:	8800759c 	.word	0x8800759c
 8012cc4:	7e37e43c 	.word	0x7e37e43c
 8012cc8:	3ff00000 	.word	0x3ff00000
 8012ccc:	000fffff 	.word	0x000fffff

08012cd0 <floor>:
 8012cd0:	ec51 0b10 	vmov	r0, r1, d0
 8012cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012cdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012ce0:	2e13      	cmp	r6, #19
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	ee10 5a10 	vmov	r5, s0
 8012ce8:	4680      	mov	r8, r0
 8012cea:	dc34      	bgt.n	8012d56 <floor+0x86>
 8012cec:	2e00      	cmp	r6, #0
 8012cee:	da16      	bge.n	8012d1e <floor+0x4e>
 8012cf0:	a335      	add	r3, pc, #212	; (adr r3, 8012dc8 <floor+0xf8>)
 8012cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf6:	f7ed faf1 	bl	80002dc <__adddf3>
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	f7ed ff33 	bl	8000b68 <__aeabi_dcmpgt>
 8012d02:	b148      	cbz	r0, 8012d18 <floor+0x48>
 8012d04:	2c00      	cmp	r4, #0
 8012d06:	da59      	bge.n	8012dbc <floor+0xec>
 8012d08:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012d0c:	4a30      	ldr	r2, [pc, #192]	; (8012dd0 <floor+0x100>)
 8012d0e:	432b      	orrs	r3, r5
 8012d10:	2500      	movs	r5, #0
 8012d12:	42ab      	cmp	r3, r5
 8012d14:	bf18      	it	ne
 8012d16:	4614      	movne	r4, r2
 8012d18:	4621      	mov	r1, r4
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	e025      	b.n	8012d6a <floor+0x9a>
 8012d1e:	4f2d      	ldr	r7, [pc, #180]	; (8012dd4 <floor+0x104>)
 8012d20:	4137      	asrs	r7, r6
 8012d22:	ea01 0307 	and.w	r3, r1, r7
 8012d26:	4303      	orrs	r3, r0
 8012d28:	d01f      	beq.n	8012d6a <floor+0x9a>
 8012d2a:	a327      	add	r3, pc, #156	; (adr r3, 8012dc8 <floor+0xf8>)
 8012d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d30:	f7ed fad4 	bl	80002dc <__adddf3>
 8012d34:	2200      	movs	r2, #0
 8012d36:	2300      	movs	r3, #0
 8012d38:	f7ed ff16 	bl	8000b68 <__aeabi_dcmpgt>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d0eb      	beq.n	8012d18 <floor+0x48>
 8012d40:	2c00      	cmp	r4, #0
 8012d42:	bfbe      	ittt	lt
 8012d44:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012d48:	fa43 f606 	asrlt.w	r6, r3, r6
 8012d4c:	19a4      	addlt	r4, r4, r6
 8012d4e:	ea24 0407 	bic.w	r4, r4, r7
 8012d52:	2500      	movs	r5, #0
 8012d54:	e7e0      	b.n	8012d18 <floor+0x48>
 8012d56:	2e33      	cmp	r6, #51	; 0x33
 8012d58:	dd0b      	ble.n	8012d72 <floor+0xa2>
 8012d5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012d5e:	d104      	bne.n	8012d6a <floor+0x9a>
 8012d60:	ee10 2a10 	vmov	r2, s0
 8012d64:	460b      	mov	r3, r1
 8012d66:	f7ed fab9 	bl	80002dc <__adddf3>
 8012d6a:	ec41 0b10 	vmov	d0, r0, r1
 8012d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d72:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012d76:	f04f 33ff 	mov.w	r3, #4294967295
 8012d7a:	fa23 f707 	lsr.w	r7, r3, r7
 8012d7e:	4207      	tst	r7, r0
 8012d80:	d0f3      	beq.n	8012d6a <floor+0x9a>
 8012d82:	a311      	add	r3, pc, #68	; (adr r3, 8012dc8 <floor+0xf8>)
 8012d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d88:	f7ed faa8 	bl	80002dc <__adddf3>
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f7ed feea 	bl	8000b68 <__aeabi_dcmpgt>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d0bf      	beq.n	8012d18 <floor+0x48>
 8012d98:	2c00      	cmp	r4, #0
 8012d9a:	da02      	bge.n	8012da2 <floor+0xd2>
 8012d9c:	2e14      	cmp	r6, #20
 8012d9e:	d103      	bne.n	8012da8 <floor+0xd8>
 8012da0:	3401      	adds	r4, #1
 8012da2:	ea25 0507 	bic.w	r5, r5, r7
 8012da6:	e7b7      	b.n	8012d18 <floor+0x48>
 8012da8:	2301      	movs	r3, #1
 8012daa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012dae:	fa03 f606 	lsl.w	r6, r3, r6
 8012db2:	4435      	add	r5, r6
 8012db4:	4545      	cmp	r5, r8
 8012db6:	bf38      	it	cc
 8012db8:	18e4      	addcc	r4, r4, r3
 8012dba:	e7f2      	b.n	8012da2 <floor+0xd2>
 8012dbc:	2500      	movs	r5, #0
 8012dbe:	462c      	mov	r4, r5
 8012dc0:	e7aa      	b.n	8012d18 <floor+0x48>
 8012dc2:	bf00      	nop
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	8800759c 	.word	0x8800759c
 8012dcc:	7e37e43c 	.word	0x7e37e43c
 8012dd0:	bff00000 	.word	0xbff00000
 8012dd4:	000fffff 	.word	0x000fffff

08012dd8 <trunc>:
 8012dd8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8012ddc:	ec5c bb10 	vmov	fp, ip, d0
 8012de0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8012de4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8012de8:	2913      	cmp	r1, #19
 8012dea:	4664      	mov	r4, ip
 8012dec:	dc11      	bgt.n	8012e12 <trunc+0x3a>
 8012dee:	2900      	cmp	r1, #0
 8012df0:	bfa7      	ittee	ge
 8012df2:	4b15      	ldrge	r3, [pc, #84]	; (8012e48 <trunc+0x70>)
 8012df4:	fa43 f101 	asrge.w	r1, r3, r1
 8012df8:	2200      	movlt	r2, #0
 8012dfa:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8012dfe:	bfa4      	itt	ge
 8012e00:	2200      	movge	r2, #0
 8012e02:	ea2c 0301 	bicge.w	r3, ip, r1
 8012e06:	4693      	mov	fp, r2
 8012e08:	469c      	mov	ip, r3
 8012e0a:	ec4c bb10 	vmov	d0, fp, ip
 8012e0e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8012e12:	2933      	cmp	r1, #51	; 0x33
 8012e14:	dd0d      	ble.n	8012e32 <trunc+0x5a>
 8012e16:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012e1a:	d1f6      	bne.n	8012e0a <trunc+0x32>
 8012e1c:	4663      	mov	r3, ip
 8012e1e:	ee10 2a10 	vmov	r2, s0
 8012e22:	ee10 0a10 	vmov	r0, s0
 8012e26:	4621      	mov	r1, r4
 8012e28:	f7ed fa58 	bl	80002dc <__adddf3>
 8012e2c:	4683      	mov	fp, r0
 8012e2e:	468c      	mov	ip, r1
 8012e30:	e7eb      	b.n	8012e0a <trunc+0x32>
 8012e32:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3a:	fa23 f000 	lsr.w	r0, r3, r0
 8012e3e:	ea2b 0600 	bic.w	r6, fp, r0
 8012e42:	46b3      	mov	fp, r6
 8012e44:	46a4      	mov	ip, r4
 8012e46:	e7e0      	b.n	8012e0a <trunc+0x32>
 8012e48:	000fffff 	.word	0x000fffff

08012e4c <log>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	ed2d 8b02 	vpush	{d8}
 8012e52:	b08a      	sub	sp, #40	; 0x28
 8012e54:	ec55 4b10 	vmov	r4, r5, d0
 8012e58:	f000 f87a 	bl	8012f50 <__ieee754_log>
 8012e5c:	4b36      	ldr	r3, [pc, #216]	; (8012f38 <log+0xec>)
 8012e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8012e62:	eef0 8a60 	vmov.f32	s17, s1
 8012e66:	f993 6000 	ldrsb.w	r6, [r3]
 8012e6a:	1c73      	adds	r3, r6, #1
 8012e6c:	d05b      	beq.n	8012f26 <log+0xda>
 8012e6e:	4622      	mov	r2, r4
 8012e70:	462b      	mov	r3, r5
 8012e72:	4620      	mov	r0, r4
 8012e74:	4629      	mov	r1, r5
 8012e76:	f7ed fe81 	bl	8000b7c <__aeabi_dcmpun>
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d153      	bne.n	8012f26 <log+0xda>
 8012e7e:	2200      	movs	r2, #0
 8012e80:	2300      	movs	r3, #0
 8012e82:	4620      	mov	r0, r4
 8012e84:	4629      	mov	r1, r5
 8012e86:	f7ed fe6f 	bl	8000b68 <__aeabi_dcmpgt>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d14b      	bne.n	8012f26 <log+0xda>
 8012e8e:	4b2b      	ldr	r3, [pc, #172]	; (8012f3c <log+0xf0>)
 8012e90:	9301      	str	r3, [sp, #4]
 8012e92:	9008      	str	r0, [sp, #32]
 8012e94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012e98:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012e9c:	b9a6      	cbnz	r6, 8012ec8 <log+0x7c>
 8012e9e:	4b28      	ldr	r3, [pc, #160]	; (8012f40 <log+0xf4>)
 8012ea0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012ea4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2300      	movs	r3, #0
 8012eae:	4629      	mov	r1, r5
 8012eb0:	f7ed fe32 	bl	8000b18 <__aeabi_dcmpeq>
 8012eb4:	bb40      	cbnz	r0, 8012f08 <log+0xbc>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	2e02      	cmp	r6, #2
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	d119      	bne.n	8012ef2 <log+0xa6>
 8012ebe:	f7fb fb4f 	bl	800e560 <__errno>
 8012ec2:	2321      	movs	r3, #33	; 0x21
 8012ec4:	6003      	str	r3, [r0, #0]
 8012ec6:	e019      	b.n	8012efc <log+0xb0>
 8012ec8:	4b1e      	ldr	r3, [pc, #120]	; (8012f44 <log+0xf8>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	f7ed fe1e 	bl	8000b18 <__aeabi_dcmpeq>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	d0ea      	beq.n	8012eb6 <log+0x6a>
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	429e      	cmp	r6, r3
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	d111      	bne.n	8012f0c <log+0xc0>
 8012ee8:	f7fb fb3a 	bl	800e560 <__errno>
 8012eec:	2322      	movs	r3, #34	; 0x22
 8012eee:	6003      	str	r3, [r0, #0]
 8012ef0:	e011      	b.n	8012f16 <log+0xca>
 8012ef2:	4668      	mov	r0, sp
 8012ef4:	f000 f9de 	bl	80132b4 <matherr>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d0e0      	beq.n	8012ebe <log+0x72>
 8012efc:	4812      	ldr	r0, [pc, #72]	; (8012f48 <log+0xfc>)
 8012efe:	f000 f9db 	bl	80132b8 <nan>
 8012f02:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012f06:	e006      	b.n	8012f16 <log+0xca>
 8012f08:	2302      	movs	r3, #2
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	4668      	mov	r0, sp
 8012f0e:	f000 f9d1 	bl	80132b4 <matherr>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d0e8      	beq.n	8012ee8 <log+0x9c>
 8012f16:	9b08      	ldr	r3, [sp, #32]
 8012f18:	b11b      	cbz	r3, 8012f22 <log+0xd6>
 8012f1a:	f7fb fb21 	bl	800e560 <__errno>
 8012f1e:	9b08      	ldr	r3, [sp, #32]
 8012f20:	6003      	str	r3, [r0, #0]
 8012f22:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012f26:	eeb0 0a48 	vmov.f32	s0, s16
 8012f2a:	eef0 0a68 	vmov.f32	s1, s17
 8012f2e:	b00a      	add	sp, #40	; 0x28
 8012f30:	ecbd 8b02 	vpop	{d8}
 8012f34:	bd70      	pop	{r4, r5, r6, pc}
 8012f36:	bf00      	nop
 8012f38:	200001f8 	.word	0x200001f8
 8012f3c:	080139be 	.word	0x080139be
 8012f40:	c7efffff 	.word	0xc7efffff
 8012f44:	fff00000 	.word	0xfff00000
 8012f48:	080138b1 	.word	0x080138b1
 8012f4c:	00000000 	.word	0x00000000

08012f50 <__ieee754_log>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	ec51 0b10 	vmov	r0, r1, d0
 8012f58:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012f5c:	b087      	sub	sp, #28
 8012f5e:	460d      	mov	r5, r1
 8012f60:	da27      	bge.n	8012fb2 <__ieee754_log+0x62>
 8012f62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f66:	4303      	orrs	r3, r0
 8012f68:	ee10 2a10 	vmov	r2, s0
 8012f6c:	d10a      	bne.n	8012f84 <__ieee754_log+0x34>
 8012f6e:	49cc      	ldr	r1, [pc, #816]	; (80132a0 <__ieee754_log+0x350>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	2300      	movs	r3, #0
 8012f74:	2000      	movs	r0, #0
 8012f76:	f7ed fc91 	bl	800089c <__aeabi_ddiv>
 8012f7a:	ec41 0b10 	vmov	d0, r0, r1
 8012f7e:	b007      	add	sp, #28
 8012f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f84:	2900      	cmp	r1, #0
 8012f86:	da05      	bge.n	8012f94 <__ieee754_log+0x44>
 8012f88:	460b      	mov	r3, r1
 8012f8a:	f7ed f9a5 	bl	80002d8 <__aeabi_dsub>
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2300      	movs	r3, #0
 8012f92:	e7f0      	b.n	8012f76 <__ieee754_log+0x26>
 8012f94:	4bc3      	ldr	r3, [pc, #780]	; (80132a4 <__ieee754_log+0x354>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	f7ed fb56 	bl	8000648 <__aeabi_dmul>
 8012f9c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	4ac1      	ldr	r2, [pc, #772]	; (80132a8 <__ieee754_log+0x358>)
 8012fa4:	4295      	cmp	r5, r2
 8012fa6:	dd06      	ble.n	8012fb6 <__ieee754_log+0x66>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	f7ed f996 	bl	80002dc <__adddf3>
 8012fb0:	e7e3      	b.n	8012f7a <__ieee754_log+0x2a>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e7f5      	b.n	8012fa2 <__ieee754_log+0x52>
 8012fb6:	152c      	asrs	r4, r5, #20
 8012fb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012fbc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012fc0:	441c      	add	r4, r3
 8012fc2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012fc6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012fd2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012fd6:	ea42 0105 	orr.w	r1, r2, r5
 8012fda:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012fde:	2200      	movs	r2, #0
 8012fe0:	4bb2      	ldr	r3, [pc, #712]	; (80132ac <__ieee754_log+0x35c>)
 8012fe2:	f7ed f979 	bl	80002d8 <__aeabi_dsub>
 8012fe6:	1cab      	adds	r3, r5, #2
 8012fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fec:	2b02      	cmp	r3, #2
 8012fee:	4682      	mov	sl, r0
 8012ff0:	468b      	mov	fp, r1
 8012ff2:	f04f 0200 	mov.w	r2, #0
 8012ff6:	dc53      	bgt.n	80130a0 <__ieee754_log+0x150>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f7ed fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 8012ffe:	b1d0      	cbz	r0, 8013036 <__ieee754_log+0xe6>
 8013000:	2c00      	cmp	r4, #0
 8013002:	f000 8120 	beq.w	8013246 <__ieee754_log+0x2f6>
 8013006:	4620      	mov	r0, r4
 8013008:	f7ed fab4 	bl	8000574 <__aeabi_i2d>
 801300c:	a390      	add	r3, pc, #576	; (adr r3, 8013250 <__ieee754_log+0x300>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	4606      	mov	r6, r0
 8013014:	460f      	mov	r7, r1
 8013016:	f7ed fb17 	bl	8000648 <__aeabi_dmul>
 801301a:	a38f      	add	r3, pc, #572	; (adr r3, 8013258 <__ieee754_log+0x308>)
 801301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013020:	4604      	mov	r4, r0
 8013022:	460d      	mov	r5, r1
 8013024:	4630      	mov	r0, r6
 8013026:	4639      	mov	r1, r7
 8013028:	f7ed fb0e 	bl	8000648 <__aeabi_dmul>
 801302c:	4602      	mov	r2, r0
 801302e:	460b      	mov	r3, r1
 8013030:	4620      	mov	r0, r4
 8013032:	4629      	mov	r1, r5
 8013034:	e7ba      	b.n	8012fac <__ieee754_log+0x5c>
 8013036:	a38a      	add	r3, pc, #552	; (adr r3, 8013260 <__ieee754_log+0x310>)
 8013038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303c:	4650      	mov	r0, sl
 801303e:	4659      	mov	r1, fp
 8013040:	f7ed fb02 	bl	8000648 <__aeabi_dmul>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	2000      	movs	r0, #0
 801304a:	4999      	ldr	r1, [pc, #612]	; (80132b0 <__ieee754_log+0x360>)
 801304c:	f7ed f944 	bl	80002d8 <__aeabi_dsub>
 8013050:	4652      	mov	r2, sl
 8013052:	4606      	mov	r6, r0
 8013054:	460f      	mov	r7, r1
 8013056:	465b      	mov	r3, fp
 8013058:	4650      	mov	r0, sl
 801305a:	4659      	mov	r1, fp
 801305c:	f7ed faf4 	bl	8000648 <__aeabi_dmul>
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	4630      	mov	r0, r6
 8013066:	4639      	mov	r1, r7
 8013068:	f7ed faee 	bl	8000648 <__aeabi_dmul>
 801306c:	4606      	mov	r6, r0
 801306e:	460f      	mov	r7, r1
 8013070:	b914      	cbnz	r4, 8013078 <__ieee754_log+0x128>
 8013072:	4632      	mov	r2, r6
 8013074:	463b      	mov	r3, r7
 8013076:	e0a0      	b.n	80131ba <__ieee754_log+0x26a>
 8013078:	4620      	mov	r0, r4
 801307a:	f7ed fa7b 	bl	8000574 <__aeabi_i2d>
 801307e:	a374      	add	r3, pc, #464	; (adr r3, 8013250 <__ieee754_log+0x300>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	4680      	mov	r8, r0
 8013086:	4689      	mov	r9, r1
 8013088:	f7ed fade 	bl	8000648 <__aeabi_dmul>
 801308c:	a372      	add	r3, pc, #456	; (adr r3, 8013258 <__ieee754_log+0x308>)
 801308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013092:	4604      	mov	r4, r0
 8013094:	460d      	mov	r5, r1
 8013096:	4640      	mov	r0, r8
 8013098:	4649      	mov	r1, r9
 801309a:	f7ed fad5 	bl	8000648 <__aeabi_dmul>
 801309e:	e0a5      	b.n	80131ec <__ieee754_log+0x29c>
 80130a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130a4:	f7ed f91a 	bl	80002dc <__adddf3>
 80130a8:	4602      	mov	r2, r0
 80130aa:	460b      	mov	r3, r1
 80130ac:	4650      	mov	r0, sl
 80130ae:	4659      	mov	r1, fp
 80130b0:	f7ed fbf4 	bl	800089c <__aeabi_ddiv>
 80130b4:	e9cd 0100 	strd	r0, r1, [sp]
 80130b8:	4620      	mov	r0, r4
 80130ba:	f7ed fa5b 	bl	8000574 <__aeabi_i2d>
 80130be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130c6:	4610      	mov	r0, r2
 80130c8:	4619      	mov	r1, r3
 80130ca:	f7ed fabd 	bl	8000648 <__aeabi_dmul>
 80130ce:	4602      	mov	r2, r0
 80130d0:	460b      	mov	r3, r1
 80130d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130d6:	f7ed fab7 	bl	8000648 <__aeabi_dmul>
 80130da:	a363      	add	r3, pc, #396	; (adr r3, 8013268 <__ieee754_log+0x318>)
 80130dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e0:	4680      	mov	r8, r0
 80130e2:	4689      	mov	r9, r1
 80130e4:	f7ed fab0 	bl	8000648 <__aeabi_dmul>
 80130e8:	a361      	add	r3, pc, #388	; (adr r3, 8013270 <__ieee754_log+0x320>)
 80130ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ee:	f7ed f8f5 	bl	80002dc <__adddf3>
 80130f2:	4642      	mov	r2, r8
 80130f4:	464b      	mov	r3, r9
 80130f6:	f7ed faa7 	bl	8000648 <__aeabi_dmul>
 80130fa:	a35f      	add	r3, pc, #380	; (adr r3, 8013278 <__ieee754_log+0x328>)
 80130fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013100:	f7ed f8ec 	bl	80002dc <__adddf3>
 8013104:	4642      	mov	r2, r8
 8013106:	464b      	mov	r3, r9
 8013108:	f7ed fa9e 	bl	8000648 <__aeabi_dmul>
 801310c:	a35c      	add	r3, pc, #368	; (adr r3, 8013280 <__ieee754_log+0x330>)
 801310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013112:	f7ed f8e3 	bl	80002dc <__adddf3>
 8013116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801311a:	f7ed fa95 	bl	8000648 <__aeabi_dmul>
 801311e:	a35a      	add	r3, pc, #360	; (adr r3, 8013288 <__ieee754_log+0x338>)
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013128:	4640      	mov	r0, r8
 801312a:	4649      	mov	r1, r9
 801312c:	f7ed fa8c 	bl	8000648 <__aeabi_dmul>
 8013130:	a357      	add	r3, pc, #348	; (adr r3, 8013290 <__ieee754_log+0x340>)
 8013132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013136:	f7ed f8d1 	bl	80002dc <__adddf3>
 801313a:	4642      	mov	r2, r8
 801313c:	464b      	mov	r3, r9
 801313e:	f7ed fa83 	bl	8000648 <__aeabi_dmul>
 8013142:	a355      	add	r3, pc, #340	; (adr r3, 8013298 <__ieee754_log+0x348>)
 8013144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013148:	f7ed f8c8 	bl	80002dc <__adddf3>
 801314c:	4642      	mov	r2, r8
 801314e:	464b      	mov	r3, r9
 8013150:	f7ed fa7a 	bl	8000648 <__aeabi_dmul>
 8013154:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013158:	4602      	mov	r2, r0
 801315a:	460b      	mov	r3, r1
 801315c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013164:	f7ed f8ba 	bl	80002dc <__adddf3>
 8013168:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801316c:	3551      	adds	r5, #81	; 0x51
 801316e:	4335      	orrs	r5, r6
 8013170:	2d00      	cmp	r5, #0
 8013172:	4680      	mov	r8, r0
 8013174:	4689      	mov	r9, r1
 8013176:	dd48      	ble.n	801320a <__ieee754_log+0x2ba>
 8013178:	2200      	movs	r2, #0
 801317a:	4b4d      	ldr	r3, [pc, #308]	; (80132b0 <__ieee754_log+0x360>)
 801317c:	4650      	mov	r0, sl
 801317e:	4659      	mov	r1, fp
 8013180:	f7ed fa62 	bl	8000648 <__aeabi_dmul>
 8013184:	4652      	mov	r2, sl
 8013186:	465b      	mov	r3, fp
 8013188:	f7ed fa5e 	bl	8000648 <__aeabi_dmul>
 801318c:	4602      	mov	r2, r0
 801318e:	460b      	mov	r3, r1
 8013190:	4606      	mov	r6, r0
 8013192:	460f      	mov	r7, r1
 8013194:	4640      	mov	r0, r8
 8013196:	4649      	mov	r1, r9
 8013198:	f7ed f8a0 	bl	80002dc <__adddf3>
 801319c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131a0:	f7ed fa52 	bl	8000648 <__aeabi_dmul>
 80131a4:	4680      	mov	r8, r0
 80131a6:	4689      	mov	r9, r1
 80131a8:	b964      	cbnz	r4, 80131c4 <__ieee754_log+0x274>
 80131aa:	4602      	mov	r2, r0
 80131ac:	460b      	mov	r3, r1
 80131ae:	4630      	mov	r0, r6
 80131b0:	4639      	mov	r1, r7
 80131b2:	f7ed f891 	bl	80002d8 <__aeabi_dsub>
 80131b6:	4602      	mov	r2, r0
 80131b8:	460b      	mov	r3, r1
 80131ba:	4650      	mov	r0, sl
 80131bc:	4659      	mov	r1, fp
 80131be:	f7ed f88b 	bl	80002d8 <__aeabi_dsub>
 80131c2:	e6da      	b.n	8012f7a <__ieee754_log+0x2a>
 80131c4:	a322      	add	r3, pc, #136	; (adr r3, 8013250 <__ieee754_log+0x300>)
 80131c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131ce:	f7ed fa3b 	bl	8000648 <__aeabi_dmul>
 80131d2:	a321      	add	r3, pc, #132	; (adr r3, 8013258 <__ieee754_log+0x308>)
 80131d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d8:	4604      	mov	r4, r0
 80131da:	460d      	mov	r5, r1
 80131dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131e0:	f7ed fa32 	bl	8000648 <__aeabi_dmul>
 80131e4:	4642      	mov	r2, r8
 80131e6:	464b      	mov	r3, r9
 80131e8:	f7ed f878 	bl	80002dc <__adddf3>
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed f870 	bl	80002d8 <__aeabi_dsub>
 80131f8:	4652      	mov	r2, sl
 80131fa:	465b      	mov	r3, fp
 80131fc:	f7ed f86c 	bl	80002d8 <__aeabi_dsub>
 8013200:	4602      	mov	r2, r0
 8013202:	460b      	mov	r3, r1
 8013204:	4620      	mov	r0, r4
 8013206:	4629      	mov	r1, r5
 8013208:	e7d9      	b.n	80131be <__ieee754_log+0x26e>
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	4650      	mov	r0, sl
 8013210:	4659      	mov	r1, fp
 8013212:	f7ed f861 	bl	80002d8 <__aeabi_dsub>
 8013216:	e9dd 2300 	ldrd	r2, r3, [sp]
 801321a:	f7ed fa15 	bl	8000648 <__aeabi_dmul>
 801321e:	4606      	mov	r6, r0
 8013220:	460f      	mov	r7, r1
 8013222:	2c00      	cmp	r4, #0
 8013224:	f43f af25 	beq.w	8013072 <__ieee754_log+0x122>
 8013228:	a309      	add	r3, pc, #36	; (adr r3, 8013250 <__ieee754_log+0x300>)
 801322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013232:	f7ed fa09 	bl	8000648 <__aeabi_dmul>
 8013236:	a308      	add	r3, pc, #32	; (adr r3, 8013258 <__ieee754_log+0x308>)
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	4604      	mov	r4, r0
 801323e:	460d      	mov	r5, r1
 8013240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013244:	e729      	b.n	801309a <__ieee754_log+0x14a>
 8013246:	2000      	movs	r0, #0
 8013248:	2100      	movs	r1, #0
 801324a:	e696      	b.n	8012f7a <__ieee754_log+0x2a>
 801324c:	f3af 8000 	nop.w
 8013250:	fee00000 	.word	0xfee00000
 8013254:	3fe62e42 	.word	0x3fe62e42
 8013258:	35793c76 	.word	0x35793c76
 801325c:	3dea39ef 	.word	0x3dea39ef
 8013260:	55555555 	.word	0x55555555
 8013264:	3fd55555 	.word	0x3fd55555
 8013268:	df3e5244 	.word	0xdf3e5244
 801326c:	3fc2f112 	.word	0x3fc2f112
 8013270:	96cb03de 	.word	0x96cb03de
 8013274:	3fc74664 	.word	0x3fc74664
 8013278:	94229359 	.word	0x94229359
 801327c:	3fd24924 	.word	0x3fd24924
 8013280:	55555593 	.word	0x55555593
 8013284:	3fe55555 	.word	0x3fe55555
 8013288:	d078c69f 	.word	0xd078c69f
 801328c:	3fc39a09 	.word	0x3fc39a09
 8013290:	1d8e78af 	.word	0x1d8e78af
 8013294:	3fcc71c5 	.word	0x3fcc71c5
 8013298:	9997fa04 	.word	0x9997fa04
 801329c:	3fd99999 	.word	0x3fd99999
 80132a0:	c3500000 	.word	0xc3500000
 80132a4:	43500000 	.word	0x43500000
 80132a8:	7fefffff 	.word	0x7fefffff
 80132ac:	3ff00000 	.word	0x3ff00000
 80132b0:	3fe00000 	.word	0x3fe00000

080132b4 <matherr>:
 80132b4:	2000      	movs	r0, #0
 80132b6:	4770      	bx	lr

080132b8 <nan>:
 80132b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80132c0 <nan+0x8>
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	00000000 	.word	0x00000000
 80132c4:	7ff80000 	.word	0x7ff80000

080132c8 <_init>:
 80132c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ca:	bf00      	nop
 80132cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ce:	bc08      	pop	{r3}
 80132d0:	469e      	mov	lr, r3
 80132d2:	4770      	bx	lr

080132d4 <_fini>:
 80132d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132d6:	bf00      	nop
 80132d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132da:	bc08      	pop	{r3}
 80132dc:	469e      	mov	lr, r3
 80132de:	4770      	bx	lr
